import{_ as i,c as t,a2 as a,o}from"./chunks/framework.DXKzXLg0.js";const m=JSON.parse('{"title":"The nvim command","description":"","frontmatter":{},"headers":[],"relativePath":"101/the-nvim-command.md","filePath":"101/the-nvim-command.md"}'),s={name:"101/the-nvim-command.md"};function n(h,e,l,d,c,r){return o(),t("div",null,e[0]||(e[0]=[a('<h1 id="the-nvim-command" tabindex="-1">The nvim command <a class="header-anchor" href="#the-nvim-command" aria-label="Permalink to &quot;The nvim command&quot;">​</a></h1><p>Most of the time we will open Neovim in a terminal emulator using the <code>nvim</code> command.</p><p>Now, Neovim doesn&#39;t have the concept of a project (yet). Using the <code>nvim</code> command without any argument won&#39;t restore the last session or project or anything like that.</p><p>When we want to work on a project is best to navigate to that directory before opening Neovim. We should use the <code>cd</code> command to go to our project and then execute the <code>nvim</code> command.</p><h2 id="open-a-file" tabindex="-1">Open a file <a class="header-anchor" href="#open-a-file" aria-label="Permalink to &quot;Open a file&quot;">​</a></h2><p>The command <code>nvim some-file</code> will show the content of <code>some-file</code> if it exists, else it&#39;ll show an empty &quot;<a href="./edit-multiple-files.html#buffers-windows-and-tabs">buffer</a>&quot; with the name <code>some-file</code>.</p><h2 id="open-a-directory" tabindex="-1">Open a directory <a class="header-anchor" href="#open-a-directory" aria-label="Permalink to &quot;Open a directory&quot;">​</a></h2><p>If the first argument of the <code>nvim</code> command is a directory Neovim will use <a href="./file-manager.html#what-s-netrw">its own file explorer</a> to show the content of the directory.</p><p>Relative paths work just fine. So, <code>nvim .</code> is a valid way to see the content of the current directory.</p><h2 id="how-to-exit" tabindex="-1">How to exit <a class="header-anchor" href="#how-to-exit" aria-label="Permalink to &quot;How to exit&quot;">​</a></h2><p>Follow these steps if you ever find yourself inside Neovim against your will:</p><ol><li>Do not panic!</li><li>If you actually did panic, press the <code>Escape</code> key repeatedly like a maniac for 2 seconds</li><li>Type <code>:</code></li><li>Write <code>quitall!</code></li><li>Press the <code>Enter</code> key</li></ol><p>This process is 100% compatible with Vim, by the way.</p><p>If you are curious about the details: the <code>Escape</code> key makes the editor go into <strong>normal mode</strong>. Typing <code>:</code> while in normal mode will take you to <strong>command-line mode</strong>. Command-line mode is where you write <strong>ex-commands</strong>. <code>quitall!</code> is the ex-command that closes all windows and exits without save.</p><h2 id="headless-mode" tabindex="-1">Headless mode <a class="header-anchor" href="#headless-mode" aria-label="Permalink to &quot;Headless mode&quot;">​</a></h2><p>Headless mode is Neovim without the UI. We can use this in scripts to make Neovim do stuff and then quit.</p><p>Here&#39;s a somewhat useful example. Executing the following command on the terminal will show the location of Neovim&#39;s config directory.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvim</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --headless</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;echo stdpath(&quot;config&quot;) . &quot;\\n&quot;&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;quit&#39;</span></span></code></pre></div><h2 id="change-your-config-directory" tabindex="-1">Change your config directory <a class="header-anchor" href="#change-your-config-directory" aria-label="Permalink to &quot;Change your config directory&quot;">​</a></h2><p>It seems these days is common for users to have multiple Neovim configurations. Since Neovim <code>v0.9</code> we can change the sub-directories Neovim will use to store configuration files and other data. We do this by setting an environment variable called <code>NVIM_APPNAME</code>.</p><p>So let&#39;s say we want a special config with many plugins and we want to call this <code>nvim-ide</code>. On any POSIX shell like bash or zsh the following command would work just fine.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NVIM_APPNAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nvim-ide</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nvim</span></span></code></pre></div><p>Now every &quot;standard directory&quot; in Neovim will have a different path from the regular <code>nvim</code> command.</p><p>We can verify the location of the new config using this command.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NVIM_APPNAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nvim-ide</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nvim</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --headless</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;echo stdpath(&quot;config&quot;) . &quot;\\n&quot;&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;quit&#39;</span></span></code></pre></div><p>Unfortunately on Windows&#39; <code>cmd.exe</code> environment variables don&#39;t work like that.</p>',26)]))}const u=i(s,[["render",n]]);export{m as __pageData,u as default};
