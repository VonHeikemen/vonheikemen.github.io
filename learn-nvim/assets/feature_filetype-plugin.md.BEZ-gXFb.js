import{_ as s,c as a,a2 as n,o as t}from"./chunks/framework.DXKzXLg0.js";const o=JSON.parse('{"title":"Filetype plugin","description":"","frontmatter":{"prev":{"text":"Features","link":"/feature/index"},"next":false},"headers":[],"relativePath":"feature/filetype-plugin.md","filePath":"feature/filetype-plugin.md"}'),e={name:"feature/filetype-plugin.md"};function l(p,i,h,k,r,d){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="filetype-plugin" tabindex="-1">Filetype plugin <a class="header-anchor" href="#filetype-plugin" aria-label="Permalink to &quot;Filetype plugin&quot;">​</a></h1><p>A filetype plugin is a script that&#39;s executed after Neovim assigns a value to the <code>filetype</code> option. This is the place where you can enable language specific options.</p><p>The concept is similar to a <a href="./global-plugin.html">global plugin</a> but in this case the script will be executed the first time we open a file, right after Neovim assigns a filetype to it.</p><h2 id="the-ftplugin-directory" tabindex="-1">The ftplugin directory <a class="header-anchor" href="#the-ftplugin-directory" aria-label="Permalink to &quot;The ftplugin directory&quot;">​</a></h2><p>We create a filetype plugin by adding a script in the <code>ftplugin</code> directory. But here the name of each script must match with a valid filetype.</p><p>For example, we can have something like this in our Neovim configuration directory.</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nvim</span></span>
<span class="line"><span>├── init.vim</span></span>
<span class="line"><span>└── ftplugin</span></span>
<span class="line"><span>    ├── gitcommit.vim</span></span>
<span class="line"><span>    └── netrw.lua</span></span></code></pre></div><p>And so the script <code>ftplugin/gitcommit.vim</code> will be executed everytime we open a buffer with the filetype <code>gitcommit</code>. And the same thing will happen with <code>ftplugin/netrw.lua</code>, it&#39;ll be executed everytime we open a netrw buffer.</p><p>For the sake of having some code that you can test, here&#39;s the content of <code>gitcommit.vim</code>.</p><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&quot; Change to insert mode immediately</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">startinsert</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&quot; Ctrl-s will save and exit Neovim</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">nnoremap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C-s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;cmd&gt;wq&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inoremap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C-s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;cmd&gt;wq&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>And this is the content of <code>netrw.lua</code>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bufnr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vim.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nvim_get_current_buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nmap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs, rhs, opts)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  opts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> opts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {remap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  opts.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bufnr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vim.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keymap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;n&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lhs, rhs, opts)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Close netrw window</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;q&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;cmd&gt;close&lt;cr&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {nowait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Go back in history</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;H&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;u&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Go up a directory</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-^&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Go down a directory / open file</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;l&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;cr&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Note both these script create &quot;buffer local&quot; mappings. With filetype plugins you need to be aware that the code can be executed multiple times. You should avoid creating global mappings or modifying global vim options.</p><h2 id="built-in-filetype-plugins" tabindex="-1">Built-in filetype plugins <a class="header-anchor" href="#built-in-filetype-plugins" aria-label="Permalink to &quot;Built-in filetype plugins&quot;">​</a></h2><p>Neovim already has a bunch of filetypes plugins for many programming languages. See:</p><ul><li><a href="https://github.com/neovim/neovim/tree/master/runtime/ftplugin" target="_blank" rel="noreferrer">neovim/runtime/ftplugin</a></li></ul><p>If you notice some style settings change in a specific programming language, then is probably a built-in filetype plugin doing that.</p>`,17)]))}const E=s(e,[["render",l]]);export{o as __pageData,E as default};
