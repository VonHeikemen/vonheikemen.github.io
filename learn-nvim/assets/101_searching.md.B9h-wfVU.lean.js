import{_ as a,c as t,a2 as s,o as i}from"./chunks/framework.DXKzXLg0.js";const u=JSON.parse('{"title":"Searching","description":"","frontmatter":{},"headers":[],"relativePath":"101/searching.md","filePath":"101/searching.md"}'),o={name:"101/searching.md"};function n(r,e,h,l,c,p){return i(),t("div",null,e[0]||(e[0]=[s(`<h1 id="searching" tabindex="-1">Searching <a class="header-anchor" href="#searching" aria-label="Permalink to &quot;Searching&quot;">​</a></h1><p>Search in Vim is one of those things that&#39;s so different from other editors some people question if it&#39;s even possible. So here I&#39;ll show you how Vim users solve this problem using only built-in features.</p><h2 id="search-in-file" tabindex="-1">Search in file <a class="header-anchor" href="#search-in-file" aria-label="Permalink to &quot;Search in file&quot;">​</a></h2><p>To start a search we use the <code>/</code> keymap. This particular command limits the search to the current file.</p><p>After we press <code>/</code> Vim will take the cursor to the bottom the screen. Once the cursor is in the command-line we can type the thing we want to search.</p><p>By default Neovim will highlight the matches while we type, and that highlight will stay even after the search is done. To remove these highlights we have to execute the command <code>:nohlsearch</code>. Note that since Neovim v0.7 <code>ctrl-l</code> can trigger the command <code>:nohlsearch</code>.</p><p>To navigate between search matches we use <code>n</code> and <code>N</code>. The <code>n</code> keymap will move the cursor to the next match. <code>N</code> will move the cursor to the previous match.</p><p>The <code>?</code> keymap will begin a reverse search. This is like <code>/</code> but the cursor will move backwards. The keymap <code>n</code> will move the cursor to the previous match and <code>N</code> will move it to the next.</p><h2 id="search-word-under-the-cursor" tabindex="-1">Search word under the cursor <a class="header-anchor" href="#search-word-under-the-cursor" aria-label="Permalink to &quot;Search word under the cursor&quot;">​</a></h2><p>For this we use the <code>*</code> keymap. After pressing <code>*</code> the cursor will move to the next occurrence of the word. Under the hood this is like making a search with <code>/</code>, this means we can still use <code>n</code> and <code>N</code> to navigate between matches.</p><p>The <code>#</code> keymap will begin a &quot;reverse search&quot; of the word under the cursor.</p><h2 id="substitute" tabindex="-1">Substitute <a class="header-anchor" href="#substitute" aria-label="Permalink to &quot;Substitute&quot;">​</a></h2><p>Now let&#39;s talk about search and replace within a single file. This is where we learn about the <a href="https://neovim.io/doc/user/usr_10.html#_substitution" target="_blank" rel="noreferrer">substitute command</a>.</p><p>Let me show you a concrete example.</p><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,42substitute</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">/wave/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kanagawa/gc</span></span></code></pre></div><p>Hear me out, I&#39;m showing you this so I can explain better the short version of the command.</p><p>Okay. So, <code>:</code> is there because we will use this in command-line mode.</p><p><code>7,42</code> is a range, it&#39;ll tell the substitute command in which lines we want to search. But we don&#39;t have to be this explicit, <code>%</code> can be used as a range and it will make the command search in the entire file.</p><p><code>substitute</code> is the name of the command. Most people use the short version which is just the <code>s</code>.</p><p><code>/wave</code> is the search pattern. <code>/</code> is the delimeter we will use between parameters and <code>wave</code> is the search pattern itself. Here we can use a regex pattern, not just full words.</p><p><code>/kanagawa</code> is the replacement text. In the example we replace the pattern <code>wave</code> with the text <code>kanagawa</code>.</p><p><code>/gc</code> are flags. Flags can be used to modify the behavior of the search. In this example the <code>g</code> flag means &quot;global,&quot; it&#39;ll replace every match in every line. Without the <code>g</code> flag only the first match of the line will be replaced. <code>c</code> is the confirm flag, for every match Vim will ask if we want to replace it.</p><p>But then again, a Vim user wouldn&#39;t type all. They would write the short version:</p><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:%s</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">/wave/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kanagawa/gc</span></span></code></pre></div><h2 id="search-and-replace" tabindex="-1">Search and replace <a class="header-anchor" href="#search-and-replace" aria-label="Permalink to &quot;Search and replace&quot;">​</a></h2><p>We know the <code>:substitute</code> command can search and replace in the current file. But now a &quot;project wide&quot; replace is slightly more involve because we don&#39;t have dedicated command. Here we need to use several features to make it happen.</p><p>Say we want to do the same as the previous example but in multiple files. We want to search the word <code>wave</code> and replace it with <code>kanagawa</code>. Here&#39;s what we do:</p><ol><li>Search in a directory</li></ol><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:vimgrep </span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">/wave/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./**</span></span></code></pre></div><ol start="2"><li>Inspect search results</li></ol><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:copen</span></span></code></pre></div><ol start="3"><li>Replace in all files</li></ol><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:cdo s</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">/wave/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kanagawa/ | update</span></span></code></pre></div><p>Now let&#39;s go over through each step in a little more detail.</p><h3 id="search-in-a-directory" tabindex="-1">Search in a directory <a class="header-anchor" href="#search-in-a-directory" aria-label="Permalink to &quot;Search in a directory&quot;">​</a></h3><p>Neovim provides a couple of <a href="https://neovim.io/doc/user/quickfix.html#grep" target="_blank" rel="noreferrer">grep commands</a> to help us search in multiple files. We have <a href="https://neovim.io/doc/user/quickfix.html#%3Agrep" target="_blank" rel="noreferrer">:grep</a> and <a href="https://neovim.io/doc/user/quickfix.html#%3Avimgrep" target="_blank" rel="noreferrer">:vimgrep</a>.</p><p>I used <code>:vimgrep</code> as an example because it works the same in every operating system.</p><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:vimgrep </span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">/wave/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./**</span></span></code></pre></div><p>The first argument is the search pattern. Here we can write any regex pattern Vim supports. The rest of the arguments are the files where we want to search.</p><p>If I&#39;m not mistaken, <code>./**</code> will expand before executing <code>:vimgrep</code>. So Neovim will transform that glob pattern into a list of files. So if you are in a directory that has millions of files it maybe slow.</p><p>In practice <code>:grep</code> is a better option. But here you should know what implementation of grep Neovim is trying to execute. For example, this works on my machine.</p><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:grep -r </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wave&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span></span></code></pre></div><p>But depending on the version of grep the <code>-r</code> flag could make the search fail. Also, newer versions of Neovim (v0.10 and greater) will try to use <a href="https://github.com/BurntSushi/ripgrep" target="_blank" rel="noreferrer">ripgrep</a> if it&#39;s available.</p><p>The arguments of the <code>:grep</code> will be passed down to the &quot;grep program&quot; Neovim found on the system. This can be configured with <a href="https://neovim.io/doc/user/options.html#&#39;grepprg&#39;" target="_blank" rel="noreferrer">grepprg</a> option. If you want to inspect the current value use this command.</p><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> grepprg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span></code></pre></div><h3 id="inspect-search-results" tabindex="-1">Inspect search results <a class="header-anchor" href="#inspect-search-results" aria-label="Permalink to &quot;Inspect search results&quot;">​</a></h3><p><code>:grep</code> and <code>:vimgrep</code> will place every match in something called the <a href="https://neovim.io/doc/user/quickfix.html#Quickfix" target="_blank" rel="noreferrer">quickfix list</a>. This is a list of file paths with line and column numbers. To double check the result of our search we use this command.</p><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:copen</span></span></code></pre></div><p>That would open a split window with the content of the most recent quickfix list. These are the result <strong>I get</strong>.</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>colors/wave.lua|29 col 11-15| name = &#39;wave&#39;,</span></span>
<span class="line"><span>init.lua|6 col 22-26| vim.cmd(&#39;colorscheme wave&#39;)</span></span></code></pre></div><p>Inside the quickfix window we press <code>Enter</code> on top of any item to move the cursor to that location. We can also use the commands <a href="https://neovim.io/doc/user/quickfix.html#%3Acnext" target="_blank" rel="noreferrer">:cnext</a> and <a href="https://neovim.io/doc/user/quickfix.html#%3Acprev" target="_blank" rel="noreferrer">:cprev</a>. But note that we don&#39;t need to open the quickfix window to use these commands.</p><h3 id="replace-in-all-files" tabindex="-1">Replace in all files <a class="header-anchor" href="#replace-in-all-files" aria-label="Permalink to &quot;Replace in all files&quot;">​</a></h3><p>To automate the replace process we use the <a href="https://neovim.io/doc/user/quickfix.html#%3Acdo" target="_blank" rel="noreferrer">:cdo</a> command.</p><p><code>:cdo</code> will execute the given command in every location of the quickfix list. In this case we want to provide a <a href="https://neovim.io/doc/user/change.html#%3Asubstitute" target="_blank" rel="noreferrer">:substitute</a> command.</p><p>We could use this command.</p><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:cdo s</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">/wave/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kanagawa/</span></span></code></pre></div><p>This will execute the replace step... but notice that&#39;s not the command I used in the example.</p><p>I recommend adding <code>| update</code> so Vim can actually save the changes after doing the replace step.</p><p>So our journey ends with this command.</p><div class="language-vim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:cdo s</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">/wave/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kanagawa/ | update</span></span></code></pre></div>`,60)]))}const m=a(o,[["render",n]]);export{u as __pageData,m as default};
