<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Devlog</title>
        <link>https://vonheikemen.github.io/devlog/</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://vonheikemen.github.io/devlog/tags/aprendizaje/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Tue, 10 Mar 2020 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>Un poco del paradigma funcional en tu javascript: Aplicación parcial</title>
                <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
                <link>https://vonheikemen.github.io/devlog/es/web-development/functional-programming-for-your-everyday-javascript-partial-application/</link>
                <guid>https://vonheikemen.github.io/devlog/es/web-development/functional-programming-for-your-everyday-javascript-partial-application/</guid>
                <description>&lt;p&gt;Hoy vamos a resolver un misterio, el misterio de porque algunas personas crean funciones que aceptan una (otra) función como primer parámetro. Ya deben estar pensando que la respuesta es aplicación parcial y tienen razón en cierta parte, pero la aplicación parcial sólo es el medio para un fin, la verdadera razón de esto es para hacer posible una &amp;quot;mejor&amp;quot; composición de funciones. Pero antes de adentrarnos en los detalles técnicos de la aplicación parcial vamos a explorar la manera en la que hacemos las cosas actualmente.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;como-hacemos-las-cosas&quot;&gt;Como hacemos las cosas&lt;&#x2F;h2&gt;
&lt;p&gt;Cuando creamos una función usualmente ordenamos los parámetros basados en un sistema de prioridad&#x2F;importancia, donde el más importante va primero. Como resultado, cuando trabajamos sobre un dato este es el primero en la lista, le siguen los parámetros de configuración y por último dejamos los parámetros opcionales que podemos omitir.&lt;&#x2F;p&gt;
&lt;p&gt;Pongamos a prueba esa teoría. Digamos que queremos crear una función que pueda extraer unas propiedades específicas de un objeto plano. Pensemos en lo que necesitamos. ¿El objeto, eso en lo primero que pensaron? Es natural, no queremos omitirlo por accidente cuando ejecutemos la función. Eso deja la lista de propiedades como último parámetro. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= {};
  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;key of keys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;];
  }
  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Nota: No somos lo únicos que pensamos de esta manera, echen un vistazo a &lt;a href=&quot;https:&#x2F;&#x2F;lodash.com&#x2F;docs&#x2F;#pick&quot;&gt;pick de lodash&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ahora digamos que tenemos un objeto &lt;code&gt;user&lt;&#x2F;code&gt; y queremos esconder cualquier información &amp;quot;sensible&amp;quot;. Lo haríamos de esta manera.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Tom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;lastname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Keen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;noreply@example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;hudson&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;lastname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]); 

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; { name: &amp;quot;Tom&amp;quot;, lastname: &amp;quot;Keen&amp;quot; }
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Funciona bien, ¿Pero qué pasa cuando necesitamos trabajar con un arreglo de usuarios?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= [
  {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Tom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;lastname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Keen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;noreply@example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;hudson&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;
  },
  {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Smokey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;lastname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Putnum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;noreply@example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;carnival&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;
  },
  {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;69&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Lady&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;lastname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Luck&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;noreply@example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;norestforthewicked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;
  }
];
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nos vemos forzados a recorrer el arreglo y llamar la función.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;lastname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
});

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;*
[
  {&amp;quot;name&amp;quot;: &amp;quot;Tom&amp;quot;, &amp;quot;lastname&amp;quot;: &amp;quot;Keen&amp;quot;},
  {&amp;quot;name&amp;quot;: &amp;quot;Smokey&amp;quot;, &amp;quot;lastname&amp;quot;: &amp;quot;Putnum&amp;quot;},
  {&amp;quot;name&amp;quot;: &amp;quot;Lady&amp;quot;, &amp;quot;lastname&amp;quot;: &amp;quot;Luck&amp;quot;}
]
*&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;No está tan mal. ¿Saben qué? Esa función parece útil. Vamos ponerla en otro lugar y le daremos un nombre.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;public_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;lastname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;public_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¿Qué está pasando en realidad? Lo que estamos haciendo es vincular el segundo parámetro de la función con el valor &lt;code&gt;[&#x27;name&#x27;, &#x27;lastname&#x27;]&lt;&#x2F;code&gt; y obligamos a &lt;code&gt;pick&lt;&#x2F;code&gt; a esperar por el objeto &lt;code&gt;user&lt;&#x2F;code&gt; para ser ejecutado.&lt;&#x2F;p&gt;
&lt;p&gt;Llevemos este ejemplo más allá. Vamos a fingir que &lt;code&gt;Async&#x2F;Await&lt;&#x2F;code&gt; no existe y que el arreglo &lt;code&gt;users&lt;&#x2F;code&gt; viene de una promesa (de una instancia de &lt;code&gt;Promise&lt;&#x2F;code&gt;) tal vez de una petición http usando &lt;code&gt;fetch&lt;&#x2F;code&gt;. ¿Qué hacemos?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#6699cc;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;lastname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
  })
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Eso sí se ve mal. Tal vez una función con flechas puedan mejorar la situación.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#6699cc;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;lastname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;])));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¿Está mejor? Una pregunta para otro día. Pero ya nos preparamos para esto, tenemos la función &lt;code&gt;public_info&lt;&#x2F;code&gt;, vamos a usarla. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#6699cc;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;public_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Es aceptable, me gusta. Y si queremos podemos crear otra función que vincule &lt;code&gt;public_info&lt;&#x2F;code&gt; con &lt;code&gt;.map&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;user_list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;public_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora tenemos.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#6699cc;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;user_list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Veamos cómo llegamos a este punto.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; código...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;public_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;lastname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;user_list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;public_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;user_list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¿Y si les digo que hay otra manera de crear &lt;code&gt;public_info&lt;&#x2F;code&gt; y &lt;code&gt;user_list&lt;&#x2F;code&gt;? ¿Y si se pudiera crear así?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;public_info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;([&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;lastname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;user_list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;public_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;user_list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;O poner todo en una línea si eso prefieren.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#6699cc;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;([&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;lastname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;])));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Podemos hacerlo pero primero tenemos que cambiar ligeramente la forma en la que pensamos en las funciones.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pensando-diferente&quot;&gt;Pensando diferente&lt;&#x2F;h2&gt;
&lt;p&gt;En lugar de pensar en prioridades deberíamos empezar a pensar en dependencias y datos. Al crear una función pensemos ¿qué parámetro es el que cambia con más frecuencia? Ese debería ser el último parámetro. &lt;&#x2F;p&gt;
&lt;p&gt;Hagamos una función que tome los primeros elementos de algo. ¿Qué necesitamos? Necesitamos ese &amp;quot;algo&amp;quot; y también el necesitamos el número de elementos que vamos a tomar. De esos dos ¿cuál cambia con más frecuencia? Es el dato, ese &amp;quot;algo&amp;quot;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;En una situación normal esta es la forma de usarla.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#6699cc;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; [&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pero con un poco de magia (la cual será revelada pronto) podemos reusarla de la siguiente manera.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;first_two &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;first_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;([&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Este patrón se vuelve más conveniente cuando hay funciones (callbacks) involucradas. Vamos a &amp;quot;revertir&amp;quot; los parámetros de &lt;code&gt;Array.filter&lt;&#x2F;code&gt; y veamos qué podemos hacer.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hagamos algo sencillo, vamos a excluir de un arreglo todos los valores que puedan ser interpretados como falsos.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;that&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; [ true, &amp;quot;that&amp;quot; ]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Se ve bien, y puede ser incluso mejor se le añadimos algo de contexto.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;exclude_falsey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;exclude_falsey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;that&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Espero que a estas alturas puedan ver las posibilidades que este patrón puede ofrecer. Existen librerías (como &lt;a href=&quot;https:&#x2F;&#x2F;ramdajs.com&#x2F;docs&#x2F;&quot;&gt;Ramda&lt;&#x2F;a&gt;) que usan esta técnica para construir funciones complejas usando como bases funciones pequeñas de un sólo propósito.&lt;&#x2F;p&gt;
&lt;p&gt;Ya basta de hablar, ahora veamos como podemos lograr implementar esto.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;este-es-el-camino&quot;&gt;Este es el camino&lt;&#x2F;h2&gt;
&lt;p&gt;Como todo en javascript hay mil maneras de lograr la misma meta, algunas son más convenientes que otras, y en ocasiones se requiere de magia para implementarlo. Empecemos.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;el-vinculo-magico-de-bind&quot;&gt;El vínculo mágico de bind&lt;&#x2F;h3&gt;
&lt;p&gt;Resulta que no necesitamos hacer nada extraordinario para vincular valores a los parámetros de una función porque cada una ya cuenta con el método &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Function&#x2F;bind&quot;&gt;bind&lt;&#x2F;a&gt;. Puede que la sintaxis no parezca tan conveniente como la mostré en los ejemplo pero está bastante cerca. Sólo se debe tener en cuenta que el primer parámetro de &lt;code&gt;Function.bind&lt;&#x2F;code&gt; es el &amp;quot;contexto&amp;quot;, es decir el valor que tiene la palabra clave &lt;code&gt;this&lt;&#x2F;code&gt; dentro de una función. Este es su uso básico. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;exclude_falsey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;exclude_falsey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;that&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;la-magia-interior&quot;&gt;La magia interior&lt;&#x2F;h3&gt;
&lt;p&gt;Este requiere de un poco de trabajo e involucra otra palabra clave, &lt;code&gt;arguments&lt;&#x2F;code&gt;. Lo que haremos será aprovechar el hecho de que &lt;code&gt;arguments&lt;&#x2F;code&gt; es una estructura parecida a un arreglo que tiene una propiedad &lt;code&gt;.length&lt;&#x2F;code&gt; con la cual podremos contar el número de parámetros que la función ha recibido, si es menos de los que necesitamos devolveremos nuevamente la función. ¿Suena confuso?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Aquí empezamos a contar.
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; si .length es 1 eso significa que tenemos `func`
    &#x2F;&#x2F; también significa que no tenemos `data`
    &#x2F;&#x2F; asi que devolvemos una función que
    &#x2F;&#x2F; recuerda el valor de `func` y espera por `data`
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora es posible hacer esto.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;exclude_falsey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;exclude_falsey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;that&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Y también.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;that&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¿No es genial?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;un-enfoque-simple&quot;&gt;¿Un enfoque simple?&lt;&#x2F;h3&gt;
&lt;p&gt;Y por supuesto que siempre tenemos la opción de implementar &lt;code&gt;bind&lt;&#x2F;code&gt; nosotros mismos. Con la ayuda del operador de propagación (los &lt;code&gt;...&lt;&#x2F;code&gt;) podemos recoger los argumentos por pasos y simplemente aplicarlos a la función cuando sea momento de llamarla.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;first_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;first_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;El primer paso es obtener la función y recoger una lista de parámetros, luego devolvemos una función que recolecta otra lista de parámetros y finalmente llamamos la función &lt;code&gt;func&lt;&#x2F;code&gt; con todo lo que tenemos.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;exclude_falsey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;exclude_falsey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;that&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lo interesante de esto es que si revierten el orden de &lt;code&gt;first_args&lt;&#x2F;code&gt; con &lt;code&gt;rest&lt;&#x2F;code&gt; pueden crear una función que vincula los argumentos en el orden opuesto.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;no-mas-magia&quot;&gt;No más magia&lt;&#x2F;h3&gt;
&lt;p&gt;Con este pueda que tenga sentimientos encontrados pero la verdad es que esta la forma más simple.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
  }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lo que es equivalente a esto.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;La idea es tomar un parámetro a la vez en funciones separadas. Basicamente, sigan devolviendo funciones hasta que tengan todos los parámetros que necesitan. Esto es lo que algunos llaman &amp;quot;currying&amp;quot;. ¿Cómo se usa?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;exclude_falsey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;exclude_falsey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;that&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ese es un caso. Este es el otro.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#6699cc;&quot;&gt;filter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) ([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;that&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¿Ven ese par de paréntesis extra? Esa es la segunda función. Necesitan colocar un par por cada parámetro que tenga la función.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;curry-automatico&quot;&gt;Curry automático&lt;&#x2F;h3&gt;
&lt;p&gt;Volviendo al tema de la magia, pueden &amp;quot;automatizar&amp;quot; el proceso de curry usando una función.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;curry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;arity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Adivina cuantos parámetros se necesitan
    &#x2F;&#x2F; Esto no funciona todo el tiempo.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;arity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Ignora `fn` y `arity`, pon el resto es `rest``
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;prototype&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; ¿Tenemos lo que necesitamos?
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;arity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Ejecuta `curry.bind` con `fn`, `arity` y `rest` como parámetros
  &#x2F;&#x2F; retorna una función que espera el resto
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;curry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;curry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;arity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Con esto ya pueden transformar funciones ya existentes o crear nuevas que soporten el &amp;quot;curry&amp;quot; desde el inicio.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;curried_filter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;curry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;exclude_falsey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;curried_filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;exclude_falsey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;that&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;]);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ó.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;filter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;curry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;); 
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Eso es todo, amigos. Espero hayan disfrutado la lectura.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fuentes&quot;&gt;Fuentes&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=m3svKOdZijA&quot;&gt;Hey Underscore, You&#x27;re Doing It Wrong! (video)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;benalman.com&#x2F;news&#x2F;2012&#x2F;09&#x2F;partial-application-in-javascript&#x2F;&quot;&gt;Partial Application in JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Un poco del paradigma funcional en tu javascript: Los poderes de map</title>
                <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
                <link>https://vonheikemen.github.io/devlog/es/web-development/functional-programming-for-your-everyday-javascript-the-power-of-map/</link>
                <guid>https://vonheikemen.github.io/devlog/es/web-development/functional-programming-for-your-everyday-javascript-the-power-of-map/</guid>
                <description>&lt;p&gt;En esta ocasión vamos a dar un vistazo dentro del mundo de los &lt;code&gt;functors&lt;&#x2F;code&gt; y descubrir qué los hace tan especiales. Functor es uno de esos términos que aparece cuando la gente a habla del paradigma funcional en la programación pero cuando llega el momento de explicar qué es, lo que ocurre es que mencionan otros términos abstractos o sólo cuantan los detalles necesarios que necesitan saber. Ya que no tengo ningún conocimiento formal de teoría de categorías no voy a fingir qué sé exactamente lo que son, lo que haré será dicerles lo suficiente para que puedan reconocerlos y cómo pueden usarlos.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;que-es-un-functor&quot;&gt;¿Qué es un functor?&lt;&#x2F;h2&gt;
&lt;p&gt;Estoy convencido de qué el término es difícil de entender porque se necesita conocimientos de otro tipo de estructura para poder comprenderlos en su totalidad. Otra cosa que contribuye a la confusión es el hecho de que la teoría no sé traduce de la manera más clara en código. Pero bueno, aún así intentaré responder la pregunta, empezando con lo abstracto. &lt;&#x2F;p&gt;
&lt;p&gt;Pueden pensar en ellos como la relación que existe entre dos conjuntos. Tengan paciencia, esto empezará a tener sentido en un momento. Imaginen dos arreglos.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;favorite_numbers  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;69&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;73&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;increased_numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;43&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;74&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Bien, tenemos el conjunto &lt;code&gt;favorite_numbers&lt;&#x2F;code&gt; y el conjunto &lt;code&gt;increased_numbers&lt;&#x2F;code&gt;, son dos arreglos diferentes almacenados en dos variables separadas pero todos sabemos que hay una conexión entre ellos, lo que debemos tener en cuenta es que podemos expresar esa relación con código. Imaginen que el arreglo &lt;code&gt;increased_numbers&lt;&#x2F;code&gt; no existe pero aún necesitamos esos números, para hacer que aparezcan nuevamente sólo necesitamos la ayuda de nuestro viejo amigo &lt;code&gt;map&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;increased_numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;favorite_numbers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;map&lt;&#x2F;code&gt; va a recorrer todo el arreglo y por cada número va a incrementarlo y colocarlo en nuevo arreglo, lo que trae a &lt;code&gt;increased_numbers&lt;&#x2F;code&gt; devuelta. Aunque hemos creado este arreglo nuevamente, este no salió de la nada, nosotros no inventamos los números &lt;code&gt;43&lt;&#x2F;code&gt;, &lt;code&gt;70&lt;&#x2F;code&gt; y &lt;code&gt;74&lt;&#x2F;code&gt;. Lo que hicimos fue describir la relación que hay entre esos números y &lt;code&gt;favorite_numbers&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;¿Eso es todo? ¿Un functor es un arreglo? La respuesta a eso es un rotundo no. Los arreglos son simplemente una manera muy conveniente de representar un uso común. Esto deja una pregunta en el aire.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;como-los-reconocemos&quot;&gt;¿Cómo los reconocemos?&lt;&#x2F;h2&gt;
&lt;p&gt;A menudo veo que otras personas los describen como cajas. No creo que estén totalmente errados porque utilizar un contenedor es una de las maneras más simples en las que se puede implementar un functor. La analogía de la caja es especialmente curiosa en javascript porque podemos usar corchetes para crear un arreglo. Vean.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Un valor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Una caja
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[];

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Miren, un valor en una caja
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Volviendo a la pregunta, ¿Cómo los reconocemos? Okey, resulta pasa y acontece que hay reglas.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;las-reglas&quot;&gt;Las reglas&lt;&#x2F;h3&gt;
&lt;p&gt;De nuevo usaré arreglos con números sólo por lo conveniente pero estas reglas deben aplicar a todas aquellas estructuras que deseen ser parte del club functor.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;identidad&quot;&gt;Identidad&lt;&#x2F;h4&gt;
&lt;p&gt;Dada la función &lt;code&gt;identity&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;identity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;value&lt;&#x2F;code&gt; and &lt;code&gt;value.map(identity)&lt;&#x2F;code&gt; deben ser equivalentes.&lt;&#x2F;p&gt;
&lt;p&gt;Por ejemplo.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;];               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; [1,2,3]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;identity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; [1,2,3]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¿Qué? ¿Qué importancia tiene eso? ¿Qué nos dice?&lt;&#x2F;p&gt;
&lt;p&gt;Buenas preguntas. Esto nos dice que la función &lt;code&gt;map&lt;&#x2F;code&gt; debe preservar la forma de la estructura. En nuestro ejemplo si aplicamos &lt;code&gt;map&lt;&#x2F;code&gt; a un arreglo de tres elementos debemos recibir un nuevo arreglo con tres elementos. Si fuera un arreglo con cien elementos deberíamos recibir un nuevo arreglo con cien elementos. Ya entienden.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;composicion&quot;&gt;Composición&lt;&#x2F;h4&gt;
&lt;p&gt;Dadas dos funciones &lt;code&gt;fx&lt;&#x2F;code&gt; y &lt;code&gt;gx&lt;&#x2F;code&gt; lo siguiente debe ser cierto.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;value.map(fx).map(gx)&lt;&#x2F;code&gt; y &lt;code&gt;value.map(arg =&amp;gt; gx(fx(arg)))&lt;&#x2F;code&gt; deben ser equivalentes.&lt;&#x2F;p&gt;
&lt;p&gt;Otro ejemplo.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;times_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}

[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;times_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; [4]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;times_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;))); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; [4]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Si ya saben como funciona &lt;code&gt;Array.map&lt;&#x2F;code&gt; esto debería ser obvio. Aquí se presenta la oportunidad de optimizar el código para el desempeño o legibilidad. En el caso de los arreglos, múltiples llamadas a &lt;code&gt;map&lt;&#x2F;code&gt; puede tener un gran impacto en el desempeño a medida que vaya creaciendo el número de elementos en la lista.&lt;&#x2F;p&gt;
&lt;p&gt;Eso es todo. Esas dos reglas son lo único que deben tener en cuenta para reconocer un functor.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tiene-que-ser-map&quot;&gt;¿Tiene que ser .map?&lt;&#x2F;h2&gt;
&lt;p&gt;Supongo que ahora desean saber qué otro tipo de cosas siguen estas reglas que mencioné. Resulta que hay otra estructura bastante popular que sigue estas reglas y esa es &lt;code&gt;Promise&lt;&#x2F;code&gt;. Vean.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Un valor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Una caja
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Miren, un valor en una caja
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Identidad
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;identity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 1 (eventualmente)

&#x2F;&#x2F; Composición
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;times_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;times_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;))); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 4
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Si somos honestos aquí, &lt;code&gt;Promise.then&lt;&#x2F;code&gt; se comporta más como &lt;code&gt;Array.flatMap&lt;&#x2F;code&gt; y no como &lt;code&gt;.map&lt;&#x2F;code&gt; pero ignoremos eso.&lt;&#x2F;p&gt;
&lt;p&gt;Bien, tenemos &lt;code&gt;Array&lt;&#x2F;code&gt; y tenemos &lt;code&gt;Promise&lt;&#x2F;code&gt; ambos actúan como contenedores y tienen métodos que siguen las reglas. ¿Pero qué pasaría si no existiera &lt;code&gt;Array.map&lt;&#x2F;code&gt;? ¿Significa que &lt;code&gt;Array&lt;&#x2F;code&gt; no es un functor? ¿Perdemos todos los beneficios?&lt;&#x2F;p&gt;
&lt;p&gt;Vamos a dar un paso atrás. ¿Si &lt;code&gt;Array.map&lt;&#x2F;code&gt; no existe &lt;code&gt;Array&lt;&#x2F;code&gt; no es un &lt;code&gt;functor&lt;&#x2F;code&gt;? No lo sé. ¿Perdemos todos los beneficios? No, aún podemos tratar los arreglos como un functor, lo que perdemos es la conviniencia de la sintaxis &lt;code&gt;.map&lt;&#x2F;code&gt;. Aún podemos crear nuestro propio &lt;code&gt;map&lt;&#x2F;code&gt; fuera de la estructura.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= [];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  }
};
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¿Ven? No está tan mal. Y funciona.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Identidad
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;identity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; [1]

&#x2F;&#x2F; Composición
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;times_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]));   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; [4]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;times_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)), [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; [4]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¿Están pensando lo que yo? Probablemente no. Esto es lo que estoy pensando, si podemos crear &lt;code&gt;map&lt;&#x2F;code&gt; para los arreglos entonces nada evita que hagamos uno para los objetos, después de todo, los objetos también son un conjunto de valores.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;ob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= {};
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;] of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;entries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  }
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; ¿Por qué solo map? 
&#x2F;&#x2F; Basado en esto ya pueden ver cómo crear `filter` y `reduce`
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Vamos a probar.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Identidad
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;identity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;prop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; {some: 1, prop: 2}

&#x2F;&#x2F; Composición
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;times_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;prop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;})); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; {some: 4, prop: 6}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;times_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)), {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;prop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; {some: 4, prop: 6}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;hazlo-tu-mismo&quot;&gt;Hazlo tú mismo&lt;&#x2F;h2&gt;
&lt;p&gt;Toda esta charla de arreglos y objetos es útil pero ahora pienso que sabemos lo suficiente para crear nuestro propio functor, las reglas parecen ser bastante sencillas. Vamos a hacer algo vagamente útil. ¿Alguna vez han escuchado de los Observables? Bien, vamos a hacer algo parecido. Vamos a crear una versión más simple de &lt;a href=&quot;https:&#x2F;&#x2F;mithril.js.org&#x2F;stream.html&quot;&gt;mithril-stream&lt;&#x2F;a&gt;, será divertido.&lt;&#x2F;p&gt;
&lt;p&gt;Lo que queremos hacer es manejar un flujo de datos a través del tiempo. La interfaz de nuestra función será esta.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Crear instancia con valor inicial
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num_stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Crear un flujo dependendiente
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;increased &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Obtener el valor actual
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 0

&#x2F;&#x2F; Colocar un nuevo valor en el flujo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 42

&#x2F;&#x2F; La fuente se actualiza
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 42

&#x2F;&#x2F; El dependiente se actualiza
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;increased&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 43
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Empecemos con la función que obtiene y actualiza el valor.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Si tenemos un parametro actualizamos el estado
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; retorna el estado actual
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora esto debería funcionar.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Inicializamos
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num_stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Obtenemos el valor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 42

&#x2F;&#x2F; Actualizamos
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;73&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Revisamos
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 73
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ya sabemos que queremos un método &lt;code&gt;map&lt;&#x2F;code&gt; pero ¿Cuál es el efecto que debe tener? Lo que queremos es que la función (el callback) escuche los cambios de la fuente. Empecemos con eso, lo que haremos será almacenar las funciones proporcionadas a &lt;code&gt;map&lt;&#x2F;code&gt; en un arreglo y las ejecutaremos justo después de que se produzca el cambio.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt;  function Stream(state) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;   let listeners = [];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    let stream = function(value) {
      if(arguments.length &amp;gt; 0) {
        state = value;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;       listeners.forEach(fn =&amp;gt; fn(value));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;      }

      return state;
    }

    return stream;
  }
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora creamos el método &lt;code&gt;map&lt;&#x2F;code&gt;, pero no debe ser un método cualquiera, debemos seguir las reglas.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Identidad: Cuando &lt;code&gt;map&lt;&#x2F;code&gt; es ejecutado necesita preservar la forma de la estructura. Esto significa que debemos retornar otro &lt;code&gt;stream&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Composición: Ejecutar &lt;code&gt;map&lt;&#x2F;code&gt; varias veces debe ser equivalente a la composición de funciones proporciondas a esas llamadas.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;listeners &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= [];

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;listeners&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Crea una nueva instancia con el valor transformado.
    &#x2F;&#x2F; Esto ejecutara `fn` cuando se llame a `map`
    &#x2F;&#x2F; esto no siempre será lo mejor si `fn` tiene algún 
    &#x2F;&#x2F; efecto fuera de su ámbito. Tengan cuidado.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Transforma el valor y actualiza el nuevo flujo
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;listener &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Actualiza los dependientes de la fuente
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;listeners&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;listener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Probemos las reglas. Comenzamos con identidad.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Los `Stream` son como una cascada
&#x2F;&#x2F; el primero es el más importante
&#x2F;&#x2F; este es el que activa los demás
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num_stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Crea el dependendiente
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;identity_stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;identity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;); 

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Actualiza la fuente
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Revisa
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;identity_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 42
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora la composición.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Crea la fuente
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num_stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Crea los dependientes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;map_stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;times_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;composed_stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;times_two&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)));

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Actualiza
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;num_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Revisa
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;composed_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; =&amp;gt; 4
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nuestro trabajo está hecho. ¿Pero de verdad sirve? ¿Se puede hacer algo con eso? Bueno, sí, pueden usarlo para manejar eventos. Así.&lt;&#x2F;p&gt;
&lt;p 
  class=&quot;codepen&quot; 
  data-height=&quot;600&quot; 
  data-theme-id=&quot;dark&quot; 
  data-default-tab=&quot;js,result&quot; 
  data-user=&quot;VonHeikemen&quot; 
  data-slug-hash=&quot;dyoMJRw&quot; 
  data-preview=&quot;true&quot; 
  style=&quot;height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; 
  data-pen-title=&quot;an fmap example&quot;&gt;
  &lt;span&gt;
    See the Pen &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&#x2F;pen&#x2F;dyoMJRw&quot;&gt;an fmap example&lt;&#x2F;a&gt; by Heiker (&lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&quot;&gt;@VonHeikemen&lt;&#x2F;a&gt;) on &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&quot;&gt;CodePen&lt;&#x2F;a&gt;.
  &lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;script async src=&quot;https:&#x2F;&#x2F;static.codepen.io&#x2F;assets&#x2F;embed&#x2F;ei.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;h3 id=&quot;mas-ejemplos&quot;&gt;Más ejemplos&lt;&#x2F;h3&gt;
&lt;p&gt;Ahora ya deben tener un buen entendimiento de los functors, pero si quieren seguir viendo más pueden revisar estos artículos.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vonheikemen.github.io&#x2F;devlog&#x2F;es&#x2F;web-development&#x2F;functional-programming-for-your-everyday-javascript-using-a-maybe&#x2F;&quot;&gt;Manejar ausencia de valores&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jrsinclair.com&#x2F;articles&#x2F;2018&#x2F;how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript&#x2F;&quot;&gt;Manejo de efectos secundarios&lt;&#x2F;a&gt; (inglés)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusión&lt;&#x2F;h2&gt;
&lt;p&gt;Lo único que queda por responser es &amp;quot;¿Qué beneficios tienen los functors?&amp;quot;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Este patrón nos permite enfocarnos en un problema a la vez. La función &lt;code&gt;map&lt;&#x2F;code&gt; se encarga de obtener los datos necesarios y en el &lt;code&gt;callback&lt;&#x2F;code&gt; nos podemos enfocar en cómo procesarlos.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Reutilización. Este estilo de programación promueve el uso y creación de funciones de generales que sólo se encargan de una tarea, en muchos casos estas pueden ser compartidas incluso entre proyectos.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Extensión a través de la composición. Hay gente que tiene sentimientos encontrados en este caso, especialmente si hablamos de aplicarlo a los arreglos. Pero lo que quiero decir es que los functors promueven el uso de cadenas de funciones para implementar un procedimiento.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fuentes&quot;&gt;Fuentes&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;techgirl1908&#x2F;why-is-map-called-map-2l03&quot;&gt;Why is map called map?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fantasyland&#x2F;fantasy-land&quot;&gt;Fantasy land&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fantasyland&#x2F;static-land&quot;&gt;Static land&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;thefrontside&#x2F;funcadelic.js&quot;&gt;funcadelic.js&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jrsinclair.com&#x2F;articles&#x2F;2018&#x2F;how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript&#x2F;&quot;&gt;How to deal with dirty side effects in your pure functional JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jrsinclair.com&#x2F;articles&#x2F;2020&#x2F;whats-more-fantastic-than-fantasy-land-static-land&#x2F;&quot;&gt;What’s more fantastic than fantasy land? An Introduction to Static land&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@lettier&#x2F;your-easy-guide-to-monads-applicatives-functors-862048d61610&quot;&gt;Your easy guide to Monads, Applicatives, &amp;amp; Functors&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Observables hechos en casa</title>
                <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
                <link>https://vonheikemen.github.io/devlog/es/web-development/homemade-observables/</link>
                <guid>https://vonheikemen.github.io/devlog/es/web-development/homemade-observables/</guid>
                <description>&lt;p&gt;En esta ocasión implementaremos nuestros propios observables. Al terminar espero que tengan un mejor entendimiento de cómo este patrón es usado en librerías como RxJS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;los-observables&quot;&gt;Los Observables&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;que-son&quot;&gt;¿Qué son?&lt;&#x2F;h3&gt;
&lt;p&gt;Empecemos con &lt;strong&gt;mi&lt;&#x2F;strong&gt; definición de observable.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Un Observable es una función que sigue una convención y es usada para conectar una fuente que emite datos a un consumidor.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;En nuestro caso la fuente puede ser cualquier cosa produzca valores. Y, un consumidor es el que recibe datos.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;datos-curiosos&quot;&gt;Datos curiosos&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;los-observables-no-hacen-nada-por-si-solos&quot;&gt;Los Observables no hacen nada por sí solos&lt;&#x2F;h4&gt;
&lt;p&gt;Quiero decir que estos no producen ningún efecto o comienzan a trabajar hasta que es absolutamente necesario. No hacen nada hasta que te suscribes a ellos.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;pueden-emitir-datos&quot;&gt;Pueden emitir datos&lt;&#x2F;h4&gt;
&lt;p&gt;Dependendiendo de la fuente, pueden recibir un número infinito de valores.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;pueden-ser-sincronos-o-asincronos&quot;&gt;Pueden ser síncronos o asíncronos&lt;&#x2F;h4&gt;
&lt;p&gt;Todo dependerá de su implementación. Se puede crear un observable que reciba valores de un evento que puede ocurrir en cualquier momento, también se pueden crear para procesar una colección de datos de manera síncrona.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;algunas-reglas&quot;&gt;Algunas reglas&lt;&#x2F;h3&gt;
&lt;p&gt;Ya mencioné que se debe seguir una convención. Bueno, ahora vamos a definir algunas reglas arbitrarias que nuestra implementación va a seguir. Estas son importantes porque crearemos un pequeño ecosistema con nuestros observables.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Deberán tener un método &lt;code&gt;subscribe&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Nuestro &amp;quot;constructor&amp;quot; de observables aceptará un parámetro, será el suscriptor (&lt;code&gt;subscriber&lt;&#x2F;code&gt;) el cual será una función.&lt;&#x2F;li&gt;
&lt;li&gt;El suscriptor aceptará un parámetro, este será un objeto que llamaremos &lt;code&gt;observer&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;El objeto &lt;code&gt;observer&lt;&#x2F;code&gt; puede implementar los siguientes métodos: &lt;code&gt;next&lt;&#x2F;code&gt;, &lt;code&gt;error&lt;&#x2F;code&gt; y &lt;code&gt;complete&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Empecemos.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;el-codigo&quot;&gt;El código&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;constructor&quot;&gt;Constructor&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;subscriber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscriber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
  };
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Se los juro, esto funciona
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Tal vez es menos mágico de lo que pensaron. Lo que vemos aquí es que el constructor &lt;strong&gt;Observable&lt;&#x2F;strong&gt; sólo es una forma de posponer el trabajo hasta que se ejecuta &lt;code&gt;subscribe&lt;&#x2F;code&gt;. La función &lt;code&gt;subscriber&lt;&#x2F;code&gt; es la que hace el trabajo pesado, eso es bueno porque podemos hacer lo que sea ahí, es lo que hace que nuestros observable sean útiles.&lt;&#x2F;p&gt;
&lt;p&gt;Hasta ahora no he explicado el rol de &lt;code&gt;observer&lt;&#x2F;code&gt; o &lt;code&gt;subscriber&lt;&#x2F;code&gt;. Es mejor explicarlo con un ejemplo.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;un-ejemplo&quot;&gt;Un ejemplo&lt;&#x2F;h2&gt;
&lt;p&gt;Digamos que queremos convertir un arreglo en un Observable. ¿Cómo lo hacemos?&lt;&#x2F;p&gt;
&lt;p&gt;Pensemos en lo que sabemos hasta ahora:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Podemos colocar la lógica dentro de la función &lt;code&gt;subscriber&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Podemos contar con que nuestro objeto &lt;code&gt;observer&lt;&#x2F;code&gt; tendrá uno de estos tres métodos &lt;code&gt;next&lt;&#x2F;code&gt;, &lt;code&gt;error&lt;&#x2F;code&gt; y &lt;code&gt;complete&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Podemos usar los métodos de &lt;code&gt;observer&lt;&#x2F;code&gt; como canales de cómunicación. La función &lt;code&gt;next&lt;&#x2F;code&gt; recibirá los valores que nos de la fuente. Utilizaremos &lt;code&gt;error&lt;&#x2F;code&gt; cuando algo salga mal, algo así como el método &lt;code&gt;catch&lt;&#x2F;code&gt; que tienen las promesas. Por último, utilizaremos &lt;code&gt;complete&lt;&#x2F;code&gt; cuando la fuente deje de producir valores.&lt;&#x2F;p&gt;
&lt;p&gt;La función para convertir un arreglo a observable puede ser así.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fromArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;complete&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    }
  });
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Así la usamos

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;arrayStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fromArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;arrayStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;({
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;complete&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Listo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;)
});

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Y ahora a ver qué pasa en la cónsola.
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;tengan-cuidado&quot;&gt;Tengan cuidado&lt;&#x2F;h3&gt;
&lt;p&gt;Justo ahora nuestros observables básicamente son como un pueblo sin ley, podemos hacer todo tipo de cosas indebidas como seguir enviando valores después de llamar el método &lt;code&gt;complete&lt;&#x2F;code&gt;. En un mundo ideal nuestros observables deberían darnos algunas garantías. &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Los métodos del objeto &lt;code&gt;observer&lt;&#x2F;code&gt; deberían ser opcionales.&lt;&#x2F;li&gt;
&lt;li&gt;Los métodos &lt;code&gt;complete&lt;&#x2F;code&gt; y &lt;code&gt;error&lt;&#x2F;code&gt; deberían llamar una función para dejar de observar, una función &lt;code&gt;unsubscribe&lt;&#x2F;code&gt; (si esta existe).&lt;&#x2F;li&gt;
&lt;li&gt;Si ejecutas &lt;code&gt;unsubscribe&lt;&#x2F;code&gt; yo no podrás ejecutar los demás métodos.&lt;&#x2F;li&gt;
&lt;li&gt;Si se ejecuta &lt;code&gt;complete&lt;&#x2F;code&gt; o &lt;code&gt;error&lt;&#x2F;code&gt; se dejarán de recibir valores.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;un-ejemplo-interactivo&quot;&gt;Un ejemplo interactivo&lt;&#x2F;h3&gt;
&lt;p&gt;Ya podemos empezar a hacer cosas interesantes con lo que tenemos hasta ahora. En este ejemplo hice una función que nos permite crear un observable de un evento. &lt;&#x2F;p&gt;
&lt;p 
  class=&quot;codepen&quot; 
  data-height=&quot;600&quot; 
  data-theme-id=&quot;dark&quot; 
  data-default-tab=&quot;js,result&quot; 
  data-user=&quot;VonHeikemen&quot; 
  data-slug-hash=&quot;wxNYPV&quot; 
  data-preview=&quot;true&quot; 
  style=&quot;height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; 
  data-pen-title=&quot;Observables - basics&quot;&gt;
  &lt;span&gt;
    See the Pen &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&#x2F;pen&#x2F;wxNYPV&quot;&gt;Observables - basics&lt;&#x2F;a&gt; by Heiker (&lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&quot;&gt;@VonHeikemen&lt;&#x2F;a&gt;) on &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&quot;&gt;CodePen&lt;&#x2F;a&gt;.
  &lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;script async src=&quot;https:&#x2F;&#x2F;static.codepen.io&#x2F;assets&#x2F;embed&#x2F;ei.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;composicion&quot;&gt;Composición&lt;&#x2F;h2&gt;
&lt;p&gt;Ahora que sabemos cómo crearlos veamos cómo podemos manipularlos para extender sus capacidades.&lt;&#x2F;p&gt;
&lt;p&gt;Esta vez lo que haremos será crear funciones complementarias y modificar nuestra implementación.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;todo-esta-en-los-operadores&quot;&gt;Todo está en los operadores&lt;&#x2F;h3&gt;
&lt;p&gt;Los operadores son funciones que nos permitirán agregar características a nuestros observables mediante una cadena de funciones. Cada una de estas funciones aceptará un observable como parámetro, lo convertirá en su fuente y devolverá un nuevo observable.&lt;&#x2F;p&gt;
&lt;p&gt;Sigamos con la temática del arreglo y hagamos un operador &lt;strong&gt;map&lt;&#x2F;strong&gt; que intente imitar el comportamiento del método nativo map que tienen los arreglos. Nuestro operador hará lo siguiente: tomará un valor, aplicará una función sobre ese valor y emitirá el resultado.&lt;&#x2F;p&gt;
&lt;p&gt;Hagamos el intento:&lt;&#x2F;p&gt;
&lt;p&gt;Primer paso, vamos a recibir la función y la fuente de datos, luego devolveremos un observable.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;transformFn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;source$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; continuará
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;});
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora viene lo interesante, la fuente que recibimos es un observable y eso significa que podemos suscribirnos para recibir valores.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; function map(transformFn, source$) {
   return Observable(function(observer) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;    return source$.subscribe(function(value) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;      &#x2F;&#x2F; continuará
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;    });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;   });
 }
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lo siguiente será pasar el resultado de la transformación a &lt;code&gt;observer&lt;&#x2F;code&gt; para que puedan &amp;quot;verlo&amp;quot; cuando se suscriban a este nuevo observable.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; function map(transformFn, source$) {
   return Observable(function(observer) {
     return source$.subscribe(function(value) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;      var newValue = transformFn(value);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;      observer.next(newValue);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;     });
   });
 }
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hay otra forma de hacer esto. Si usamos funciones de una expresión (Arrow functions como se les conoce por ahí) sería algo así.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;transformFn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;source$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;source$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;transformFn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
    ))
  );
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ya podemos empezar a usarlo pero justo ahora tendríamos que hacerlo de esta manera.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fromArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;complete&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
  });
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thisArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;plusOne   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;array$    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;plusOne&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fromArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thisArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;array$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Eso no es muy cómodo. Y si queremos seguir usando más funciones &lt;code&gt;map&lt;&#x2F;code&gt; tendríamos que &amp;quot;envolverlas&amp;quot;, no me parece bien. Nos ocuparemos de eso ahora.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;la-cadena&quot;&gt;La cadena&lt;&#x2F;h3&gt;
&lt;p&gt;Crearemos otro método que nos permitirá usar una cadena de operadores que extenderan un observable fuente. Esta función tomará una lista de funciones, cada función en la lista usará el observable retornado por la anterior.&lt;&#x2F;p&gt;
&lt;p&gt;Primero veamos como podría hacerse esto en una función aislada.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;aFunctionArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;initialSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;reducerFn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  };

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;finalResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;aFunctionArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;reducerFn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;initialSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;finalResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Aquí usamos &lt;code&gt;reduce&lt;&#x2F;code&gt; para recorrer el arreglo de funciones y por cada elemento se ejecuta &lt;code&gt;reducerFn&lt;&#x2F;code&gt;. Dentro de &lt;code&gt;reducerFn&lt;&#x2F;code&gt; en el primer recorrido &lt;code&gt;source&lt;&#x2F;code&gt; tendrá el valor de &lt;code&gt;initialSource&lt;&#x2F;code&gt; y en el resto &lt;code&gt;source&lt;&#x2F;code&gt; será lo que &lt;code&gt;reducerFn&lt;&#x2F;code&gt; retorne. &lt;code&gt;finalResult&lt;&#x2F;code&gt; simplemente es el último resultado de &lt;code&gt;reducerFn&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Con algunos ajustes a nuestro constructor podemos agregar esta función. También he reducido la implementación del método &lt;code&gt;pipe&lt;&#x2F;code&gt; con algo de ayuda.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Observable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;subscriber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscriber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;SafeObserver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    }
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;; 
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Aún tenemos que hacer una cosa para asegurarnos que los operadores sean compatibles con el método &lt;code&gt;pipe&lt;&#x2F;code&gt;. Justo ahora el operador &lt;code&gt;map&lt;&#x2F;code&gt; espera tanto &lt;code&gt;transformFn&lt;&#x2F;code&gt; como &lt;code&gt;source&lt;&#x2F;code&gt;, eso no funcionará cuando usemos &lt;code&gt;pipe&lt;&#x2F;code&gt;. Tendremos que dividirlo en dos funciones, una que reciba el parámetro inicial y otra que acepte la fuente. &lt;&#x2F;p&gt;
&lt;p&gt;Tenemos opciones.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Opción 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;transformFn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; En lugar de devolver el observable
  &#x2F;&#x2F; regresamos una función que espera `source`
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;source$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;source$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;transformFn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
    ))
  );
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Opción 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;transformFn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;source$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;source$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; en caso de no recibir `source` 
    &#x2F;&#x2F; devolvemos una función una que recuerde `transformFn` 
    &#x2F;&#x2F; y que espere `source`    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;placeholder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;transformFn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;observer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;source$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;transformFn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
    ))
  );
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Y ya finalmente podemos extender nuestros observables así.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thisArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;plusOne   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;timesTwo  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;array$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fromArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thisArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;plusOne&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;timesTwo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;number: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}`),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; y otros...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;array$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Estamos listos para crear más operadores.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;otro-ejercicio&quot;&gt;Otro ejercicio&lt;&#x2F;h2&gt;
&lt;p&gt;Digamos que tenemos una función que muestra la hora en la cónsola cada segundo, y se detiene después de cinco segundos (sólo porque sí).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;startTimer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;interval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;setInterval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;minutes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;padStart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;seconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;padStart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;timeString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;minutes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+ &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;seconds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;timeString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;timeString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=== &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;00:05&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;clearInterval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    }
  }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora bien, esa función no tiene nada de malo. Digo, hace su trabajo, es predecible y todo lo que necesitas saber está a plena vista. Pero recien aprendimos algo nuevo y queremos aplicarlo. Convertiremos esto en un observable.&lt;&#x2F;p&gt;
&lt;p&gt;Primero lo primero, vamos a extraer la lógica que maneja el formateo y el cálculo del tiempo.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;paddedNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;padStart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;readableTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;minutes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;seconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;paddedNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;minutes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) + &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;paddedNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;seconds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Veamos qué hacemos con el tiempo. &lt;code&gt;setInterval&lt;&#x2F;code&gt; es un buen candidato para convertirse una fuente, recibe un &amp;quot;callback&amp;quot; en el cual podemos producir valores y también tiene un mecanismo de &amp;quot;limpieza&amp;quot;. Es un buen observable.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;callback  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;++);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;_interval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;setInterval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;setUnsubscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;clearInterval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;_interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unsubscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  });
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Tenemos una forma reusable de crear y destruir un &lt;code&gt;interval&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Puede que hayan notado que le pasamos un número a &lt;code&gt;observer&lt;&#x2F;code&gt;, no lo llamamos &amp;quot;segundos&amp;quot; porque &lt;code&gt;delay&lt;&#x2F;code&gt; puede ser cualquier número. Aquí no estamos siguiendo el tiempo, estamos contando las veces que &lt;code&gt;callback&lt;&#x2F;code&gt; es ejecutado. ¿Por qué? Porque queremos que nuestros constructores sean genéricos. Siempre podremos modificar su comportamiento con operadores.&lt;&#x2F;p&gt;
&lt;p&gt;Así usamos nuestro nuevo constructor.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; fingiremos que las demás funciones están por aquí

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;time$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;plusOne&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;readableTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;unsubscribe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;time$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;timeString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;timeString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;timeString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=== &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;00:05&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unsubscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
  }
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Está mejor. Pero ese &lt;code&gt;if&lt;&#x2F;code&gt; me molesta. Como que no debería estar ahí. ¿Saben que podemos hacer? Crear otro operador, uno que cancele la suscripción después de que &lt;code&gt;interval&lt;&#x2F;code&gt; emita cinco valores.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;source$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Observable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; tendremos nuestro propio contador porque no confío
    &#x2F;&#x2F; en los valores que emiten otros observables
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;unsubscribeSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;source$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;++;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; pasamos cada valor a `observer`
      &#x2F;&#x2F; la función subscribe aún recibirá cada valor original
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
      
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; indicamos que el flujo a terminado y lo &amp;quot;destruimos&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;observer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;complete&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unsubscribeSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
      }
    });
  });
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ya tenemos un contador que se autodestruye. Finalmente.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; las otras funciones siguen ahí

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;time$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;plusOne&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;readableTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;time$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;({
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;timeString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;timeString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;complete&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Time&amp;#39;s up&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;)
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;patio-de-juegos&quot;&gt;Patio de juegos&lt;&#x2F;h2&gt;
&lt;p&gt;Hice un par de ejemplos en codepen para poder hacer experimentos con estas cosas. &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&#x2F;pen&#x2F;OwQYxG&quot;&gt;Este de aquí&lt;&#x2F;a&gt; contiene todos el código relacionado con &lt;code&gt;Observable&lt;&#x2F;code&gt; y algo más.&lt;&#x2F;p&gt;
&lt;p&gt;Y este de aquí es el del ejercicio.&lt;&#x2F;p&gt;
&lt;p 
  class=&quot;codepen&quot; 
  data-height=&quot;600&quot; 
  data-theme-id=&quot;dark&quot; 
  data-default-tab=&quot;js,result&quot; 
  data-user=&quot;VonHeikemen&quot; 
  data-slug-hash=&quot;VGZXZa&quot; 
  data-preview=&quot;true&quot; 
  style=&quot;height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; 
  data-pen-title=&quot;Observables - boring timer&quot;&gt;
  &lt;span&gt;
    See the Pen &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&#x2F;pen&#x2F;VGZXZa&quot;&gt;Observables - boring timer&lt;&#x2F;a&gt; by Heiker (&lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&quot;&gt;@VonHeikemen&lt;&#x2F;a&gt;) on &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&quot;&gt;CodePen&lt;&#x2F;a&gt;.
  &lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusión&lt;&#x2F;h2&gt;
&lt;p&gt;Los Observables nos permiten hacer muchas cosas y con un algo de creatividad puedes convertir lo que sea en un observable. En serio, una promesa (Promise), una petición AJAX, un evento en el DOM, un arreglo... otro observable. Todo lo que se pueden imaginar puede ser una fuente de datos que pueden envolver en un observable. También nos dan habilidad de ensamblar soluciones utilizando funciones genéricas y otras más específicas.&lt;&#x2F;p&gt;
&lt;p&gt;Aún así no son la solución perfecta para todo. Tendrán que decidir si la complejidad que traen vale la pena. Como en el ejemplo del intervalo, perdimos la simplicidad de &lt;code&gt;startTimer&lt;&#x2F;code&gt; por la &amp;quot;flexibilidad&amp;quot; de los observables.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fuentes&quot;&gt;Fuentes&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@benlesh&#x2F;learning-observable-by-building-observable-d5da57405d87&quot;&gt;Learning Observable By Building Observable&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@kevinkreuzer&#x2F;observables-just-powerful-functions-a033c355b22c&quot;&gt;Observables, just powerful functions?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;netbasal.com&#x2F;whos-afraid-of-observables-bde0dc4f48cc&quot;&gt;Who’s Afraid of Observables?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;netbasal.com&#x2F;understanding-mergemap-and-switchmap-in-rxjs-13cf9c57c885&quot;&gt;Understanding mergeMap and switchMap in RxJS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;netbasal.com&#x2F;javascript-observables-under-the-hood-2423f760584&quot;&gt;JavaScript — Observables Under The Hood&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zenparsing&#x2F;zen-observable&quot;&gt;Github repository - zen-observable&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;supermanitu&#x2F;understanding-observables&quot;&gt;Understanding Observables&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Un vistazo a las máquinas de estados finitos</title>
                <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
                <link>https://vonheikemen.github.io/devlog/es/web-development/taking-a-look-at-finite-state-machine/</link>
                <guid>https://vonheikemen.github.io/devlog/es/web-development/taking-a-look-at-finite-state-machine/</guid>
                <description>&lt;h2 id=&quot;maquinas-de-que-quien&quot;&gt;¿Máquinas de qué-- quién?&lt;&#x2F;h2&gt;
&lt;p&gt;Las máquinas de estados finitos son una manera de modelar el comportamiento de un sistema. La idea es que tu &amp;quot;sistema&amp;quot; sólo puede encontrarse en un estado a la vez, y una entrada (evento) puede activar la transición a otro estado.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;que-tipo-de-problemas-resuelven&quot;&gt;¿Qué tipo de problemas resuelven?&lt;&#x2F;h2&gt;
&lt;p&gt;Estados inválidos. ¿Cuántas veces han tenido que usar una variable con un booleano o un atributo como &amp;quot;disabled&amp;quot; para evitar que un usuario haga algo indebido? Al marcar las reglas de comportamiento por adelantado podemos evitar este tipo de cosas.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;como-se-hace-eso-en-javascript&quot;&gt;¿Cómo se hace eso en javascript?&lt;&#x2F;h2&gt;
&lt;p&gt;Me alegra que preguntaran. La verdadera razón por la escribo esto es para mostrar una librería que vi el otro día. Vamos a usar &lt;a href=&quot;https:&#x2F;&#x2F;thisrobot.life&#x2F;&quot;&gt;robot3&lt;&#x2F;a&gt; para crear un máquina de frases semi-famosas.&lt;&#x2F;p&gt;
&lt;p&gt;Lo que haremos será mostrar una &amp;quot;carta&amp;quot; con una frase y debajo de tendremos un botón que podremos usar para mostrar otra frase.&lt;&#x2F;p&gt;
&lt;p&gt;Haremos esto un paso a la vez. Primero preparemos los posibles estados de la aplicación.&lt;&#x2F;p&gt;
&lt;p&gt;Nuestra carta estará en estado &lt;code&gt;idle&lt;&#x2F;code&gt; (algo así como &#x27;esperando&#x27;) o &lt;code&gt;loading&lt;&#x2F;code&gt; (cargando) Crearemos nuestra máquina a partir de eso.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;createMachine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;interpret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;https:&#x2F;&#x2F;unpkg.com&#x2F;robot3@0.2.9&#x2F;machine.js&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;mr_robot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;createMachine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;({
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;idle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;loading&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Aquí cada &lt;code&gt;estado&lt;&#x2F;code&gt; es un índice del &amp;quot;objeto de configuración&amp;quot; que le pasamos a &lt;code&gt;createMachine&lt;&#x2F;code&gt;, vean que cada uno de estos índices deben ser el resultado de llamar la función &lt;code&gt;state&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ahora necesitamos transiciones. El estado &lt;code&gt;idle&lt;&#x2F;code&gt; cambiará a estado &lt;code&gt;loading&lt;&#x2F;code&gt; si ocurre un evento &lt;code&gt;fetch&lt;&#x2F;code&gt; (buscar), &lt;code&gt;loading&lt;&#x2F;code&gt; volverá a &lt;code&gt;idle&lt;&#x2F;code&gt; cuando el evento &lt;code&gt;done&lt;&#x2F;code&gt; (terminado) sea despachado.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; import {
  createMachine,
  state,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt; transition,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;  interpret
 } from &amp;#39;https:&#x2F;&#x2F;unpkg.com&#x2F;robot3@0.2.9&#x2F;machine.js&amp;#39;;

const mr_robot = createMachine({
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  idle: state(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  loading: state()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  loading: state(transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; });
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;transition&lt;&#x2F;code&gt; es lo que conecta los estados. El primer parámetro que recibe es el nombre del evento que lo activará, el segundo parámetro es el &amp;quot;evento destino&amp;quot; al cual cambiará. El resto de los parámetros consiste en una de funciones que serán ejecutadas cuando ocurra la transición.&lt;&#x2F;p&gt;
&lt;p&gt;Luce bien y todo pero... uhm... ¿cómo hacemos pruebas? Por sí sola la máquina no hace nada. Necesitamos que nuestra máquina sea interpretada y para ello se la pasamos a la función &lt;code&gt;interpret&lt;&#x2F;code&gt;, esta función nos devuelve un &amp;quot;servicio&amp;quot; con el cual podemos despachar eventos. Para asegurarnos que de verdad estamos haciendo algo vamos a usar el segundo parámetro de &lt;code&gt;interpret&lt;&#x2F;code&gt; el cual será una función que &amp;quot;escuchará&amp;quot; los cambios de estado.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= ({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;machine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;machine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;send &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;interpret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;mr_robot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora veamos si está viva.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#6699cc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Deberían ver en la cónsola
&#x2F;&#x2F; loading (3)
&#x2F;&#x2F; idle
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Despachar &lt;code&gt;fetch&lt;&#x2F;code&gt; hace que el estado actual se convierta en &lt;code&gt;loading&lt;&#x2F;code&gt; y despachar&lt;code&gt;done&lt;&#x2F;code&gt; lo regresa a &lt;code&gt;idle&lt;&#x2F;code&gt;. Veo que no están impresionados. Bien. Intentemos algo más. Agregemos otro estado &lt;code&gt;end&lt;&#x2F;code&gt; y hagamos que &lt;code&gt;loading&lt;&#x2F;code&gt; cambie a ese, luego despachamos &lt;code&gt;done&lt;&#x2F;code&gt; y vemos qué pasa.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; const mr_robot = createMachine({
   idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;   loading: state(transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;   loading: state(transition(&amp;#39;done&amp;#39;, &amp;#39;end&amp;#39;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;   end: state()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; });
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#6699cc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Deberían ver en la cónsola
&#x2F;&#x2F; idle
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Enviar &lt;code&gt;done&lt;&#x2F;code&gt; mientras el estado es &lt;code&gt;idle&lt;&#x2F;code&gt; no activa el estado &lt;code&gt;loading&lt;&#x2F;code&gt;, se queda en &lt;code&gt;idle&lt;&#x2F;code&gt; porque ese estado no tiene un evento &lt;code&gt;done&lt;&#x2F;code&gt;. Y ahora...&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; El curso normal de eventos.

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Deberían ver en la cónsola
&#x2F;&#x2F; loading
&#x2F;&#x2F; end

&#x2F;&#x2F; Intenten con `fetch`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Ahora...
&#x2F;&#x2F; end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Si enviamos &lt;code&gt;fetch&lt;&#x2F;code&gt; (o cualquier otro evento) mientras el estado es &lt;code&gt;end&lt;&#x2F;code&gt; resultará en &lt;code&gt;end&lt;&#x2F;code&gt; siempre. ¿Por qué? Porque no hay a dónde ir, &lt;code&gt;end&lt;&#x2F;code&gt; no tiene transiciones.&lt;&#x2F;p&gt;
&lt;p&gt;Espero que les haya sido útil, si no fue así me disculpo por tanto &lt;code&gt;console.log&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Volvamos a nuestra máquina. Esto es lo que tenemos hasta ahora.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;createMachine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;transition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;interpret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;https:&#x2F;&#x2F;unpkg.com&#x2F;robot3@0.2.9&#x2F;machine.js&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;mr_robot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;createMachine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;({
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;idle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;transition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;loading&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;)),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;loading&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;transition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;idle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;))
});

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= ({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;machine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;machine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;send &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;interpret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;mr_robot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pero aún no es suficiente, ahora debemos extraer datos de alguna parte cuando el estado sea &lt;code&gt;loading&lt;&#x2F;code&gt;. Vamos a fingir que buscamos los datos en nuestra función.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get_quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; crea un retraso de 3 a 5 segundos.
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;delay &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;random_number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;setTimeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;&amp;lt;quote&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
  });
  
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; nomás pa&amp;#39; ver
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Para integrar esta función a nuestra máquina vamos a usar la función &lt;code&gt;invoke&lt;&#x2F;code&gt;, esta nos ayuda a manejar &amp;quot;funciones asíncronas&amp;quot; (una función que devuelve una promesa) cuando se active el estado, luego cuando la promesa se resuelve envía el evento &lt;code&gt;done&lt;&#x2F;code&gt; (si algo falla envía el evento &lt;code&gt;error&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt;  import {
   createMachine,
   state,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  invoke,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;   transition,
   interpret
 } from &amp;#39;https:&#x2F;&#x2F;unpkg.com&#x2F;robot3@0.2.9&#x2F;machine.js&amp;#39;;

 const mr_robot = createMachine({
   idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  loading: state(transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  loading: invoke(get_quote, transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; });
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Si prueban &lt;code&gt;send(&#x27;fetch&#x27;)&lt;&#x2F;code&gt; deberían ver en la cónsola.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt;loading

&#x2F;&#x2F; Esperen unos segundos...

&amp;lt;quote&amp;gt;
idle
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Espero que estas alturas se estén preguntando ¿Y dónde guardamos los datos? &lt;code&gt;createMachine&lt;&#x2F;code&gt; nos deja definir un &amp;quot;contexto&amp;quot; que estará disponible para nosotros en las función que apliquemos en las transiciones.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;ev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;({
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: {},
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt;  const mr_robot = createMachine({
    idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
    loading: invoke(get_quote, transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt; });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt; }, context);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora agregaremos una función a nuestra transición &lt;code&gt;loading&lt;&#x2F;code&gt;. Será el lugar donde modificaremos el context. Esta función es llamada &lt;code&gt;reduce&lt;&#x2F;code&gt; y luce así.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#6699cc;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;({ ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Recibe el context actual, una carga (aquí la llamamos &lt;code&gt;ev&lt;&#x2F;code&gt;) y lo que sea que devuelva se convertirá en tu nuevo contexto. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt;  import {
   createMachine,
   state,
   invoke,
   transition,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  reduce,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;   interpret
 } from &amp;#39;https:&#x2F;&#x2F;unpkg.com&#x2F;robot3@0.2.9&#x2F;machine.js&amp;#39;;

 const mr_robot = createMachine({
   idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  loading: invoke(get_quote, transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;)), 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  loading: invoke(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;    get_quote, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;    transition(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;      &amp;#39;done&amp;#39;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;      &amp;#39;idle&amp;#39;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;      reduce((ctx, ev) =&amp;gt; ({ ...ctx, data: ev.data }))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  ),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; }, context);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hora de probar. ¿Cómo lo hacemos? Modificamos el callback de &lt;code&gt;interpret&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= ({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;machine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;JSON&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;({ 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;machine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;context
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}));
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Deberían ver esto.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt;{&amp;#39;state&amp;#39;:&amp;#39;loading&amp;#39;,&amp;#39;context&amp;#39;:{&amp;#39;data&amp;#39;:{}}}

&#x2F;&#x2F; esperen unos segundos...

{&amp;#39;state&amp;#39;:&amp;#39;idle&amp;#39;,&amp;#39;context&amp;#39;:{&amp;#39;data&amp;#39;:&amp;#39;&amp;lt;quote&amp;gt;&amp;#39;}}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Estamos listos. Mostremos algo en el navegador.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;card&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;
  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;section &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;card&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;card__content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;
     &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;card__body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;
        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;card__quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
          quote
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;

        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;card__author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
          -- author
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;
      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;
      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;card__footer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;
        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;load_btn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;btn btn--new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
          More
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;
        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;_blank&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;btn btn--tweet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
          Tweet
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;
      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; 
  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; 
&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#eb606b;&quot;&gt;body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;flex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;justify-content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;align-items&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;min-height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;95vh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;background&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: #ddd;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;font-size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1em&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: #212121;
}

.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;card &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;600px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;background&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;white&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;box-shadow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0 2px 5px 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;rgba&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0 2px 10px 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;rgba&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}

.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;card__content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: #212121;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}

.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;card__content--loader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;95px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;flex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;align-items&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;justify-content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;center
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;card__body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;padding-bottom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;15px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}

.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;card__author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;padding-top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;font-style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;italic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}

.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;card__footer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;flex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;justify-content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;space-between&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}

.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;btn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: #fff;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;pointer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;margin-top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;margin-left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;border-radius&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.4rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;text-decoration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;inline-block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;.3rem .9rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}

.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;btn--new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;background-color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: #2093be;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;border&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.1rem solid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#2093be;
  
}

.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;btn--tweet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;background-color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: #0074d9;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;border&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.1rem solid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#0074d9;
}

.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;btn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;hover &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;background&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: #3cb0fd;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;border&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.1rem solid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#3cb0fd;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;text-decoration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}

.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;hide &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;La última pieza del rompecabezas, los efectos secundarios. Necesitamos agregar otra función a la transición &lt;code&gt;loading&lt;&#x2F;code&gt; para poder actualizar el DOM. Podríamos usar &lt;code&gt;reduce&lt;&#x2F;code&gt; nuevamente pero es de mala educación hacer eso en algo que se llame &lt;code&gt;reduce&lt;&#x2F;code&gt;. Utilizaremos otra función, una llamada &lt;code&gt;action&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Pero primero debemos preprarnos. Modificaremos el contexto con las dependencias necesarias. (Este paso es innecesario, esto es sólo por mi alergia a las variables globales)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; const context = ev =&amp;gt; ({
   data: {},
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  dom: {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;    quote: document.querySelector(&amp;#39;.card__quote&amp;#39;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;    author: document.querySelector(&amp;#39;.card__author&amp;#39;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;    load_btn: window.load_btn,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;    tweet_btn: document.querySelector(&amp;#39;.btn--tweet&amp;#39;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;    card: window.card
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; });
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora sí, efectos secundarios. En este punto deberían asegurarse que &lt;code&gt;get_quote&lt;&#x2F;code&gt; devuelva un objeto con las propiedades &lt;code&gt;quote&lt;&#x2F;code&gt; y &lt;code&gt;author&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;update_card&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;load_btn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;textContent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;More&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;textContent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;textContent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;web_intent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;intent&#x2F;tweet?text=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;tweet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= `${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt; -- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}`;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;tweet_btn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;setAttribute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(
    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;web_intent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;encodeURIComponent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;tweet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
  );
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;show_loading&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;dom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;load_btn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;textContent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Loading...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Juntamos todo.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt;  import {
   createMachine,
   state,
   invoke,
   transition,
   reduce,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  action,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;   interpret
 } from &amp;#39;https:&#x2F;&#x2F;unpkg.com&#x2F;robot3@0.2.9&#x2F;machine.js&amp;#39;;

 const mr_robot = createMachine({
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;, action(show_loading))),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;   loading: invoke(
     get_quote, 
     transition(
       &amp;#39;done&amp;#39;,
       &amp;#39;idle&amp;#39;,
       reduce((ctx, ev) =&amp;gt; ({ ...ctx, data: ev.data })),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;      action(update_card)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;     )
   ),
 }, context);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Funciona. Pero se ve mal cuando carga por primera vez. Hagamos otra transición de carga, una que esconda la carta mientras se carga la primera frase.&lt;&#x2F;p&gt;
&lt;p&gt;Empecemos por el HTML.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; &amp;lt;main id=&amp;quot;app&amp;quot; class=&amp;quot;card&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  &amp;lt;section class=&amp;quot;card__content card__content--loader&amp;quot;&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;    &amp;lt;p&amp;gt;Loading&amp;lt;&#x2F;p&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  &amp;lt;&#x2F;section&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  &amp;lt;section id=&amp;quot;card&amp;quot; class=&amp;quot;card__content&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  &amp;lt;section id=&amp;quot;card&amp;quot; class=&amp;quot;hide card__content&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;     &amp;lt;div class=&amp;quot;card__body&amp;quot;&amp;gt;
       &amp;lt;div class=&amp;quot;card__quote&amp;quot;&amp;gt;
         quote
       &amp;lt;&#x2F;div&amp;gt;

       &amp;lt;div class=&amp;quot;card__author&amp;quot;&amp;gt;
          -- author
       &amp;lt;&#x2F;div&amp;gt;
     &amp;lt;&#x2F;div&amp;gt;
     &amp;lt;div class=&amp;quot;card__footer&amp;quot;&amp;gt;
       &amp;lt;button id=&amp;quot;load_btn&amp;quot; class=&amp;quot;btn btn--new&amp;quot;&amp;gt;
         More
       &amp;lt;&#x2F;button&amp;gt;
       &amp;lt;a href=&amp;quot;#&amp;quot; target=&amp;quot;_blank&amp;quot; class=&amp;quot;btn btn--tweet&amp;quot;&amp;gt;
         Tweet
       &amp;lt;&#x2F;a&amp;gt;
     &amp;lt;&#x2F;div&amp;gt; 
   &amp;lt;&#x2F;section&amp;gt; 
 &amp;lt;&#x2F;main&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Creamos otro estado, &lt;code&gt;empty&lt;&#x2F;code&gt;. Podemos reusar la lógica del estado &lt;code&gt;loading&lt;&#x2F;code&gt; para esto. Creamos una función que crea transiciones.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load_quote &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= (...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;get_quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;transition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(
      &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;,
      &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;idle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;({ ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;})),
      ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;args
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;transition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;idle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;)
  );
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; const mr_robot = createMachine({
   idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;, action(show_loading))),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  loading: invoke(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;    get_quote, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;    transition(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;      &amp;#39;done&amp;#39;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;      &amp;#39;idle&amp;#39;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;      reduce((ctx, ev) =&amp;gt; ({ ...ctx, data: ev.data })),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;      action(update_card)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  ),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  loading: load_quote(action(update_card))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; }, context);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora la usamos para esconder el esqueleto de la carta en la primera carga y muestre la frase cuando esté lista.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; const context = ev =&amp;gt; ({
   data: {},
   dom: {
     quote: document.querySelector(&amp;#39;.card__quote&amp;#39;),
     author: document.querySelector(&amp;#39;.card__author&amp;#39;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;    loader: document.querySelector(&amp;#39;.card__content--loader&amp;#39;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;     load_btn: window.load_btn,
     tweet_btn: document.querySelector(&amp;#39;.btn--tweet&amp;#39;),
     card: window.card
   }
 });
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;hide_loader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;dom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;loader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;classList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;hide&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;card&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;classList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;hide&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; const mr_robot = createMachine({
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  empty: load_quote(action(update_card), action(hide_loader)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;   idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;, action(show_loading))),
   loading: load_quote(action(update_card))
 }, context);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-
-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt; const handler = ({ machine, context }) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  console.log(JSON.stringify({ 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;    state: machine.current,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;    context
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  }));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt; const handler = () =&amp;gt; {};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
 const { send } = interpret(mr_robot, handler);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+
+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt; const fetch_quote = () =&amp;gt; send(&amp;#39;fetch&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+
+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt; window.load_btn.addEventListener(&amp;#39;click&amp;#39;, fetch_quote);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Veamos cómo quedó.&lt;&#x2F;p&gt;
&lt;p 
  class=&quot;codepen&quot; 
  data-height=&quot;600&quot; 
  data-theme-id=&quot;dark&quot; 
  data-default-tab=&quot;js,result&quot; 
  data-user=&quot;VonHeikemen&quot; 
  data-slug-hash=&quot;OJJvQzR&quot; 
  data-preview=&quot;true&quot; 
  style=&quot;height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; 
  data-pen-title=&quot;Finite Random Quote Machine&quot;&gt;
  &lt;span&gt;
    See the Pen &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&#x2F;pen&#x2F;OJJvQzR&quot;&gt;Finite Random Quote Machine&lt;&#x2F;a&gt; by Heiker (&lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&quot;&gt;@VonHeikemen&lt;&#x2F;a&gt;) on &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&quot;&gt;CodePen&lt;&#x2F;a&gt;.
  &lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;script async src=&quot;https:&#x2F;&#x2F;static.codepen.io&#x2F;assets&#x2F;embed&#x2F;ei.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;entonces-esto-de-la-maquina-de-estados-finitos-fue-util&quot;&gt;¿Entonces esto de la máquina de estados finitos fue útil?&lt;&#x2F;h2&gt;
&lt;p&gt;Eso espero. ¿Notaron que nos permitió hacer un montón de pruebas y planear el comportamiento incluso antes de crear el HTML? Me parece que eso es genial.&lt;&#x2F;p&gt;
&lt;p&gt;¿Intentaron darle click al botón &#x27;loading&#x27; mientras cargaba? ¿Causó llamadas repetidas a &lt;code&gt;get_quote&lt;&#x2F;code&gt;? Eso es porque hicimos que fuera (casi) imposible que el evento &lt;code&gt;fetch&lt;&#x2F;code&gt; ocurriera durante &lt;code&gt;loading&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;No sólo eso, el comportamiento de la máquina y sus efectos en el mundo exterior están separados. Esto puede ser bueno o malo para ustedes pero eso depende de su tendencia filosófica.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;quieren-saber-mas&quot;&gt;¿Quieren saber más?&lt;&#x2F;h2&gt;
&lt;p&gt;(me perdonan que todo estos sean en inglés.)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;xstate.js.org&#x2F;docs&#x2F;about&#x2F;concepts.html&quot;&gt;XState (concepts)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thisrobot.life&#x2F;&quot;&gt;robot3 - docs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.freecodecamp.org&#x2F;news&#x2F;state-machines-basics-of-computer-science-d42855debc66&#x2F;&quot;&gt;Understanding State Machines&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Un poco del paradigma funcional en tu javascript: Usando un Maybe</title>
                <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
                <link>https://vonheikemen.github.io/devlog/es/web-development/functional-programming-for-your-everyday-javascript-using-a-maybe/</link>
                <guid>https://vonheikemen.github.io/devlog/es/web-development/functional-programming-for-your-everyday-javascript-using-a-maybe/</guid>
                <description>&lt;p&gt;¿Alguna vez han escuchado de las estructuras llamadas &amp;quot;monads&amp;quot; y lo geniales que son? Tal vez sí, pero aún no las entienden completamente. Bueno... aquí no intentaré definirlas y tampoco les diré si son geniales o no, lo que haré es mostrarles un ejemplo de cómo sería si las usaran en sus javascripts (específicamente el monad &lt;code&gt;Maybe&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Haremos algo gracioso, resolveremos un problema trivial usando métodos innecesariamente complicados.&lt;&#x2F;p&gt;
&lt;p&gt;Supongamos que tenemos un diccionario guardado en un archivo .json o en un objeto plano en nuestro script.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;accident&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;An unexpected, unfortunate mishap, failure or loss with the potential for harming human life, property or the environment.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;An event that happens suddenly or by chance without an apparent cause.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;], 
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;accumulator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;A rechargeable device for storing electrical energy in the form of chemical energy, consisting of one or more separate secondary cells.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;n(Source: CED)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;],
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;acid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;A compound capable of transferring a hydrogen ion in solution.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Being harsh or corrosive in tone.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Having an acid, sharp or tangy taste.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;A powerful hallucinogenic drug manufactured from lysergic acid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Having a pH less than 7, or being sour, or having the strength to neutralize  alkalis, or turning a litmus paper red.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;],
    
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; ... más palabras y significados
    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Paris&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;The capital and largest city of France.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;]
  }
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Queremos crear un formulario que le permita a un usuario buscar uno de estos términos y luego muestre su signicado. Parece simple ¿Qué podría salir mal?&lt;&#x2F;p&gt;
&lt;p&gt;Y porque todo el mundo adora HTML empezaremos por ahí.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;search_form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;
  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;search_input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Search a word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;
  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;search_input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;
  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;submit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Submit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;
&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;

&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bb80b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb606b;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;En nuestro primer intento sólo intentaremos obtener uno de esos valores basado en la consulta del usuario.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; main.js

&#x2F;&#x2F; haz magia y tráeme los datos
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;entries &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;&amp;lt;br&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;search_form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;submit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;preventDefault&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;];
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;innerHTML &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;entries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]);
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Naturalmente lo primero que haremos es probar con acid. Ahora contemplen los resultados.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A compound capable of transferring a hydrogen ion in solution.
Being harsh or corrosive in tone.
Having an acid, sharp or tangy taste.
A powerful hallucinogenic drug manufactured from lysergic acid.
Having a pH less than 7, or being sour, or having the strength to neutralize alkalis, or turning a litmus paper red.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ahora buscaremos &amp;quot;paris&amp;quot;, estoy seguro que está ahí. ¿Qué obtuvimos? Nada. No exactamente, tenemos.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;TypeError: results is undefined&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Pero tambíen tenemos un botón impredecible que se congela en ocasiones. ¿Pero qué queremos? ¿Qué queremos en realidad? Seguridad, objetos que no hagan estallar nuestra aplicación, queremos objetos confiables.&lt;&#x2F;p&gt;
&lt;p&gt;Entonces lo que haremos será implementar una especie de contenedor que nos permita describir el flujo de ejecución sin tener que preocuparnos por el valor que este contenga. ¿Suena bien, no? Déjenme mostrarles lo que quiero decir con un poco de javascript. Intenten esto.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;is_even &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;odd_arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_even&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;empty_arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= [].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_even&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;());

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;odd_arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;empty_arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¿Generó un error el arreglo vacío? (si lo hizo díganme). ¿No es genial? ¿No se siente bien saber que los métodos del arreglo harán lo correcto incluso si no tienen nada con qué trabajar? Eso es lo que queremos.&lt;&#x2F;p&gt;
&lt;p&gt;Tal vez se estén preguntando ¿No puedo simplemente poner un &lt;code&gt;if&lt;&#x2F;code&gt; y ya? Bueno... sí, ¿pero eso qué tiene de divertido? Todos saben que hacer una cadena de funciones se ve genial, y somos fánaticos de la &amp;quot;programación funcional,&amp;quot; así que haremos lo que los conocedores de ese paradigma harían: &lt;strong&gt;esconderemos todo dentro de una función&lt;&#x2F;strong&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Entonces lo que haremos será esconder un par de &lt;code&gt;if&lt;&#x2F;code&gt;, si el valor que debemos evaluar es indefinido devolveremos un contenedor que sabrá qué hacer sin importar lo que pase.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; maybe.js

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;the_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;the_thing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;null 
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;the_thing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;undefined 
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;the_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_nothing
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; No queremos estructuras anidadas.
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;the_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;the_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;the_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}

&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pero estos contenedores no serán los típicos &lt;code&gt;Maybe&lt;&#x2F;code&gt; que se ven en un lenguaje propio del paradigma funcional. Nosotros haremos trampa en el nombre de la conveniencia y los efectos secundarios. Sus métodos estaran inspirados por el tipo de dato &lt;code&gt;Option&lt;&#x2F;code&gt; que tiene Rust. Aquí es donde está la magia.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; maybe.js

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;or_else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;tap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;predicate_fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; 
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;predicate_fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) 
        ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) 
        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),
    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;inspect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Just(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;`,
  };
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;or_else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;tap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;inspect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;`,
  };
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¿Qué hacen estos métodos?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;&#x2F;code&gt;: Aplica la función &lt;code&gt;fun&lt;&#x2F;code&gt; a &lt;code&gt;the_thing&lt;&#x2F;code&gt; y vuelve a colocarlo en un &lt;code&gt;Maybe&lt;&#x2F;code&gt; para mantener la forma del objeto, esto para que podamos encadenar más funciones.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;and_then&lt;&#x2F;code&gt;: Este sólo está ahí para los casos de emergencia. Aplica la función &lt;code&gt;fun&lt;&#x2F;code&gt; y que el destino decida el resto.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;or_else&lt;&#x2F;code&gt;: Este sería el complemento &lt;code&gt;else&lt;&#x2F;code&gt; para nuestro &lt;code&gt;map&lt;&#x2F;code&gt; y &lt;code&gt;and_then&lt;&#x2F;code&gt;. Es el otro camino. El &amp;quot;¿qué pasa si no hay nada ahí?&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tap&lt;&#x2F;code&gt;: Está ahí para cuando necesitemos una función que afecta algo que está fuera de su ámbito (o tal vez es sólo para colocar un &lt;code&gt;console.log&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;&#x2F;code&gt;: Si la función que proporcionas devuelve &lt;code&gt;true&lt;&#x2F;code&gt; o algo parecido entonces &amp;quot;te dejará pasar.&amp;quot; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;unwrap_or&lt;&#x2F;code&gt;: Este es el que saca el valor del contenedor. Usarán esto cuando se cansen de encadenar funciones y estén listos para volver al mundo imperativo.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Volvamos a nuestro formulario para aplicar todo esto. Crearemos una función &lt;code&gt;search&lt;&#x2F;code&gt; que puede o no devolvernos un resultado a la consulta del usuario. Si lo hace encadenamos otras funciones que se ejecutarán en un &amp;quot;contexto seguro.&amp;quot;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; main.js

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;search &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;search_word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;entries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;word not found&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora reemplazamos la antigua función.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; window.search_form.addEventListener(&amp;#39;submit&amp;#39;, function(ev) {
   ev.preventDefault();
   let input = ev.target[0];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  window.result.innerHTML = format(entries[input.value]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  window.result.innerHTML = search_word(input.value);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; });
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Probemos. Buscaremos &amp;quot;accident.&amp;quot;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;An unexpected, unfortunate mishap, failure or loss with the potential for harming human life, property or the environment.
An event that happens suddenly or by chance without an apparent cause.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ahora Paris. Busquemos &amp;quot;paris.&amp;quot;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;word not found&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;No congeló el botón, eso es bueno. Pero yo sé que Paris está ahí. Si revisan verán que está &amp;quot;Paris.&amp;quot; Sólo tendremos que colocar en mayúscula la primera letra para que el usuario no tenga que hacerlo. Primero intentaremos buscar la palabra exacta y luego intentamos del otro modo.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; main.js

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;create_search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;exact&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;exact &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;capitalize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]);
  }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;capitalize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;charAt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;toUpperCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Modificamos la función &lt;code&gt;search&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt; const search = (data, input) =&amp;gt; Maybe(data[input]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt; const search = create_search(entries, true);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt; const search_name = create_search(entries, false);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-
-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt; const search_word = word =&amp;gt; search(entries, word)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt; const search_word = word =&amp;gt; search(word)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;   .or_else(() =&amp;gt; search_name(word))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    .map(format)
    .unwrap_or(&amp;#39;word not found&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Bien. Esto es lo que tenemos hasta ahora en &lt;code&gt;main.js&lt;&#x2F;code&gt; si quieren ver todo el panorama.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; main.js

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;entries &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;create_search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;exact&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;exact &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;capitalize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]);
  }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;capitalize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;charAt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;toUpperCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;&amp;lt;br&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;search &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;create_search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;entries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;search_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;create_search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;entries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;search_word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;or_else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;search_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;))
  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;word not found&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;search_form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;submit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;preventDefault&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;];
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;innerHTML &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;search_word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¿Pero es todo lo que queremos? No, claro que no, también queremos encontrar el amor, pero ya que javascript no puede hacer eso, nos conformaremos con agregar una funcionalidad de &amp;quot;sugerencia.&amp;quot; Quiero que cuando escriba &amp;quot;accu&amp;quot; y presione el botón, que salga un dialogo que me diga &amp;quot;Did you mean accumulator?&amp;quot; (en inglés porque no me pagan lo suficiente para traducir los mensajes del sistema) &lt;&#x2F;p&gt;
&lt;p&gt;Para esto necesitaremos ayuda, instalaremos una dependencia, una que encuentre resultados similares: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wouter2203&#x2F;fuzzy-search#readme&quot;&gt;fuzzy-search&lt;&#x2F;a&gt;. Agreguemos lo siguiente.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; main.js

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;FuzzySearch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;https:&#x2F;&#x2F;unpkg.com&#x2F;fuzzy-search@3.0.1&#x2F;src&#x2F;FuzzySearch.js&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;#39;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fzf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;FuzzySearch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;entries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
  [],
  {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;caseSensitive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pero volvemos a la misma situación, esta no sería una operación segura porque en el momento que intentemos sacar un resultado de un arreglo vacío todo se cae. ¿Entonces qué hacemos? Escondemos todo debajo de una función.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; main.js

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;suggest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;matches &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fzf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;matches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;FuzzySearch está listo, ahora agregaremos un grandioso dialogo de confirmación.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; main.js

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;confirm_word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;confirm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Did you mean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}`)) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
  }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Combinemos las nuevas funciones con &lt;code&gt;search&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; main.js

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;suggest_word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;suggest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;confirm_word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)
  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Agregamos la nueva funcionalidad a &lt;code&gt;search_word&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; const search_word = word =&amp;gt; search(word)
   .or_else(() =&amp;gt; search_name(word))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  .or_else(suggest_word(word))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;   .map(format)
   .unwrap_or(&amp;#39;word not found&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Funciona. Pero ahora digamos que somos alérgicos a los &lt;code&gt;if&lt;&#x2F;code&gt;, sin mencionar que es de mala educación devolver &lt;code&gt;undefined&lt;&#x2F;code&gt; de una función. Podemos ser mejores.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; function confirm_word(value) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  if(value &amp;amp;&amp;amp; confirm(`Did you mean ${value}`)) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;    return value;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  return confirm(`Did you mean ${value}`);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; const suggest_word = value =&amp;gt; () =&amp;gt; suggest(value)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  .map(confirm_word)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  .filter(confirm_word)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;   .map(search);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Algo me molesta. Cuando busco &amp;quot;accu,&amp;quot; el dialogo aparece, confirmo la sugerencia y el resultado aparece. Pero &amp;quot;accu&amp;quot; sigue ahí en el formulario, es incómodo. Haremos el formulario se actualice con la palabra correcta.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;update_input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;search_form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; const suggest_word = value =&amp;gt; () =&amp;gt; suggest(value)
   .filter(confirm_word)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  .tap(update_input)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;   .map(search);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;¿Quieren verlo en acción? Aquí tienen.&lt;&#x2F;p&gt;
&lt;p 
  class=&quot;codepen&quot; 
  data-height=&quot;600&quot; 
  data-theme-id=&quot;dark&quot; 
  data-default-tab=&quot;js,result&quot; 
  data-user=&quot;VonHeikemen&quot; 
  data-slug-hash=&quot;JjjNvLE&quot; 
  data-preview=&quot;true&quot; 
  style=&quot;height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; 
  data-pen-title=&quot;Maybe I got your word&quot;&gt;
  &lt;span&gt;
    See the Pen &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&#x2F;pen&#x2F;JjjNvLE&quot;&gt;Maybe I got your word&lt;&#x2F;a&gt; by Heiker (&lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&quot;&gt;@VonHeikemen&lt;&#x2F;a&gt;) on &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&quot;&gt;CodePen&lt;&#x2F;a&gt;.
  &lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;script async src=&quot;https:&#x2F;&#x2F;static.codepen.io&#x2F;assets&#x2F;embed&#x2F;ei.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;bonus-track&quot;&gt;Bonus track&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Advertencia&lt;&#x2F;em&gt;: El objetivo de todo esto ya fue logrado, que vieran ese ejemplo en codepen. Lo que sigue es un experimento para ver si podía agregar soporte de operaciones asíncronas en la función &lt;code&gt;Maybe&lt;&#x2F;code&gt;. Si ya están cansados vayan directo al final y vean el último ejemplo.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ahora quizá estén pensando: muy bonito y todo pero en el &amp;quot;mundo real&amp;quot; hacemos peticiones a servidores, consultamos bases de datos, hacemos todo tipo de cosas asíncronas, ¿puedo usar eso en este contexto? &lt;&#x2F;p&gt;
&lt;p&gt;Bien. Entiendo. La implementación actual sólo contempla tareas normales. Tendrían que romper la cadena de &lt;code&gt;Maybe&lt;&#x2F;code&gt;s en el momento que aparezca una promesa (&lt;code&gt;Promise&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;Podemos crear un nuevo &lt;code&gt;Just&lt;&#x2F;code&gt; que esté consciente de que contiene una promesa. Es perfectamente posible, ¿un &lt;code&gt;AsyncJust&lt;&#x2F;code&gt;? ¿&lt;code&gt;JustAsync&lt;&#x2F;code&gt;? Suena horrible. &lt;&#x2F;p&gt;
&lt;p&gt;Por si no lo saben, una promesa en javascript (me refiero a una instancia de la clase &lt;code&gt;Promise&lt;&#x2F;code&gt;) es un tipo de dato que se utiliza para coordinar eventos futuros. Lo hace usando un método llamado &lt;code&gt;then&lt;&#x2F;code&gt; el cual acepta una función (lo que llaman callback) y también tiene un método &lt;code&gt;catch&lt;&#x2F;code&gt; para cuando las cosas salen mal. Pero si controlamos lo que va dentro del &lt;code&gt;then&lt;&#x2F;code&gt; podemos mantener la misma interface del &lt;code&gt;Maybe&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;¿Qué tan buenos son siguiendo un montón de callbacks?&lt;&#x2F;p&gt;
&lt;p&gt;Aquí está. Lo llamaré &lt;code&gt;Future&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; no me juzguen

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;promise_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) { 
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map_future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;))),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map_future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;))),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;or_else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;tap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;))),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter_future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;))), 

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;inspect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;&amp;lt;Promise&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;`
  };
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Si apartamos todo el ruido tal vez se pueda entender mejor.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;and_then: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;or_else: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;tap: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;unwrap_or: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;filter: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;and_then&lt;&#x2F;code&gt;: estos son iguales porque no puedes escaparte de una promesa.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;or_else&lt;&#x2F;code&gt;: toma la función proporcionada y la pasa al método &lt;code&gt;catch&lt;&#x2F;code&gt;, esto para imitar el comportamiento de un &lt;code&gt;else&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tap&lt;&#x2F;code&gt;: usa el método &lt;code&gt;then&lt;&#x2F;code&gt; para &amp;quot;echarle un vistazo&amp;quot; al valor dentro de la promesa. Este método es conviniente para colocar esas funciones &amp;quot;impuras&amp;quot; que tienen efecto sobre el mundo exterior.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;unwrap_or&lt;&#x2F;code&gt;: Esto devuelve la promesa para que puedan usar &lt;code&gt;await&lt;&#x2F;code&gt;. Si todo sale bien obtendrán el valor original de la promesa, sino devolverá el primer parámetro que fue proporcionado.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;&#x2F;code&gt;: este es un caso especial de &lt;code&gt;map&lt;&#x2F;code&gt;, es por eso que existe &lt;code&gt;filter_future&lt;&#x2F;code&gt;. &lt;&#x2F;li&gt;
&lt;li&gt;Casi todos estos métodos devuelven un nuevo &lt;code&gt;Future&lt;&#x2F;code&gt; porque &lt;code&gt;promise.then&lt;&#x2F;code&gt; siempre devuelve una nueva promesa.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Pero lo que hace que &lt;code&gt;Future&lt;&#x2F;code&gt; sea raro es lo que pasa dentro de &lt;code&gt;map&lt;&#x2F;code&gt;. ¿Recuerdan &lt;code&gt;map_future&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;map_future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; `fun` es el callback proporcionado
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;* Evaluemos el valor original de la promesa *&#x2F;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise_content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Necesitamos decidir si podemos confiar 
    &#x2F;&#x2F; en el valor original
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise_content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;reject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Si es un Just obtenemos su contenido
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise_content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise_content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;* Evaluemos el valor que devuelve el callback *&#x2F;

    &#x2F;&#x2F; Usaremos Maybe otra vez 
    &#x2F;&#x2F; porque tengo problemas de confianza.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;promise_content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;is_just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Si llegamos hasta aquí todo está bien.
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; en este punto debería revisar si result
    &#x2F;&#x2F; tiene un Future pero de ser así
    &#x2F;&#x2F; lo están usando mal, así que por ahora
    &#x2F;&#x2F; no hago nada.

    &#x2F;&#x2F; Algo anda muy mal.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;reject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
  }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora &lt;code&gt;filter_future&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#c594c5;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;filter_future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;predicate_fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;predicate_fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; ¿Acaso devolviste una promesa?
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Lo hiciste. Es por eso que no te pasan cosas buenas.
 
      &#x2F;&#x2F; veamos dentro de la promesa.
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;return_result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;the_real_result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;the_real_result 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;reject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; mantenemos la cadena viva.
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;return_result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;reject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
  }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lo último que me gustaría hacer es crear una función que convierta un valor regular en un &lt;code&gt;Future&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#fac863;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;from_val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora lo que tenemos que hacer para agregar soporte dentro de &lt;code&gt;Maybe&lt;&#x2F;code&gt; es esto.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;span style=&quot;color:#cccece;&quot;&gt; function Maybe(the_thing) {
   if(the_thing === null 
     || the_thing === undefined 
     || the_thing.is_nothing
   ) {
     return Nothing();
   }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;-
-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ec5f67;&quot;&gt;  if(the_thing.is_just) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;  if(the_thing.is_future || the_thing.is_just) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;     return the_thing;
    }

    return Just(the_thing);
 }
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pero la pregunta del millón sigue ahí. ¿Funciona?&lt;&#x2F;p&gt;
&lt;p&gt;Hice una  &amp;quot;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;VonHeikemen&#x2F;maybe-type-in-js&quot;&gt;versión para terminal&lt;&#x2F;a&gt;&amp;quot; de esta aplicación. También modifiqué el ejemplo de codepen: agregué las funciones relacionadas con &lt;code&gt;Future&lt;&#x2F;code&gt;, el dialogo de confirmación ahora sí es un dialogo (&lt;a href=&quot;https:&#x2F;&#x2F;github.hubspot.com&#x2F;vex&#x2F;&quot;&gt;este&lt;&#x2F;a&gt;) y la función del evento &#x27;submit&#x27; la marqué con &lt;code&gt;async&lt;&#x2F;code&gt; para poder usar &lt;code&gt;await&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p 
  class=&quot;codepen&quot; 
  data-height=&quot;600&quot; 
  data-theme-id=&quot;dark&quot; 
  data-default-tab=&quot;js,result&quot; 
  data-user=&quot;VonHeikemen&quot; 
  data-slug-hash=&quot;oNNwagG&quot; 
  data-preview=&quot;true&quot; 
  style=&quot;height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; 
  data-pen-title=&quot;Maybe I will promise you a word&quot;&gt;
  &lt;span&gt;
    See the Pen &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&#x2F;pen&#x2F;oNNwagG&quot;&gt;Maybe I will promise you a word&lt;&#x2F;a&gt; by Heiker (&lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&quot;&gt;@VonHeikemen&lt;&#x2F;a&gt;) on &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&quot;&gt;CodePen&lt;&#x2F;a&gt;.
  &lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bonus-bonus-edit&quot;&gt;Bonus bonus edit&lt;&#x2F;h3&gt;
&lt;p&gt;Antes mencioné que haríamos trampa con esta implementación. &lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;VonHeikemen&#x2F;pen&#x2F;QWWYJwZ&quot;&gt;Así sería&lt;&#x2F;a&gt; con una implementación más apegada a las ideas del paradigma funcional.&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
