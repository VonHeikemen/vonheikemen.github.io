<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Devlog</title><link>https://vonheikemen.github.io/devlog/</link><description/><generator>Zola</generator><language>en</language><atom:link href="https://vonheikemen.github.io/devlog/tags/javascript/rss.xml" rel="self" type="application/rss+xml"/><lastBuildDate>Tue, 21 Apr 2020 00:00:00 +0000</lastBuildDate><item><title>Reduce: how and when</title><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/web-development/learn-fp/reduce-how-and-when/</link><guid>https://vonheikemen.github.io/devlog/web-development/learn-fp/reduce-how-and-when/</guid><description>&lt;p>Let's talk about the elephant in the &lt;code>Array&lt;/code> prototype, the not so loved &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">reduce&lt;/a> method but we're not going to discuss whether if it's good or not, let's not do that. We'll talk about how it works internally, then we'll try to figure out under what situation it can be an effective solution.&lt;/p>
&lt;p>To make sure everyone here knows how it works we're going to make our own implementation.&lt;/p>
&lt;h2 id="how-it-works">How it works&lt;/h2>
&lt;p>&lt;code>reduce&lt;/code> is a function that takes a list of values and transform it into something else. The key here is the word &lt;strong>transformation&lt;/strong>. The &amp;quot;user&amp;quot; of our function is the one that determines what's going to happen. What does that mean? It means that apart from the array that we're going to process we need to take a callback function as a parameter. So the function signature will be this. &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">arr&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">callback&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// code...
&lt;/span>&lt;span style="color:#5fb3b3;">}
&lt;/span>&lt;/pre>
&lt;p>We got ourselves some values, now what? What do we do with them? Usually the &lt;code>Array&lt;/code> methods apply the function to every element in it. Let's do that.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">arr&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">callback&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">for&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">value &lt;/span>&lt;span style="color:#5fb3b3;">of &lt;/span>&lt;span style="color:#cccece;">arr&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#6699cc;">callback&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
}
&lt;/span>&lt;/pre>
&lt;p>It's still not what we want but we're getting there. Now for the secret ingredient, the accumulator. We will create a variable that remembers the &lt;strong>current state&lt;/strong> of our transformation. Every time we apply the &lt;code>callback&lt;/code> function to a value we save the result in the accumulator. As a bonus before we save the new state we will pass the current state to the &lt;code>callback&lt;/code> function so our &amp;quot;user&amp;quot; doesn't have to make any effort.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> function reduce(arr, callback) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> let state;
&lt;/span>&lt;span style="color:#cccece;"> for(const value of arr) {
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> callback(value);
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> state = callback(state, value);
&lt;/span>&lt;span style="color:#cccece;"> }
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> return state;
&lt;/span>&lt;span style="color:#cccece;"> }
&lt;/span>&lt;/pre>
&lt;p>Keep those green lines in your mind at all times. No matter how complex &lt;code>reduce&lt;/code> looks on the outside, no matter how many weird tricks you see in the wild, those three lines are the only thing that matters.&lt;/p>
&lt;p>That may not be an exact replica of &lt;code>Array.reduce&lt;/code> but it'll do for now. Let's test it.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">array1 &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">4&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">callback &lt;/span>&lt;span style="color:#5fb3b3;">= (&lt;/span>&lt;span style="color:#f99157;">state&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">state &lt;/span>&lt;span style="color:#5fb3b3;">== &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">state &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
};
&lt;/span>&lt;span style="color:#5f6364;">// 1 + 2 + 3 + 4
&lt;/span>&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">array1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">callback&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Expected output: 10
&lt;/span>&lt;/pre>
&lt;p>See that &lt;code>if&lt;/code>? It's there because &lt;code>state&lt;/code> doesn't have a value in the first iteration of the loop, it's something unnecessary. As authors of &lt;code>reduce&lt;/code> we can help reduce the amount of code that &lt;code>callback&lt;/code> needs. If we take some of the responsibility out of the &lt;code>callback&lt;/code> we can make &lt;code>reduce&lt;/code> a lot more flexible. What we'll do is take the first element in the array and make that our initial state.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> function reduce(arr, callback) {
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> let state;
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> for(const value of arr) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> let state = arr[0];
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> let rest = arr.slice(1);
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> for(const value of rest) {
&lt;/span>&lt;span style="color:#cccece;"> state = callback(state, value);
}
return state;
}
&lt;/span>&lt;/pre>
&lt;p>Let's do it again.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">array1 &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">4&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">callback &lt;/span>&lt;span style="color:#5fb3b3;">= (&lt;/span>&lt;span style="color:#f99157;">state&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">state &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
};
&lt;/span>&lt;span style="color:#5f6364;">// 1 + 2 + 3 + 4
&lt;/span>&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">array1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">callback&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Expected output: 10
&lt;/span>&lt;/pre>
&lt;p>If you're still having a hard time trying to figure out what's happening then let me see if I can help. If we take &lt;code>callback&lt;/code> out of the picture this is what happens.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">arr&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">state &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">arr&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">rest &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">arr&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">slice&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">for&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">value &lt;/span>&lt;span style="color:#5fb3b3;">of &lt;/span>&lt;span style="color:#cccece;">rest&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">state &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">state &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Remember the green lines?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> function reduce(arr) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> let state = arr[0];
&lt;/span>&lt;span style="color:#cccece;"> let rest = arr.slice(1);
for(const value of rest) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> state = state + value;
&lt;/span>&lt;span style="color:#cccece;"> }
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> return state;
&lt;/span>&lt;span style="color:#cccece;"> }
&lt;/span>&lt;/pre>
&lt;p>See that? That's the only thing you need to remember. As we can see &lt;code>reduce&lt;/code> give us the ability increase the &amp;quot;capacity&amp;quot; of a binary &lt;strong>operation&lt;/strong>, to make it process a lot more values. &lt;/p>
&lt;h2 id="when-can-i-use-this">When can I use this?&lt;/h2>
&lt;p>So &lt;code>reduce&lt;/code> is one of those functions that can be used in many different situations but it's not always the best solution, still there is a time and place for it and now that we know how it works we can figure out what is the best use case.&lt;/p>
&lt;h3 id="an-ideal-use-case">An ideal use case&lt;/h3>
&lt;p>The previous example should have give you a clue. Our function is more effective when we follow a certain pattern. Let's think about the &lt;code>callback&lt;/code> in that example. We know it needs two numbers, runs a math operation and returns a number. Basically this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">Number + Number -&amp;gt; Number
&lt;/span>&lt;/pre>
&lt;p>That's nice, but if we take a step back and think in more general terms this is what we got.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">TypeA + TypeA -&amp;gt; TypeA
&lt;/span>&lt;/pre>
&lt;p>There are two values of the same type (TypeA) and an operation (the + sign) that returns another instance of the same type (TypeA). When we look at it in that way we can see a pattern that we can apply beyond math. Let's do another example with some numbers, this time we'll do a comparison.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">max&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">number&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">another_one&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">number &lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt; &lt;/span>&lt;span style="color:#cccece;">another_one&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">number&lt;/span>&lt;span style="color:#5fb3b3;">;
} &lt;/span>&lt;span style="color:#c594c5;">else &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">another_one&lt;/span>&lt;span style="color:#5fb3b3;">;
}
}
&lt;/span>&lt;/pre>
&lt;p>&lt;code>max&lt;/code> is a function that takes two numbers, compares them and returns the largest. It's a very general function and a bit limited. Now, if we think again in abstract terms we see that pattern again.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">TypeA + TypeA -&amp;gt; TypeA
&lt;/span>&lt;/pre>
&lt;p>If we want to be more specific.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">Number + Number -&amp;gt; Number
&lt;/span>&lt;/pre>
&lt;p>You know what it means, we can use &lt;code>reduce&lt;/code> to make it process a lot more than two values.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">array2 &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">40&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">41&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">39&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">38&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#5f6364;">// 40 &amp;gt; 41 &amp;gt; 42 &amp;gt; 39 &amp;gt; 38
&lt;/span>&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">array2&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">max&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Expected output: 42
&lt;/span>&lt;/pre>
&lt;p>Turns out the pattern we've been following to create the &lt;code>callback&lt;/code> for &lt;code>reduce&lt;/code> has a name in functional programming, this one is called a &lt;strong>Semigroup&lt;/strong>. When you have two values of the same type and a way to combine them, you are in the presence of a semigroup. So, &lt;em>two values&lt;/em> + &lt;em>way of combine them&lt;/em> = &lt;em>Semigroup&lt;/em>.&lt;/p>
&lt;p>You can prove you have a function that follows the rules of a semigroup, all you need to do is make sure it is associative. For example with our &lt;code>max&lt;/code> function we can do.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">max_1 &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">max&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">max&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">40&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#f99157;">41&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 42
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">max_2 &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">max&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">40&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">max&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">41&lt;/span>&lt;span style="color:#5fb3b3;">)); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 42
&lt;/span>&lt;span style="color:#cccece;">max_1 &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#cccece;">max_2
&lt;/span>&lt;span style="color:#5f6364;">// Expected output: true
&lt;/span>&lt;/pre>
&lt;p>See? Doesn't matter which order you group your operation, it yields the same result. Now we know that it'll work if we combine it with &lt;code>reduce&lt;/code> and an array of numbers.&lt;/p>
&lt;p>Can these rules apply to a more complex data type? Of course. In javascript we already have a few types that fit the description. Think about arrays for a moment, in the array prototype we have the &lt;code>concat&lt;/code> method that can merge two arrays into a new one.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">concat&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">one&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">another&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">one&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">concat&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">another&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>With this we have.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">Array + Array -&amp;gt; Array
&lt;/span>&lt;/pre>
&lt;p>Okay, the second parameter of &lt;code>concat&lt;/code> doesn't have to be an array but let's ignore that for a second. If we use &lt;code>concat&lt;/code> with &lt;code>reduce&lt;/code> we get.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">array3 &lt;/span>&lt;span style="color:#5fb3b3;">= [[&lt;/span>&lt;span style="color:#f99157;">40&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">41&lt;/span>&lt;span style="color:#5fb3b3;">], [&lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">], [&lt;/span>&lt;span style="color:#f99157;">39&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">38&lt;/span>&lt;span style="color:#5fb3b3;">]];
&lt;/span>&lt;span style="color:#5f6364;">// [40, 41] + [42] + [39, 38]
&lt;/span>&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">array3&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">concat&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Expected output: [40, 41, 42, 39, 38]
&lt;/span>&lt;/pre>
&lt;p>Now if you wanted you could create a function that flattens one level of a multidimensional array, isn't that great? And just like with numbers we don't have to stick with just the built-in functions. If we have a helper function that works with two arrays and it's associative we can combine it with &lt;code>reduce&lt;/code>.&lt;/p>
&lt;p>Say we have a function that joins the unique items of two arrays.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">union&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">one&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">another&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">set &lt;/span>&lt;span style="color:#5fb3b3;">= new &lt;/span>&lt;span style="color:#fac863;">Set&lt;/span>&lt;span style="color:#5fb3b3;">([...&lt;/span>&lt;span style="color:#cccece;">one&lt;/span>&lt;span style="color:#5fb3b3;">, ...&lt;/span>&lt;span style="color:#cccece;">another&lt;/span>&lt;span style="color:#5fb3b3;">]);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Array&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">from&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">set&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>Good, it works with two values of the same type but let's see if it's an associative operation.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">union_1 &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">union&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">union&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">40&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">41&lt;/span>&lt;span style="color:#5fb3b3;">], [&lt;/span>&lt;span style="color:#f99157;">40&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">41&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">]), [&lt;/span>&lt;span style="color:#f99157;">39&lt;/span>&lt;span style="color:#5fb3b3;">]);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">union_2 &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">union&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">40&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">41&lt;/span>&lt;span style="color:#5fb3b3;">], &lt;/span>&lt;span style="color:#6699cc;">union&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">40&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">41&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">], [&lt;/span>&lt;span style="color:#f99157;">39&lt;/span>&lt;span style="color:#5fb3b3;">]));
&lt;/span>&lt;span style="color:#cccece;">union_1&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">join&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">,&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;) == &lt;/span>&lt;span style="color:#cccece;">union_2&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">join&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">,&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// Expected output: true
&lt;/span>&lt;/pre>
&lt;p>Yes, it follows the rules, that means that we can process multiple arrays if we use it with &lt;code>reduce&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">array4 &lt;/span>&lt;span style="color:#5fb3b3;">= [
[&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hello&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;],
[&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hello&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">awesome&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;],
[&amp;#39;&lt;/span>&lt;span style="color:#99c794;">world&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">!&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;],
[&amp;#39;&lt;/span>&lt;span style="color:#99c794;">!!&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">world&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]
];
&lt;/span>&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">array4&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">union&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Expected output: [ &amp;quot;hello&amp;quot;, &amp;quot;awesome&amp;quot;, &amp;quot;world&amp;quot;, &amp;quot;!&amp;quot;, &amp;quot;!!&amp;quot; ]
&lt;/span>&lt;/pre>&lt;h3 id="some-resistance">Some resistance&lt;/h3>
&lt;p>You may have notice that in all our examples the data always has the right type, this isn't always the case in the &amp;quot;real world&amp;quot;. Sometimes we get in situations where the first element of the array is not a valid input for our &lt;code>callback&lt;/code>.&lt;/p>
&lt;p>Imagine we want to use &lt;code>concat&lt;/code> yet again but this time the array we have is this one.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">array5 &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">40&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">41&lt;/span>&lt;span style="color:#5fb3b3;">, [&lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">], [&lt;/span>&lt;span style="color:#f99157;">39&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">38&lt;/span>&lt;span style="color:#5fb3b3;">]];
&lt;/span>&lt;/pre>
&lt;p>If we try to &lt;code>reduce&lt;/code> it.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">array5&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">concat&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>We get this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">TypeError: one.concat is not a function
&lt;/span>&lt;/pre>
&lt;p>It happens because in the first iteration &lt;code>one&lt;/code>'s value is the number &lt;code>40&lt;/code> which doesn't have &lt;code>concat&lt;/code> method. What do we do? It is considered a good practice to pass a fixed initial value to avoid these kind of bugs. But we have a problem, we can't pass an initial value to our &lt;code>reduce&lt;/code>. We're going to fix that.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> function reduce(arr, callback) {
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> let state = arr[0];
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> let rest = arr.slice(1);
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> function reduce(arr, ...args) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> if(args.length === 1) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> var [callback] = args;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> var state = arr[0];
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> var rest = arr.slice(1);
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> } else if(args.length &amp;gt;= 2) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> var [state, callback] = args;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> var rest = arr;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> }
&lt;/span>&lt;span style="color:#cccece;"> for(const value of rest) {
state = callback(state, value);
}
return state;
}
&lt;/span>&lt;/pre>
&lt;p>To fix the previous mistake what we'll do is pass &lt;code>reduce&lt;/code> an empty array as an initial value.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">array5&lt;/span>&lt;span style="color:#5fb3b3;">, [], &lt;/span>&lt;span style="color:#cccece;">concat&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Expected output: [ 40, 41, 42, 39, 38 ]
&lt;/span>&lt;/pre>
&lt;p>The error is gone and we have the array we wanted. But notice that the empty array not only fixed the error, it didn't influence the end result of the operation. Like numbers with the arrays we have the notion of an empty element that we can use in our functions without causing a fatal error in our program.&lt;/p>
&lt;p>The empty array can be seen as an &lt;strong>identity element&lt;/strong>, a neutral value that when applied to a function doesn't have an effect on the end result. Guess what, this behavior also has name in functional programming, it is known as a &lt;strong>Monoid&lt;/strong>. When we have a semigroup with an identity element we get a monoid. So, &lt;em>semigroup&lt;/em> + &lt;em>identity element&lt;/em> = &lt;em>Monoid&lt;/em>.&lt;/p>
&lt;p>We can prove that arrays behave like a monoid in our functions.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Concat
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">concat_1 &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">concat&lt;/span>&lt;span style="color:#5fb3b3;">([], [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hello&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [&amp;quot;hello&amp;quot;]
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">concat_2 &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">concat&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hello&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;], []); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [&amp;quot;hello&amp;quot;]
&lt;/span>&lt;span style="color:#cccece;">concat_1&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">join&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">,&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;) == &lt;/span>&lt;span style="color:#cccece;">concat_2&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">join&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">,&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// Expected output: true
// Union
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">union_3 &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">union&lt;/span>&lt;span style="color:#5fb3b3;">([], [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hello&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [&amp;quot;hello&amp;quot;]
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">union_4 &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">union&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hello&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;], []); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [&amp;quot;hello&amp;quot;]
&lt;/span>&lt;span style="color:#cccece;">union_3&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">join&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">,&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;) == &lt;/span>&lt;span style="color:#cccece;">union_4&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">join&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">,&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// Expected output: true
&lt;/span>&lt;/pre>
&lt;p>Why does it matter? Think about this: how many times you had to write an &lt;code>if&lt;/code> statement to guard against a &lt;code>null&lt;/code> value or &lt;code>undefined&lt;/code>? If we can represent an &amp;quot;empty value&amp;quot; in a safe way we prevent a whole category of errors in our programs. &lt;/p>
&lt;p>Another situation where monoids come in handy is when we want to perform an &amp;quot;unsafe&amp;quot; action on a value. We can use a reference to an empty value to make this unsafe operation while keeping the other values on the array intact.&lt;/p>
&lt;p>Imagine that we have pieces of information scattered over several objects and we want to merge all those pieces.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">array6 &lt;/span>&lt;span style="color:#5fb3b3;">= [
{&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">Harold&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;},
{&lt;/span>&lt;span style="color:#cccece;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">Cooper&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;},
{&lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">wrong&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;}
];
&lt;/span>&lt;/pre>
&lt;p>Normally you would use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">spread syntax&lt;/a> to merge all these things, but let's say we live in a world where that is not possible. Fear not, we have a nice utility function that can do it.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#fac863;">Object&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">assign&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;/pre>
&lt;p>If you think about it &lt;code>Object.assign&lt;/code> also follows the pattern.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">TypeA + TypeA -&amp;gt; TypeA
&lt;/span>&lt;/pre>
&lt;p>We give it two objects and it gives us back yet another object. But the catch is that it mutates the one we pass in the first parameter. So if we do this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">array6&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#fac863;">Object&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">assign&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Expected value: { &amp;quot;name&amp;quot;: &amp;quot;Harold&amp;quot;, &amp;quot;lastname&amp;quot;: &amp;quot;Cooper&amp;quot;, &amp;quot;state&amp;quot;: &amp;quot;wrong&amp;quot; }
&lt;/span>&lt;/pre>
&lt;p>Looks like everything is good, but it's not. If check you &lt;code>array6[0]&lt;/code> you'll see that it was changed, you definitely don't want that. Fortunately objects in javascript also behave like a monoid so they have a valid &amp;quot;empty value&amp;quot; we can use. So the right way of using it would be this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">array6&lt;/span>&lt;span style="color:#5fb3b3;">, {}, &lt;/span>&lt;span style="color:#fac863;">Object&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">assign&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Expected value: { &amp;quot;name&amp;quot;: &amp;quot;Harold&amp;quot;, &amp;quot;lastname&amp;quot;: &amp;quot;Cooper&amp;quot;, &amp;quot;state&amp;quot;: &amp;quot;wrong&amp;quot; }
&lt;/span>&lt;span style="color:#cccece;">array6
&lt;/span>&lt;span style="color:#5f6364;">// Expected value: [ { &amp;quot;name&amp;quot;: &amp;quot;Harold&amp;quot; }, { &amp;quot;lastname&amp;quot;: &amp;quot;Cooper&amp;quot; }, { &amp;quot;state&amp;quot;: &amp;quot;wrong&amp;quot; } ]
&lt;/span>&lt;/pre>
&lt;p>We can say that when we work with an array of values that follow the rules of the monoids we can be certain that &lt;code>reduce&lt;/code> will be a good choice to process that.&lt;/p>
&lt;h2 id="beyond-arrays">Beyond arrays&lt;/h2>
&lt;p>If we can implement a version of &lt;code>reduce&lt;/code> for arrays then it wouldn't be weird to think that other people have implemented something similar in other data types. Knowing how &lt;code>reduce&lt;/code> works could be useful if you use a library that has a method like that.&lt;/p>
&lt;p>For example, in &lt;a href="https://mithril.js.org/stream.html">mithril-stream&lt;/a> there is a method called &lt;code>scan&lt;/code> that has the following signature.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">Stream.scan(fn, accumulator, stream)
&lt;/span>&lt;/pre>
&lt;p>That &lt;code>fn&lt;/code> variable must be a function that follows this pattern.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">(accumulator, value) -&amp;gt; result | SKIP
&lt;/span>&lt;/pre>
&lt;p>Recognize that? I hope so. Those are the same requirements &lt;code>reduce&lt;/code> has. Okay, but what does &lt;code>scan&lt;/code> do? It executes the function &lt;code>fn&lt;/code> when the source (&lt;code>stream&lt;/code>) produces a new value. &lt;code>fn&lt;/code> gets called with the current state of the accumulator and the new value on the stream, the returned value then becomes the new state of the accumulator. Does that sound familiar?&lt;/p>
&lt;p>You can test &lt;code>scan&lt;/code> with our function &lt;code>union&lt;/code> and see how it behaves.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">import &lt;/span>&lt;span style="color:#cccece;">Stream &lt;/span>&lt;span style="color:#c594c5;">from &lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">https://cdn.pika.dev/mithril-stream@^2.0.0&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">union&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">one&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">another&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">set &lt;/span>&lt;span style="color:#5fb3b3;">= new &lt;/span>&lt;span style="color:#fac863;">Set&lt;/span>&lt;span style="color:#5fb3b3;">([...&lt;/span>&lt;span style="color:#cccece;">one&lt;/span>&lt;span style="color:#5fb3b3;">, ...&lt;/span>&lt;span style="color:#cccece;">another&lt;/span>&lt;span style="color:#5fb3b3;">]);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Array&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">from&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">set&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">list &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">node&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">js&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">state &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">scan&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">union&lt;/span>&lt;span style="color:#5fb3b3;">, [], &lt;/span>&lt;span style="color:#cccece;">list&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">list&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">node&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#6699cc;">list&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">js&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">deno&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#6699cc;">list&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">node&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">javascript&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>You should be able to see how the list only adds unique values.&lt;/p>
&lt;p>You can see a modified version of that in this pen.&lt;/p>
&lt;p
class="codepen"
data-height="600"
data-theme-id="dark"
data-default-tab="js,result"
data-user="VonHeikemen"
data-slug-hash="NWGrozo"
data-preview="true"
style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"
data-pen-title="A different reduce">
&lt;span>
See the Pen &lt;a href="https://codepen.io/VonHeikemen/pen/NWGrozo">A different reduce&lt;/a> by Heiker (&lt;a href="https://codepen.io/VonHeikemen">@VonHeikemen&lt;/a>) on &lt;a href="https://codepen.io">CodePen&lt;/a>.
&lt;/span>
&lt;/p>
&lt;script async src="https://static.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;p>Our knowledge of the method &lt;code>reduce&lt;/code> (and maybe a little bit of semigroups and monoids) can help us create helper function that can be reuse in different data types. How cool is that?&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Even though I didn't mention the many things you can do with &lt;code>reduce&lt;/code> now you have the tools to be able to identify the situations where this method can be applied effectively, even if you're not sure you can make the necessary tests to know if the operation you want to do has the right properties.&lt;/p>
&lt;h2 id="sources">Sources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=Qnkn4612ZIQ">Practical Category Theory: Monoids (video)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/thefrontside/funcadelic.js">Funcadelic.js&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jrsinclair.com/articles/2019/functional-js-do-more-with-reduce/">Functional JavaScript: How to use array reduce for more than just numbers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">Array.prototype.reduce (MDN)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/fantasyland/fantasy-land#fantasy-land-specification">Fantasy Land&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Learning functional programming: A roadmap</title><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/web-development/learn-fp/roadmap/</link><guid>https://vonheikemen.github.io/devlog/web-development/learn-fp/roadmap/</guid><description>&lt;p>Learning about functional programming is not an easy task, specially if you search for articles that have concrete examples of the concepts they try to teach. I have been learning about this paradigm for a while and I want it to share the notes I have taken, the ones I've turn into articles, and also the source material where I got the information.&lt;/p>
&lt;p>Even though all these articles are related I didn't plan on writing them. So, I'll be presenting some sort of guide (a suggestion) on the order they should be read.&lt;/p>
&lt;h2 id="the-basics">The basics&lt;/h2>
&lt;p>To begin I would like you to see the video of the talk that convinced me to try learning this paradigm. The talk is about what is and what isn't functional programming, it also shows some examples of the core principles using javascript.&lt;/p>
&lt;div >
&lt;iframe src="https://www.youtube.com/embed/qtsbZarFzm8" webkitallowfullscreen mozallowfullscreen allowfullscreen>
&lt;/iframe>
&lt;/div>
&lt;p>To complement that video I wrote my own notes.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://vonheikemen.github.io/devlog/web-development/learn-fp/pure-functions/">Pure functions and why they are a good idea&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://vonheikemen.github.io/devlog/web-development/learn-fp/dealing-with-side-effects-and-pure-functions/">Dealing with side effects and pure functions in javascript&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="further-reading">Further reading&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming">An introduction to functional programming&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="a-very-special-tool">A very special tool&lt;/h2>
&lt;p>If you read everything so far you already have enough knowledge to add some functional style to your everyday coding. You don't have to know every trick in the book to start seeing the benefits of this paradigm.&lt;/p>
&lt;p>So, I want you to pay close attention to something called &lt;strong>partial application&lt;/strong>, just like the concept of a &lt;strong>pure function&lt;/strong>, partial application can help you a lot even if you decide you don't want to write code in a functional style.&lt;/p>
&lt;p>This are my notes on the topic (with practical examples): &lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/web-development/learn-fp/partial-application/">Partial application&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>If you are convinced that this is useful then watch this video, in here you can see the kind of thing you can accomplish.&lt;/p>
&lt;div >
&lt;iframe src="https://www.youtube.com/embed/m3svKOdZijA" webkitallowfullscreen mozallowfullscreen allowfullscreen>
&lt;/iframe>
&lt;/div>
&lt;h2 id="how-to-put-the-pieces-together">How to put the pieces together&lt;/h2>
&lt;p>Now, knowing the basics is one thing, it's a whole other deal knowing how to use them in the most effective way. You already have the tools but you might be wondering how all of this fits together, that is our next step.&lt;/p>
&lt;p>In this article we are going to learn how to use everything we have learned.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/web-development/learn-fp/composition-techniques/">Composition techniques&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Just in case you missed it. In this talk (the source of the previous article) you can see in more detail what composition is about.&lt;/p>
&lt;div >
&lt;iframe src="https://www.youtube.com/embed/vDe-4o8Uwl8" webkitallowfullscreen mozallowfullscreen allowfullscreen>
&lt;/iframe>
&lt;/div>
&lt;h2 id="one-step-further">One step further&lt;/h2>
&lt;p>By now you must know how to manipulate functions and make them do your bidding. But I bet there are still things you want to know in more detail, two in particular: Functors and Monads. So, I'll try my best to tell you how you can use them to your advantage.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/the-power-of-map/">Have you met Functors?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/using-a-maybe/">Using a Maybe&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="extra-content">Extra content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/web-development/learn-fp/reduce-how-and-when/">Reduce: how and when&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/lenses-a-k-a-composable-getters-and-setters/">Lenses: an alternative to getters and setters&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="more-interesting-talks">More interesting talks&lt;/h3>
&lt;p>If you're still wondering what you can do just by composing functions just watch this.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=7BsfMMYvGaU">Mary had a little lambda&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=SfWR3dKnFIo">Oh Composable World!&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="til-next-time">'Til next time&lt;/h2>
&lt;p>If you got here and read everything then you know as much as I do. Got nothing else to show you. Whether you decided to adopt a fully functional style or not I hope you learned something that you can apply in your everyday coding.&lt;/p></description></item><item><title>Pure functions and why they are a good idea</title><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/web-development/learn-fp/pure-functions/</link><guid>https://vonheikemen.github.io/devlog/web-development/learn-fp/pure-functions/</guid><description>&lt;p>When we talk about functional programming very few things can be as important as pure functions. People who write code in this style make a considerable effort to contain as much logic as they can in pure functions, I'll try to explain some of the reasons behind this. But, first things first...&lt;/p>
&lt;h2 id="what-s-a-pure-function">What's a pure function?&lt;/h2>
&lt;p>A function whose output is only determined by its input and has no observable effect on the outside world (has no side effects).&lt;/p>
&lt;h3 id="benefits">Benefits&lt;/h3>
&lt;p>I want to focus on the benefits they provide to us humans who read and interpret code in our minds.&lt;/p>
&lt;ul>
&lt;li>They are predictable&lt;/li>
&lt;/ul>
&lt;p>Given the same inputs, it always produces the same output. This is one of the most relevant properties they have, and to me is the most important. It gives us the ability to test with relative ease how effective is our solution. &lt;/p>
&lt;p>Say that we have a function that transforms every letter in a string to uppercase. What do we need to prove that it works? The function, some input data and the expected output.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">to_uppercase&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hello&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;) == &amp;#39;&lt;/span>&lt;span style="color:#99c794;">HELLO&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;/pre>
&lt;p>There is no need to emulate an entire environment or to use special tools, we just compare the result with the expected output. This gives us confidence in what we create, because we can prove with certainty that it works appropriately.&lt;/p>
&lt;ul>
&lt;li>Comprehension&lt;/li>
&lt;/ul>
&lt;p>When it comes to code we spend more time reading and analyzing than writing it. Communication is one aspect that we always need to consider. In theory, a pure function would need the least amount of context in order to understand its behavior because everything you need to know about it is (or at least it should) in the body and its arguments.&lt;/p>
&lt;p>Another property that pure function have is &lt;strong>referential transparency&lt;/strong>, this means that we can replace a function call with its return value.&lt;/p>
&lt;p>For example, this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">to_uppercase&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hi&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;) + &amp;#39;&lt;/span>&lt;span style="color:#99c794;">, user&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;/pre>
&lt;p>Can be replaced by this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">HI, user&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;/pre>
&lt;p>It means that when you understand what a pure function does you can mentally replace the function call with the return value.&lt;/p>
&lt;ul>
&lt;li>Composition&lt;/li>
&lt;/ul>
&lt;p>If you have created a pure function there is a very strong chance that what you have is an independent component that can be reused in different contexts. Being independent and reusable makes them the perfect candidates to be combined with other components. Think about it, if you combine a pure function with another into a new function, it results in yet another pure function. This is one powerful feature allows you to create complex procedures by composing &amp;quot;simple&amp;quot; pieces.&lt;/p>
&lt;h2 id="further-reading">Further reading&lt;/h2>
&lt;p>As good as pure functions are at some point you need to abandon the idea of purity and cause some effect on the outside world (show something on the screen, make an HTTP request, etc..) Because of that I have prepared more material with more details about this topic.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://vonheikemen.github.io/devlog/web-development/learn-fp/composition-techniques/">Composition techniques&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://vonheikemen.github.io/devlog/web-development/learn-fp/dealing-with-side-effects-and-pure-functions/">Dealing with side effects and pure functions in javascript &lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="sources">Sources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=qtsbZarFzm8&amp;amp;feature=youtu.be">Functional Programming in JS: What? Why? How? (video)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming">An introduction to functional programming&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch5.md/#chapter-5-reducing-side-effects">Functional-Light JavaScript - Chapter 5: Reducing Side Effects&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Functional programming for your everyday javascript: Composition techniques</title><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/web-development/learn-fp/composition-techniques/</link><guid>https://vonheikemen.github.io/devlog/web-development/learn-fp/composition-techniques/</guid><description>&lt;p>Today we are going to talk about function composition. The art of creating big things with &amp;quot;simple&amp;quot; pieces. It will be even better if you don't know anything about functional programming, this will be an introduction to common concepts and patterns used in that paradigm that can be implemented in javascript. What I'm about to show you is not a magical formula to make your code more readable or bug free, that's not how any of this works. I do believe that it can help solve some problems, but in order to do that in the best way you need to keep a few things in mind. So, before I show you any implementation we are going to talk about some concepts and a little bit about philosophy. &lt;/p>
&lt;h2 id="what-you-need-to-know">What you need to know&lt;/h2>
&lt;h3 id="what-is-function-composition">What is function composition?&lt;/h3>
&lt;p>It's a mechanism that allows us to combine two or more function into a new function.&lt;/p>
&lt;p>It looks like a simple idea, haven't we all at some point in our lives combined a couple of functions? But do we really think about composition when we create them? What will help us make functions already designed to be combined?&lt;/p>
&lt;h3 id="philosophy">Philosophy&lt;/h3>
&lt;p>Function composition is more effective if you follow certain principles.&lt;/p>
&lt;ul>
&lt;li>The function should only have one purpose, one responsibility.&lt;/li>
&lt;li>Always think the returned value will be consumed by another function.&lt;/li>
&lt;/ul>
&lt;p>You've probably heard this before, it's a fragment of the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy#Origin">unix philosophy&lt;/a>. Ever wondered how come &lt;code>bash&lt;/code>, despite having a weird syntax and many limitations, is so popular? Those two principle are a big part. A lot of the software designed for that environment is specially made to be a reusable component, and when you &amp;quot;connect&amp;quot; two or more the result is another program that can be connected with other unknown programs.&lt;/p>
&lt;p>For some it might seem silly or even excessive to have many little functions that do just one thing, specially if what they do looks useless, but I can prove to you that every function can be valuable in the right context.&lt;/p>
&lt;p>I'll try to setup a situation where we can put in practice these principles.&lt;/p>
&lt;blockquote>
&lt;p>Note: I apologize in advance for the bad use of &lt;code>cat&lt;/code> and &lt;code>grep&lt;/code>, I'll do it just to prove a point about composition.&lt;/p>
&lt;/blockquote>
&lt;p>Say that we want to extract the value of variable named &lt;code>HOST&lt;/code> that's inside a &lt;code>.env&lt;/code> file. Let's try to do this in &lt;code>bash&lt;/code>.&lt;/p>
&lt;p>This is the file.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">ENV=development
HOST=http://locahost:5000
&lt;/span>&lt;/pre>
&lt;p>To show the content of the file in the screen we use &lt;code>cat&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">cat .env
&lt;/span>&lt;/pre>
&lt;p>To filter that content and search the line we want we use &lt;code>grep&lt;/code>, provide the pattern of the thing we want and the content of the file.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">cat .env &lt;/span>&lt;span style="color:#5fb3b3;">| &lt;/span>&lt;span style="color:#6699cc;">grep &lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#99c794;">HOST=.*&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>To get the value we use &lt;code>cut&lt;/code>, this is going to take the result provided by &lt;code>grep&lt;/code> and it's going to divide it using a delimiter, then it will give us the section of the string we tell it.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">cat .env &lt;/span>&lt;span style="color:#5fb3b3;">| &lt;/span>&lt;span style="color:#6699cc;">grep &lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#99c794;">HOST=.*&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; | &lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;"> --&lt;/span>&lt;span style="color:#f99157;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; --&lt;/span>&lt;span style="color:#f99157;">fields&lt;/span>&lt;span style="color:#5fb3b3;">=&lt;/span>&lt;span style="color:#6699cc;">2
&lt;/span>&lt;/pre>
&lt;p>That should give us.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">http://locahost:5000
&lt;/span>&lt;/pre>
&lt;p>If we put that chain of commands in a script or a function inside our &lt;code>.bashrc&lt;/code> we will effectively have a command that can be used in the same way by yet other commands that we don't even know about. That is the kind of flexibility and power that we want to have.&lt;/p>
&lt;p>I hope by now you know what kind of things you need to consider when you create a function but there is just one more thing I would like to tell you.&lt;/p>
&lt;h3 id="functions-are-things">Functions are things&lt;/h3>
&lt;p>Let's turn around and put our attention on javascript. Have you ever heard the phrase &amp;quot;first-class function&amp;quot;? It means that functions can be treated just like any other value. Let's compare with arrays.&lt;/p>
&lt;ul>
&lt;li>You can assign them to variables&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">numbers &lt;/span>&lt;span style="color:#5fb3b3;">= [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">99&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">104&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;];
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">repeat_twice &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">str&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">repeat&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">);
};
&lt;/span>&lt;/pre>
&lt;ul>
&lt;li>Pass them around as arguments to a function&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">array&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">array&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fn&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">repeat_twice&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">numbers&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;ul>
&lt;li>Return them from other functions&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">unary&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">arg&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">);
}
}
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">safer_parseint &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">unary&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">parseInt&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">safer_parseint&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">numbers&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Why am I showing you this? You have to be aware of this particular thing about javascript because we are going to create many helper functions, like &lt;code>unary&lt;/code>, that manipulate other functions. It may take a while to get use to the idea of treating functions like data but it's something you should definitely put in practice, is just one those patterns that you see a lot in functional programming.&lt;/p>
&lt;h2 id="composition-in-practice">Composition in practice&lt;/h2>
&lt;p>Let's get back to our example with the &lt;code>.env&lt;/code>. We'll recreate what we did with &lt;code>bash&lt;/code>. First we'll take a very direct approach, then we'll explore the flaws of our implementation and try to fix them.&lt;/p>
&lt;p>So, we've done this before, we know what to do. Let's start by creating a function for each step.&lt;/p>
&lt;ul>
&lt;li>Get the content of the file.&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">fs &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">require&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fs&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">get_env&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">fs&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">readFileSync&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">utf-8&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
}
&lt;/span>&lt;/pre>
&lt;ul>
&lt;li>Filter the content based on a pattern.&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">search_host&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">content&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exp &lt;/span>&lt;span style="color:#5fb3b3;">= new &lt;/span>&lt;span style="color:#fac863;">RegExp&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">lines &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">content&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">split&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;\n&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">lines&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">find&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">line &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">exp&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">test&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">line&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;/pre>
&lt;ul>
&lt;li>Get the value.&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">str&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">split&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">];
}
&lt;/span>&lt;/pre>
&lt;p>We're ready. Let's see what we can do to make these functions work together.&lt;/p>
&lt;h3 id="natural-composition">Natural composition&lt;/h3>
&lt;p>I've already mentioned that our first try would be direct, the functions are ready and now the only thing we need to do is execute them in sequence.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">search_host&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">get_env&lt;/span>&lt;span style="color:#5fb3b3;">()));
&lt;/span>&lt;/pre>
&lt;p>This is the perfect setup for function composition, the output of a function becomes the input of the next one, which is the same thing the &lt;code>|&lt;/code> symbol does in &lt;code>bash&lt;/code>. But unlike &lt;code>bash&lt;/code>, in here the data flow goes from right to left.&lt;/p>
&lt;p>Now let's imagine that we have two more functions that do something with the value of &lt;code>HOST&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">test&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">ping&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">search_host&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">get_env&lt;/span>&lt;span style="color:#5fb3b3;">()))));
&lt;/span>&lt;/pre>
&lt;p>Okay, now things are starting to get a little awkward, it's still on a manageable level but the amount of parenthesis in it bothers me. This would be the perfect time to put all those things in a function and group them in a more readable way but let's not do that yet, first we get help.&lt;/p>
&lt;h3 id="automatic-composition">Automatic composition&lt;/h3>
&lt;p>This is where our new found knowledge about functions starts being useful. To solve our parenthesis problem we are going to &amp;quot;automate&amp;quot; the function calls, we'll make a function that takes a list of functions, calls them one by one and makes sure the output of one becomes the input of the next. &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">fns&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function &lt;/span>&lt;span style="color:#6699cc;">_composed&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">args&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// Index of the last function
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">last &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">- &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#5f6364;">// Call the last function
// with arguments of `_composed`
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">current_value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">last&lt;/span>&lt;span style="color:#5fb3b3;">--](...&lt;/span>&lt;span style="color:#cccece;">args&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// loop through the rest in the opposite direction
&lt;/span>&lt;span style="color:#c594c5;">for &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">i &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">last&lt;/span>&lt;span style="color:#5fb3b3;">; &lt;/span>&lt;span style="color:#cccece;">i &lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;= &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">; &lt;/span>&lt;span style="color:#cccece;">i&lt;/span>&lt;span style="color:#5fb3b3;">--) {
&lt;/span>&lt;span style="color:#cccece;">current_value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">i&lt;/span>&lt;span style="color:#5fb3b3;">](&lt;/span>&lt;span style="color:#cccece;">current_value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">current_value&lt;/span>&lt;span style="color:#5fb3b3;">;
};
}
&lt;/span>&lt;/pre>
&lt;p>Now we can do this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">search_host&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">get_env&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// get_host is `_composed`
&lt;/span>&lt;span style="color:#6699cc;">get_host&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;/pre>
&lt;p>Our parenthesis problem is gone, we can add more functions without hurting the readability.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">test&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">ping&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">search_host&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">get_env
&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">get_host&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;/pre>
&lt;p>Just like in our first try, in here the data flows from right to left. If you want to flip the order you'd do it like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">fns&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function &lt;/span>&lt;span style="color:#6699cc;">_piped&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">args&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// call the first function
// with the arguments of `_piped`
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">current_value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">](...&lt;/span>&lt;span style="color:#cccece;">args&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// loop through the rest in the original order
&lt;/span>&lt;span style="color:#c594c5;">for &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">i &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">; &lt;/span>&lt;span style="color:#cccece;">i &lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt; &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length&lt;/span>&lt;span style="color:#5fb3b3;">; &lt;/span>&lt;span style="color:#cccece;">i&lt;/span>&lt;span style="color:#5fb3b3;">++) {
&lt;/span>&lt;span style="color:#cccece;">current_value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">i&lt;/span>&lt;span style="color:#5fb3b3;">](&lt;/span>&lt;span style="color:#cccece;">current_value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">current_value&lt;/span>&lt;span style="color:#5fb3b3;">;
};
}
&lt;/span>&lt;/pre>
&lt;p>Behold.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">get_env&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">search_host&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">get_host&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;/pre>
&lt;p>All of this is great, but like I said before what we got here is the perfect setup. Our composition can only handle functions that take one parameter, and doesn't support flow control. That's not a bad thing, we should design our code so we can make this kind of composition more common but as we all know...&lt;/p>
&lt;h3 id="it-s-not-always-easy">It's not always easy&lt;/h3>
&lt;p>Even in our example the only reason we were able to compose those functions was because we included everything we needed inside in the code, and we completely ignored the error handling. But not all is lost, there are ways to get over the limitations.&lt;/p>
&lt;p>Before we move on I would like to change the example code, I'll make it look more like the &lt;code>bash&lt;/code> implementation.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">fs &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">require&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fs&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">filepath&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">fs&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">readFileSync&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">filepath&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">utf-8&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">pattern&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">content&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exp &lt;/span>&lt;span style="color:#5fb3b3;">= new &lt;/span>&lt;span style="color:#fac863;">RegExp&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">pattern&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">lines &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">content&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">split&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;\n&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">lines&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">find&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">line &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">exp&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">test&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">line&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#f99157;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">fields &lt;/span>&lt;span style="color:#5fb3b3;">}, &lt;/span>&lt;span style="color:#f99157;">str&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">split&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">)[&lt;/span>&lt;span style="color:#cccece;">fields &lt;/span>&lt;span style="color:#5fb3b3;">- &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">];
}
&lt;/span>&lt;/pre>
&lt;p>They are not exactly like their &lt;code>bash&lt;/code> counterparts but they do the job. But now if we wanted to put them together it would have to be like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({&lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">}, &lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)));
&lt;/span>&lt;/pre>
&lt;p>It works but I'd say that is barely acceptable, I can still understand what is going on but I wouldn't want to add a single thing to that chain. If we want to use &lt;code>pipe&lt;/code> we'll have to overcome our first obstacle.&lt;/p>
&lt;h4 id="functions-with-multiple-inputs">Functions with multiple inputs&lt;/h4>
&lt;p>The solution to this is &lt;strong>partial application&lt;/strong> and lucky for us javascript has a great support for the things we want to do. Our goal is simple, we are going to pass some of the parameters a function needs but without calling it. We want to be able to do this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;),
&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">})
);
&lt;/span>&lt;span style="color:#6699cc;">get_host&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;/pre>
&lt;p>To make this possible we are going to rely on a technique called &lt;strong>currying&lt;/strong>, this consists on turning a multiple parameter function into several one parameter functions. The way we do this is by taking one parameter at a time, just keep returning functions until we get everything we need. We will do this to &lt;code>grep&lt;/code> and &lt;code>cut&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> function grep(pattern, content) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> function grep(pattern) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> return function(content) {
&lt;/span>&lt;span style="color:#cccece;"> const exp = new RegExp(pattern);
const lines = content.split(&amp;#39;\n&amp;#39;);
return lines.find(line =&amp;gt; exp.test(line));
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> }
&lt;/span>&lt;span style="color:#cccece;"> }
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> function cut({ delimiter, fields }, str) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> function cut({ delimiter, fields }) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> return function(str) {
&lt;/span>&lt;span style="color:#cccece;"> return str.split(delimiter)[fields - 1];
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> }
&lt;/span>&lt;span style="color:#cccece;"> }
&lt;/span>&lt;/pre>
&lt;p>In situations where is not possible to make a normal function support currying we can use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">bind&lt;/a> method in the &lt;code>Function&lt;/code> prototype.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">grep&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;),
&lt;/span>&lt;span style="color:#cccece;">cut&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, { &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">})
);
&lt;/span>&lt;/pre>
&lt;p>Lastly, if everything else looks too complex you always have the possibility to create an arrow function inline.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#f99157;">content &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">content&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#f99157;">str &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">}, &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">)
);
&lt;/span>&lt;/pre>
&lt;p>That should be enough to solve any kind of problem you face when you deal with multiple parameters. Let's move on.&lt;/p>
&lt;h4 id="functions-with-multiple-outputs">Functions with multiple outputs&lt;/h4>
&lt;p>Multiple outputs? I mean functions whose return value can have more than one type. This happens when we have functions that respond differently depending on how we use them or in what context. We have that kind of functions in our example. Let's take a look at &lt;code>cat&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">filepath&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">fs&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">readFileSync&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">filepath&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">utf-8&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
}
&lt;/span>&lt;/pre>
&lt;p>Inside &lt;code>cat&lt;/code> we have &lt;code>readFileSync&lt;/code>, that's the one that reads the file in our system, an action that can fail for many reasons. It means that &lt;code>cat&lt;/code> can return a &lt;code>String&lt;/code> if everything goes well but can also throw an error if anything goes wrong. We need to handle both cases.&lt;/p>
&lt;p>Unfortunately for us exceptions are not the only thing we need to worry about, we also need to deal with the absence of values. In &lt;code>grep&lt;/code> we have this line.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">lines&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">find&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">line &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">exp&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">test&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">line&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;/pre>
&lt;p>The &lt;code>find&lt;/code> method is the one that evaluates each line of the file. As you can imagine that can fail, maybe it just doesn't find what we are looking for. Unlike &lt;code>readFileSync&lt;/code>, &lt;code>find&lt;/code> doesn't throw an error, it just returns &lt;code>undefined&lt;/code>. It's not like &lt;code>undefined&lt;/code> is bad, it's that we don't have any use for it. Assuming that the result will always be a &lt;code>String&lt;/code> is what can cause an error.&lt;/p>
&lt;p>How do we handle all this?&lt;/p>
&lt;p>&lt;strong>Functors&lt;/strong> &amp;amp;&amp;amp; &lt;strong>Monads&lt;/strong> (sorry for the big words). Giving an appropiate explanation of those two would take too much time so we are just going to focus on the practical aspects. For the time being you can think of them as data types that need to obey some laws (you can find some of them here: &lt;a href="https://github.com/fantasyland/fantasy-land#fantasy-land-specification">Fantasy land&lt;/a>).&lt;/p>
&lt;p>Where do we start? With functors.&lt;/p>
&lt;ul>
&lt;li>Functors&lt;/li>
&lt;/ul>
&lt;p>Let's create a data type that is capable of calling a function in the right context at the right time. You have seen one before: arrays. Try this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">add_one &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">number &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">41&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">empty &lt;/span>&lt;span style="color:#5fb3b3;">= [];
&lt;/span>&lt;span style="color:#cccece;">number&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [42]
&lt;/span>&lt;span style="color:#cccece;">empty&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; []
&lt;/span>&lt;/pre>
&lt;p>See? &lt;code>map&lt;/code> called &lt;code>add_one&lt;/code> just once, on the &lt;code>number&lt;/code> array. It didn't do anything on the &lt;code>empty&lt;/code> array, didn't halt the execution of the script by throwing an error, it just returned an array. That's the behavior that we want.&lt;/p>
&lt;p>We will make that on our own. Let's create a data type called &lt;code>Result&lt;/code>, it will represent an action that may or may not be successful. It will have a &lt;code>map&lt;/code> method that will only execute the provided callback when the action had the expected outcome.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">Result &lt;/span>&lt;span style="color:#5fb3b3;">= {};
&lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Ok &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Ok&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)),
};
}
&lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Err &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Err&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">),
};
}
&lt;/span>&lt;/pre>
&lt;p>We have our functor but now you might be wondering is that it? How does that help? We are taking it one step at a time. Let's use it with &lt;code>cat&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">filepath&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">try &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Ok&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fs&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">readFileSync&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">filepath&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">utf-8&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
} &lt;/span>&lt;span style="color:#c594c5;">catch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">e&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Err&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">e&lt;/span>&lt;span style="color:#5fb3b3;">);
}
}
&lt;/span>&lt;/pre>
&lt;p>What do we gain with this? Give it a chance.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;).&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>You still have the same question on your mind, I can see it. Now try to add the other functions.&lt;/p>
&lt;blockquote>
&lt;p>Note: I'm going to assume that you can use currying to achieve partial application.&lt;/p>
&lt;/blockquote>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">}))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>See that? That chain of &lt;code>map&lt;/code>s looks a lot like &lt;code>compose&lt;/code> or &lt;code>pipe&lt;/code>. We did it, we got our composition back, and now with error handling (kinda).&lt;/p>
&lt;p>I want to do something. That pattern, the one with the &lt;code>try/catch&lt;/code>, I want to put that in a function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">make_safe &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">args&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">try &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Ok&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#cccece;">args&lt;/span>&lt;span style="color:#5fb3b3;">));
} &lt;/span>&lt;span style="color:#c594c5;">catch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">e&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Err&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">e&lt;/span>&lt;span style="color:#5fb3b3;">);
}
}
}
&lt;/span>&lt;/pre>
&lt;p>Now we can transform &lt;code>cat&lt;/code> without even touching its code.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">safer_cat &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">make_safe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">}))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>You may want to do something in case something goes wrong, right? Let's make that possible.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const Result = {};
Result.Ok = function(value) {
return {
map: fn =&amp;gt; Result.Ok(fn(value)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> catchMap: () =&amp;gt; Result.Ok(value),
&lt;/span>&lt;span style="color:#cccece;"> };
}
Result.Err = function(value) {
return {
map: () =&amp;gt; Result.Err(value),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> catchMap: fn =&amp;gt; Result.Err(fn(value)),
&lt;/span>&lt;span style="color:#cccece;"> };
}
&lt;/span>&lt;/pre>
&lt;p>Now we can make mistakes and be confident we are doing something about it.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">safer_cat &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">make_safe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">show_error &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">e &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">error&lt;/span>&lt;span style="color:#5fb3b3;">(`&lt;/span>&lt;span style="color:#99c794;">Whoops:&lt;/span>&lt;span style="color:#5fb3b3;">\n${&lt;/span>&lt;span style="color:#cccece;">e&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">message&lt;/span>&lt;span style="color:#5fb3b3;">}`);
&lt;/span>&lt;span style="color:#6699cc;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">what?&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">}))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">catchMap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">show_error&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Yes, I know, all of this is cute and useful but at some point you'll want to take the value out of the &lt;code>Result&lt;/code>. I get it, javascript is not a language where this pattern is a common thing, you may want to go &amp;quot;back to normal&amp;quot;. Let's add a function that can let us extract the value out in either case.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const Result = {};
Result.Ok = function(value) {
return {
map: fn =&amp;gt; Result.Ok(fn(value)),
catchMap: () =&amp;gt; Result.Ok(value),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> cata: (error, success) =&amp;gt; success(value)
&lt;/span>&lt;span style="color:#cccece;"> };
}
Result.Err = function(value) {
return {
map: () =&amp;gt; Result.Err(value),
catchMap: fn =&amp;gt; Result.Err(fn(value)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> cata: (error, success) =&amp;gt; error(value)
&lt;/span>&lt;span style="color:#cccece;"> };
}
&lt;/span>&lt;/pre>
&lt;p>With this we can choose what to do at the end of every action.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">constant &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">identity &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">what?&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">}))
.&lt;/span>&lt;span style="color:#6699cc;">cata&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">constant&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">This ain&amp;#39;t right&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;), &lt;/span>&lt;span style="color:#cccece;">identity&lt;/span>&lt;span style="color:#5fb3b3;">)
&lt;/span>&lt;span style="color:#5f6364;">// ....
&lt;/span>&lt;/pre>
&lt;blockquote>
&lt;p>Note: If you're asking why &lt;code>cata&lt;/code>, it comes from &lt;strong>catamorphism&lt;/strong>, another one of those terms people use in functional programming.&lt;/p>
&lt;/blockquote>
&lt;p>Now let's create a data type that can handle the problem we have with &lt;code>grep&lt;/code>. In this case what we want to do is handle the absence of a value.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">Maybe &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value &lt;/span>&lt;span style="color:#5fb3b3;">== &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">();
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Just&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Just &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Just&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#6699cc;">catchMap&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Just&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">cata&lt;/span>&lt;span style="color:#5fb3b3;">: (&lt;/span>&lt;span style="color:#f99157;">nothing&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">just&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">just&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)
};
}
&lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Nothing &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">(),
&lt;/span>&lt;span style="color:#6699cc;">catchMap&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(),
&lt;/span>&lt;span style="color:#6699cc;">cata&lt;/span>&lt;span style="color:#5fb3b3;">: (&lt;/span>&lt;span style="color:#f99157;">nothing&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">just&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">nothing&lt;/span>&lt;span style="color:#5fb3b3;">()
};
}
&lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">wrap_fun &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">args&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#cccece;">args&lt;/span>&lt;span style="color:#5fb3b3;">));
}
}
&lt;/span>&lt;/pre>
&lt;p>We're going to use it to wrap &lt;code>grep&lt;/code> with a &lt;code>Maybe&lt;/code>, to test this we'll use the original &lt;code>cat&lt;/code> to take the content from the file.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">maybe_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">wrap_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;span style="color:#6699cc;">maybe_host&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">catchMap&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">Nothing()&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;/pre>
&lt;p>That should show &lt;code>http://localhost:5000&lt;/code>. And if we change the pattern &lt;code>^HOST=&lt;/code> it should show &lt;code>Nothing()&lt;/code>.&lt;/p>
&lt;p>So, we created safer versions of &lt;code>cat&lt;/code> and &lt;code>grep&lt;/code> but you should see what happens when they get together.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">maybe_host&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">res &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#cccece;">res &lt;/span>&lt;span style="color:#5fb3b3;">}));
.&lt;/span>&lt;span style="color:#6699cc;">catchMap&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">what?&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
&lt;/span>&lt;/pre>
&lt;p>You get this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">{
res: {
map: [Function: map],
catchMap: [Function: catchMap],
cata: [Function: cata]
}
}
&lt;/span>&lt;/pre>
&lt;p>Wait, what's happening? Well, we have a &lt;code>Maybe&lt;/code> trapped inside a &lt;code>Result&lt;/code>. Maybe you didn't see that one coming but other people did, and they have the solution.&lt;/p>
&lt;ul>
&lt;li>Monads&lt;/li>
&lt;/ul>
&lt;p>It turns out that monads are functors with extra powers. The thing we care about right now is that they solve the nesting issue. Let's make some adjustments.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> Result.Ok = function(value) {
return {
map: fn =&amp;gt; Result.Ok(fn(value)),
catchMap: () =&amp;gt; Result.Ok(value),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> flatMap: fn =&amp;gt; fn(value),
&lt;/span>&lt;span style="color:#cccece;"> cata: (error, success) =&amp;gt; success(value)
};
}
Result.Err = function(value) {
return {
map: () =&amp;gt; Result.Err(value),
catchMap: fn =&amp;gt; Result.Err(fn(value)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> flatMap: () =&amp;gt; Result.Err(value),
&lt;/span>&lt;span style="color:#cccece;"> cata: (error, success) =&amp;gt; error(value)
};
}
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> Maybe.Just = function(value) {
return {
map: fn =&amp;gt; Maybe.Just(fn(value)),
catchMap: () =&amp;gt; Maybe.Just(value),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> flatMap: fn =&amp;gt; fn(value),
&lt;/span>&lt;span style="color:#cccece;"> cata: (nothing, just) =&amp;gt; just(value),
};
}
Maybe.Nothing = function() {
return {
map: () =&amp;gt; Maybe.Nothing(),
catchMap: fn =&amp;gt; fn(),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> flatMap: () =&amp;gt; Maybe.Nothing(),
&lt;/span>&lt;span style="color:#cccece;"> cata: (nothing, just) =&amp;gt; nothing(),
};
}
&lt;/span>&lt;/pre>
&lt;p>The &lt;code>flatMap&lt;/code> method behaves just like &lt;code>map&lt;/code> but with the added benefit that it lets us get rid of those extra &amp;quot;layers&amp;quot; that mess around with our composition. Make sure to use &lt;code>flatMap&lt;/code> with functions that return other monads because this is not the safest implementation.&lt;/p>
&lt;blockquote>
&lt;p>Note: Yes, arrays are also monads. They have a &lt;code>map&lt;/code> method and &lt;code>flatMap&lt;/code> method and they obey all the laws.&lt;/p>
&lt;/blockquote>
&lt;p>Let's test &lt;code>maybe_host&lt;/code> again.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> &lt;/span>&lt;span style="color:#6699cc;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">flatMap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">maybe_host&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">res &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#cccece;">res &lt;/span>&lt;span style="color:#5fb3b3;">}));
.&lt;/span>&lt;span style="color:#6699cc;">catchMap&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">what?&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
&lt;/span>&lt;/pre>
&lt;p>That should give us.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">{ res: &amp;#39;HOST=http://localhost:5000&amp;#39; }
&lt;/span>&lt;/pre>
&lt;p>We're ready to compose everything back together.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">safer_cat &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">make_safe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">maybe_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">wrap_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">wrap_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({&lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">}));
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">flatMap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">maybe_host&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">flatMap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">cata&lt;/span>&lt;span style="color:#5fb3b3;">(
() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">http://127.0.0.1:3000&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;,
&lt;/span>&lt;span style="color:#f99157;">host &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">host
&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// ....
&lt;/span>&lt;/pre>
&lt;p>And if we want to use &lt;code>pipe&lt;/code> or &lt;code>compose&lt;/code>?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">chain &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#f99157;">m &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">m&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">flatMap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fn&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">unwrap_or &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">fallback &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#f99157;">fm &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt;
&lt;/span>&lt;span style="color:#cccece;">fm&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">cata&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">fallback&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">safer_cat &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">make_safe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">maybe_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">wrap_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">wrap_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({&lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">}));
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">chain&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">maybe_host&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">chain&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">http://127.0.0.1:3000&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
);
&lt;/span>&lt;span style="color:#6699cc;">get_host&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;/pre>
&lt;p>You can check out the whole code here: &lt;a href="https://gist.github.com/VonHeikemen/0e6d4950bfe91229ee06eee2e3c74515">link&lt;/a>.&lt;/p>
&lt;h2 id="still-want-to-learn-more">Still want to learn more?&lt;/h2>
&lt;p>There are many things that I didn't mention because it would take too much time but if you want to learn more about it, I have prepare some material.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/web-development/learn-fp/partial-application/">Partial application&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/web-development/learn-fp/the-power-of-map/">About Functors&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/web-development/learn-fp/using-a-maybe/">Using a Maybe&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/web-development/learn-fp/dealing-with-side-effects-and-pure-functions/">Pure functions and side effects&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>A lot of people talk about the nice things about composition, how it makes code more declarative and clean, but they never show you the tough parts. I hope I've done that, show the tough parts and how to overcome them. Composing functions it's truly an art, it takes practice and time to get use to some ideas (like the idea of functions being things).&lt;/p>
&lt;h2 id="sources">Sources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=vDe-4o8Uwl8">The Power of Composition (video)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=SfWR3dKnFIo">Oh Composable World! (video)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=7BsfMMYvGaU">Mary had a little lambda (video)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dev.to/joelnet/functional-javascript---functors-monads-and-promises-1pol">Functional JavaScript - Functors, Monads, and Promises&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Functional programming for your everyday javascript: Partial application</title><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/web-development/learn-fp/partial-application/</link><guid>https://vonheikemen.github.io/devlog/web-development/learn-fp/partial-application/</guid><description>&lt;p>Today we are here to solve a mystery, the mystery of why some people choose to create functions that take a callback as the first argument. You might be thinking that the answer is partial application and you would be half right, but partial application is just the means to an end, the real reason to do such a thing is to enable a &amp;quot;better&amp;quot; function composition. But before we get into details of partial application let's explore how we do things now.&lt;/p>
&lt;h2 id="how-we-do-things">How we do things&lt;/h2>
&lt;p>When we create a function we usually sort the arguments by some kind of importance/priority level, where the most important goes first. As a result, when we create a function that works on a piece of data it becomes the first thing on the list, it's followed by less important configuration arguments and the last thing are optional arguments that we can omit. &lt;/p>
&lt;p>Say that we want to create a function that picks specific properties from a plain object. Let's think of what we need. The object, that was your first thought? It's natural, you don't want to omit it by accident when you call the function. That leaves the keys that we are going to choose as the last argument.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">keys&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= {};
&lt;/span>&lt;span style="color:#c594c5;">for&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">key of keys&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">] = &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">];
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;blockquote>
&lt;p>Note: We are not the only ones that think like this, check out &lt;a href="https://lodash.com/docs/#pick">lodash pick&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Now, say that we have a &lt;code>user&lt;/code> object and we want to hide any &amp;quot;sensitive&amp;quot; data. We would use it like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">user &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#cccece;">id&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">7&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Tom&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Keen&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">email&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">noreply@example.com&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">password&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">hudson&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;
};
&lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#5f6364;">// { name: &amp;quot;Tom&amp;quot;, lastname: &amp;quot;Keen&amp;quot; }
&lt;/span>&lt;/pre>
&lt;p>That works great, but what happens when we need to work with an array of users? &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">users &lt;/span>&lt;span style="color:#5fb3b3;">= [
{
&lt;/span>&lt;span style="color:#cccece;">id&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">7&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Tom&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Keen&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">email&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">noreply@example.com&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">password&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">hudson&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;
},
{
&lt;/span>&lt;span style="color:#cccece;">id&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">30&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Smokey&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Putnum&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">email&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">noreply@example.com&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">password&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">carnival&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;
},
{
&lt;/span>&lt;span style="color:#cccece;">id&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">69&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Lady&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Luck&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">email&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">noreply@example.com&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">password&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">norestforthewicked&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;
}
];
&lt;/span>&lt;/pre>
&lt;p>We are force to iterate over the array and apply the function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">user&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
});
&lt;/span>&lt;span style="color:#5f6364;">/*
[
{&amp;quot;name&amp;quot;: &amp;quot;Tom&amp;quot;, &amp;quot;lastname&amp;quot;: &amp;quot;Keen&amp;quot;},
{&amp;quot;name&amp;quot;: &amp;quot;Smokey&amp;quot;, &amp;quot;lastname&amp;quot;: &amp;quot;Putnum&amp;quot;},
{&amp;quot;name&amp;quot;: &amp;quot;Lady&amp;quot;, &amp;quot;lastname&amp;quot;: &amp;quot;Luck&amp;quot;}
]
*/
&lt;/span>&lt;/pre>
&lt;p>Is not that bad. And you know what? That callback actually looks useful. We could put it in another place and give it a name.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">user&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
}
&lt;/span>&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>What is actually happening? What we do here is bind the second argument to the function with the value &lt;code>['name', 'lastname']&lt;/code> and force &lt;code>pick&lt;/code> to wait for the user data to be executed. &lt;/p>
&lt;p>Now let's take this example one step further, pretend that &lt;code>Async/Await&lt;/code> doesn't exists and that the &lt;code>users&lt;/code> array comes from a &lt;code>Promise&lt;/code>, maybe an http requests using &lt;code>fetch&lt;/code>. What do we do?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">users&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">user&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
})
});
&lt;/span>&lt;/pre>
&lt;p>Now that is bad. Maybe some arrow functions can make it better?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">users &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">user &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;])));
&lt;/span>&lt;/pre>
&lt;p>Is it better? A question for another day. We prepared for this, we have the &lt;code>public_info&lt;/code> function let's use it.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">users &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;/pre>
&lt;p>This is acceptable, I like it. If we wanted we could make another function that binds &lt;code>public_info&lt;/code> to &lt;code>.map&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">user_list&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">users&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>So now we get.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user_list&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Let's see everything we needed for that.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">keys&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// code...
&lt;/span>&lt;span style="color:#5fb3b3;">}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">user&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">user_list&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">users&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user_list&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>What if I told you that we can create &lt;code>public_info&lt;/code> and &lt;code>user_list&lt;/code> in another way? What if we could have this?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">public_info &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">user_list &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user_list&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Or put everything inline if that is your jam.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;])));
&lt;/span>&lt;/pre>
&lt;p>We can have it but first we'll need to change the way we think about functions a little bit. &lt;/p>
&lt;h2 id="thinking-differently">Thinking differently&lt;/h2>
&lt;p>Instead of thinking of priority we should start thinking in dependencies and data. When you're creating a function just ask yourself, out of all this arguments what is the most likely to change? Put that as your last argument.&lt;/p>
&lt;p>Let's make a function that takes the first elements of something. What do we need? We need that &amp;quot;something&amp;quot; and also the number of elements we are going to take. Of those two, which is most likely to change? It's the data, that &amp;quot;something&amp;quot;.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">take&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">count&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">slice&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">count&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>In a normal situation you would use it like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">take&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">first&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">second&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">rest&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#5f6364;">// [&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;]
&lt;/span>&lt;/pre>
&lt;p>But with a little bit of magic (which will be revealed soon) you can reuse it like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">first_two &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">take&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">first_two&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">first&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">second&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">rest&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>This way ordering your arguments gets even more convenient when callbacks are involved. Let's &amp;quot;reverse&amp;quot; &lt;code>Array.filter&lt;/code> arguments and see what we can do.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">func&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">func&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>We start simple, exclude falsey values from an array.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">, [&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [ true, &amp;quot;that&amp;quot; ]
&lt;/span>&lt;/pre>
&lt;p>That's good and it could be better if we add more context.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exclude_falsey &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">exclude_falsey&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>I'm hoping you can see the possibilities that this kind of pattern can provide. There are libraries (like &lt;a href="https://ramdajs.com/docs/">Ramda&lt;/a>) that use this approach to build complex functions by assembling smaller single purpose utilities. &lt;/p>
&lt;p>Enough talking, let's see now how we can do this ourselves.&lt;/p>
&lt;h2 id="this-is-the-way">This is the way&lt;/h2>
&lt;p>Like with everything in javascript you can do this in a million ways, some are more convenient than others, some require a little bit of magic. Let us begin.&lt;/p>
&lt;h3 id="the-built-in-magic-of-bind">The built-in magic of bind&lt;/h3>
&lt;p>Turns out that we don't need to do anything extraordinary to bind values to the arguments of a function because every function has a method called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">bind&lt;/a>. The syntax is not as convenient as the one I showed but it gets close. Another thing that you have to be aware of is that the first argument to &lt;code>Function.bind&lt;/code> is the &amp;quot;context&amp;quot;, that is the value of the keyword &lt;code>this&lt;/code> inside the function. This is the basic usage.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exclude_falsey &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">filter&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">exclude_falsey&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>&lt;h3 id="the-magic-within">The magic within&lt;/h3>
&lt;p>This one requires some work and it involves another enigmatic keyword, the &lt;code>arguments&lt;/code>. What we will do is leverage the fact that &lt;code>arguments&lt;/code> is an array-like structure that has a length, we will count the argument the function gets and if its less than what we want we return another function. Sounds confusing?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">func&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// This is it. We are counting.
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// if .length is 1 that means we got `func`
// it also means we don&amp;#39;t have `data`
// so we return another function that
// remembers `func` and wait for `data`
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">func&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">func&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>Now it is possible to do this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exclude_falsey &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">exclude_falsey&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>And also.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">, [&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>Isn't that nice?&lt;/p>
&lt;h3 id="a-simple-approach">A simple approach?&lt;/h3>
&lt;p>And of course we can also create our bind utility. With the help of the spread operator we can collect arguments and simply apply them to a callback. &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">func&lt;/span>&lt;span style="color:#5fb3b3;">, ...&lt;/span>&lt;span style="color:#f99157;">first_args&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">rest&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">func&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#cccece;">first_args&lt;/span>&lt;span style="color:#5fb3b3;">, ...&lt;/span>&lt;span style="color:#cccece;">rest&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>The first step gets the function and collects a list of arguments into an array, then we return a function that collects another list of arguments and finally call &lt;code>func&lt;/code> with everything.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exclude_falsey &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">filter&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">exclude_falsey&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>The cool thing about this one is that if you flip &lt;code>first_args&lt;/code> with &lt;code>rest&lt;/code> you have a &lt;code>bind_last&lt;/code> function.&lt;/p>
&lt;h3 id="no-more-magic">No more magic&lt;/h3>
&lt;p>I do have mixed feelings about this one but it really is the most simple.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">func&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">func&lt;/span>&lt;span style="color:#5fb3b3;">);
}
}
&lt;/span>&lt;/pre>
&lt;p>Which is equivalent to this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">filter &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">func &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#f99157;">data &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">func&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>The idea is to take one argument at a time in separate functions. Basically, keep returning functions until you have all the arguments you need. This is what people call &amp;quot;currying&amp;quot;. How do you use it?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exclude_falsey &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">exclude_falsey&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>That is one case. This is the other.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">filter &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">) ([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>Notice the extra pair of parenthesis? That's the second function. You'll need one pair for each argument you provide.&lt;/p>
&lt;h3 id="curry-it-for-me">Curry it for me&lt;/h3>
&lt;p>Going back to the subject of magic, you can &amp;quot;automate&amp;quot; the process of currying using a helper function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">curry&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">arity&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// Guess how many arguments
// the function needs.
// This doesn&amp;#39;t always work.
&lt;/span>&lt;span style="color:#cccece;">arity &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fn&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#5f6364;">// Omit `fn` and `arity`, gather the rest
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">rest &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Array&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">prototype&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">slice&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">call&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Do we have what we need?
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">arity &lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;= &lt;/span>&lt;span style="color:#cccece;">rest&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">fn&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">apply&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">rest&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#5f6364;">// Execute `curry.bind` with `fn`, `arity` and `rest` as arguments
// it will return a function waiting for more arguments
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">curry&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">apply&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">curry&lt;/span>&lt;span style="color:#5fb3b3;">, [&lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">arity&lt;/span>&lt;span style="color:#5fb3b3;">, ...&lt;/span>&lt;span style="color:#cccece;">rest&lt;/span>&lt;span style="color:#5fb3b3;">]);
}
&lt;/span>&lt;/pre>
&lt;p>With it you can transform your existing functions or create new ones that support currying from the start.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">curried_filter &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">curry&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">filter&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exclude_falsey &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">curried_filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">exclude_falsey&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>Or.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">filter &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">curry&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">func&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">func&lt;/span>&lt;span style="color:#5fb3b3;">);
});
&lt;/span>&lt;/pre>
&lt;p>That's it folks. Hope you had a good time reading.&lt;/p>
&lt;h2 id="sources">Sources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=m3svKOdZijA">Hey Underscore, You're Doing It Wrong! (video)&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://benalman.com/news/2012/09/partial-application-in-javascript/">Partial Application in JavaScript&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Functional programming for your everyday javascript: The power of map</title><pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/web-development/learn-fp/the-power-of-map/</link><guid>https://vonheikemen.github.io/devlog/web-development/learn-fp/the-power-of-map/</guid><description>&lt;p>This time we are going to take a look inside the world of &lt;code>functors&lt;/code> and what makes them so special. Functors is one of those terms that you hear every now and then when people talk about functional programming but when the time comes to explain it they either bombard you with more abstract terms or tell you just the details you need to know. Since I have no knowledge of category theory I'm not going to pretend that I know exactly what a functor is, I'm just going show enough for you to know how you can spot them in the wild and how you can use them to your advantage.&lt;/p>
&lt;h2 id="seriously-what-is-a-functor">Seriously, what is a functor?&lt;/h2>
&lt;p>I'm convinced that the term is difficult to understand because one, you need to some other terms in order to get the whole picture and two, the theory behind it doesn't really translate very well in code. But it wouldn't hurt to have at least a clue of what they are.&lt;/p>
&lt;p>You can think of them as a relation that exist between two sets of values. I know it's vague, this will make sense in a second. Say we have two arrays.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">favorite_numbers &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">69&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">73&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">increased_numbers &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">43&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">70&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">74&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;/pre>
&lt;p>Nice, we have a set &lt;code>favorite_numbers&lt;/code> and a set &lt;code>increased_numbers&lt;/code>, they are two separate arrays in different variables but we all know that there is a connection between those two, but more importantly we can express that connection with code. Imagine that the array &lt;code>increased_numbers&lt;/code> doesn't exist but we still need those numbers, to make them appear again all we need is our good old friend &lt;code>map&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">increased_numbers &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">favorite_numbers&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>&lt;code>map&lt;/code> will go through every number, increase it and put it in a new array which brings &lt;code>increased_numbers&lt;/code> back into existence. Even though &lt;code>increased_numbers&lt;/code> is something we made, we didn't create it out nowhere, we didn't magically invent &lt;code>43&lt;/code>, &lt;code>70&lt;/code> and &lt;code>74&lt;/code>. All we did was describe a relation between those numbers and our &lt;code>favorite_numbers&lt;/code>.&lt;/p>
&lt;p>So, is that the whole history? Are functors just arrays? The answer to that is a big no. Arrays are just a freakishly convenient way to illustrate a common use of functors. This leaves a question in the air.&lt;/p>
&lt;h2 id="how-do-you-recognize-them">How do you recognize them?&lt;/h2>
&lt;p>I often hear other people describing functors as boxes. I for one don't think they're wrong because using a container data structure is one of easiest ways to implement a functor. The box analogy is specially funny 'cause in javascript we use brackets to create arrays, so you can actually create a functor by putting a value in a box. See.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// A value
&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#5f6364;">// A box
&lt;/span>&lt;span style="color:#5fb3b3;">[];
&lt;/span>&lt;span style="color:#5f6364;">// Look, a value in a box.
&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#5f6364;">// I regret nothing.
&lt;/span>&lt;/pre>
&lt;p>Going back to the original question, how do we recognize them? Okay, so it turns out that there are rules.&lt;/p>
&lt;h3 id="da-rules">Da rules&lt;/h3>
&lt;p>Again I'll be using array of numbers just because is convenient but this rules must apply to any structure that wants to be in the functor club.&lt;/p>
&lt;h4 id="identity">Identity&lt;/h4>
&lt;p>Given the &lt;code>identity&lt;/code> function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">identity&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">x&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">x&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>&lt;code>value&lt;/code> and &lt;code>value.map(identity)&lt;/code> must be equivalent.&lt;/p>
&lt;p>For example.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">]; &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [1,2,3]
&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">].&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">identity&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [1,2,3]
&lt;/span>&lt;/pre>
&lt;p>Why is this important? What does this tell us?&lt;/p>
&lt;p>Valid questions. This tells us that the &lt;code>map&lt;/code> function must preserve the shape of the data structure. In our example, if we map an array of three elements we must receive a new array of three elements. If we had an array of a hundred elements, using &lt;code>.map(identity)&lt;/code> should return an array of a hundred elements. You get the point.&lt;/p>
&lt;h4 id="composition">Composition&lt;/h4>
&lt;p>Given two functions &lt;code>fx&lt;/code> and &lt;code>gx&lt;/code> the following must be true.&lt;/p>
&lt;p>&lt;code>value.map(fx).map(gx)&lt;/code> and &lt;code>value.map(arg =&amp;gt; gx(fx(arg)))&lt;/code> must be equivalent.&lt;/p>
&lt;p>Example time.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">* &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">;
}
[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">].&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [4]
&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">].&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">num&lt;/span>&lt;span style="color:#5fb3b3;">))); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [4]
&lt;/span>&lt;/pre>
&lt;p>If you know how &lt;code>Array.map&lt;/code> works this feels like 'well duh!'. This actually gives you a chance to optimize your code for readability or performance. In the case of arrays, multiple calls to &lt;code>map&lt;/code> can have a big impact on performance when the number of elements in the list grows.&lt;/p>
&lt;p>And that's it. Those two rules are all you need to know to spot a functor.&lt;/p>
&lt;h2 id="does-it-always-has-to-be-map">Does it always has to be .map?&lt;/h2>
&lt;p>I guess by now you wish to know what other things out there follow those rules that I just mentioned, if not I'll tell you anyway. There is another popular structure that also follows the rules and that is &lt;code>Promise&lt;/code>. Let's see.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// A value
&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#5f6364;">// A box
&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">resolve&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#5f6364;">// Look, a value in a box
&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">resolve&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Identity rule
&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">resolve&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">identity&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 1 (in the future)
// Composition
&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">resolve&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 4
&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">resolve&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">num&lt;/span>&lt;span style="color:#5fb3b3;">))); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 4
&lt;/span>&lt;/pre>
&lt;p>To be fair, &lt;code>Promise.then&lt;/code> behaves more like &lt;code>Array.flatMap&lt;/code> than &lt;code>Array.map&lt;/code> but we will ignore that.&lt;/p>
&lt;p>Fine, we have &lt;code>Array&lt;/code> and we have &lt;code>Promise&lt;/code> both are containers of some sort and both have methods that follow the rules. But what if they didn't have those methods, what if &lt;code>Array.map&lt;/code> didn't exist? Would that mean that &lt;code>Array&lt;/code> is no longer a functor? Do we lose all the benefits?&lt;/p>
&lt;p>Let's take a step back. If &lt;code>Array.map&lt;/code> doesn't exists then &lt;code>Array&lt;/code> is no longer a functor? I don't know, I'm not an FP lawyer. Do we lose all the benefits? No, we could still treat arrays as functors, we just lose the super convenient &lt;code>.map&lt;/code> syntax. We can create our own &lt;code>map&lt;/code> outside of the structure.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">List &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">arr&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= [];
&lt;/span>&lt;span style="color:#c594c5;">for &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">data &lt;/span>&lt;span style="color:#5fb3b3;">of &lt;/span>&lt;span style="color:#cccece;">arr&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">push&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
};
&lt;/span>&lt;/pre>
&lt;p>See? Is not that bad. And it works.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Identity rule
&lt;/span>&lt;span style="color:#fac863;">List&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">identity&lt;/span>&lt;span style="color:#5fb3b3;">, [&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">]); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [1]
// Composition
&lt;/span>&lt;span style="color:#fac863;">List&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#fac863;">List&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">, [&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">])); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [4]
&lt;/span>&lt;span style="color:#fac863;">List&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">num&lt;/span>&lt;span style="color:#5fb3b3;">)), [&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">]); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [4]
&lt;/span>&lt;/pre>
&lt;p>Are you thinking what I'm thinking? Probably not. This is what I'm thinking, if we can map arrays without a &lt;code>.map&lt;/code> then nothing can stop us from doing the same thing with plain objects, because after all, objects can also hold sets of values.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">Obj &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">ob&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= {};
&lt;/span>&lt;span style="color:#c594c5;">for &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">] of &lt;/span>&lt;span style="color:#fac863;">Object&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">entries&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">ob&lt;/span>&lt;span style="color:#5fb3b3;">)) {
&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">] = &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
};
&lt;/span>&lt;span style="color:#5f6364;">// Why stop at `map`?
// Based on this you can also create a `filter` and `reduce`
&lt;/span>&lt;/pre>
&lt;p>Let's see it.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Identity rule
&lt;/span>&lt;span style="color:#fac863;">Obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">identity&lt;/span>&lt;span style="color:#5fb3b3;">, {&lt;/span>&lt;span style="color:#6699cc;">some&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">}); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; {some: 1, prop: 2}
// Composition
&lt;/span>&lt;span style="color:#fac863;">Obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#fac863;">Obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">, {&lt;/span>&lt;span style="color:#6699cc;">some&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">})); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; {some: 4, prop: 6}
&lt;/span>&lt;span style="color:#fac863;">Obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">num&lt;/span>&lt;span style="color:#5fb3b3;">)), {&lt;/span>&lt;span style="color:#6699cc;">some&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">}); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; {some: 4, prop: 6}
&lt;/span>&lt;/pre>&lt;h2 id="do-it-yourself">Do It Yourself&lt;/h2>
&lt;p>All this talk about arrays and plain objects is useful but now I feel like we know enough to make our own functor, the rules seem to be very simple. Let's do something vaguely useful. Have you ever heard of Observables? Good, because we are going to something like that. We'll make a simpler version of &lt;a href="https://mithril.js.org/stream.html">mithril-stream&lt;/a>, it'll be fun.&lt;/p>
&lt;p>The goal here to handle a stream of values over time. The API of our utility will be this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Set initial state
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">num_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Create a dependent stream
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">increased &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Get the value from a stream
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 0
// Push a value to the stream
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 42
// The source stream updates
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 42
// The dependent stream also updates
&lt;/span>&lt;span style="color:#6699cc;">increased&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 43
&lt;/span>&lt;/pre>
&lt;p>Let's start with the getter and setter function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">state&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#6699cc;">stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// If we get an argument we update the state
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt; &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">state &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#5f6364;">// return current state
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">stream&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>This should work.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Initial state
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">num_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Get state
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 42
// Update
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">73&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Check
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 73
&lt;/span>&lt;/pre>
&lt;p>We know we want a &lt;code>map&lt;/code> method but what is the effect we want? We want the callback to listen to the changes of the source stream. Let's start with the listener part, we want to store an array of listeners and execute each one right after the state changes.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> function Stream(state) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> let listeners = [];
&lt;/span>&lt;span style="color:#5fb3b3;">+
&lt;/span>&lt;span style="color:#cccece;"> let stream = function(value) {
if(arguments.length &amp;gt; 0) {
state = value;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> listeners.forEach(fn =&amp;gt; fn(value));
&lt;/span>&lt;span style="color:#cccece;"> }
return state;
}
return stream;
}
&lt;/span>&lt;/pre>
&lt;p>Now we go for the &lt;code>map&lt;/code> method, but is not going to be just any method, we need to follow the rules:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Identity: When &lt;code>map&lt;/code> is called it needs to preserve the shape of the structure. This means that we need to return a new stream.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Composition: Calling &lt;code>map&lt;/code> multiple times must be equivalent of composing the callbacks supplied to those &lt;code>map&lt;/code>s.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">state&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">listeners &lt;/span>&lt;span style="color:#5fb3b3;">= [];
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#6699cc;">stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt; &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">state &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#cccece;">listeners&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">forEach&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#fac863;">stream&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// Create new instance with transformed state.
// This will execute the callback when calling `map`
// this might not be what you want if you use a
// function that has side effects. Just beware.
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">target &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#5f6364;">// Transform the value and update stream
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">listener &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">target&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#5f6364;">// Update the source listeners
&lt;/span>&lt;span style="color:#cccece;">listeners&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">push&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">listener&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">target&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">stream&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Let's test the rules. We begin with identity.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Streams are like a cascade
// the first is the most important
// this is the one that triggers all the listeners
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">num_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Create dependent stream
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">identity_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">identity&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// update the source
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Check
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 42
&lt;/span>&lt;span style="color:#6699cc;">identity_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 42
&lt;/span>&lt;/pre>
&lt;p>Now let's check the composition rule.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Create source stream
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">num_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Create dependents
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">map_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">composed_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">num&lt;/span>&lt;span style="color:#5fb3b3;">)));
&lt;/span>&lt;span style="color:#5f6364;">// Update source
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Check
&lt;/span>&lt;span style="color:#6699cc;">map_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 4
&lt;/span>&lt;span style="color:#6699cc;">composed_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 4
&lt;/span>&lt;/pre>
&lt;p>Our job is done. But is this any useful? Can you do something with it? Well yes, you could use it in event handlers to manipulate user input. Like this.&lt;/p>
&lt;p
class="codepen"
data-height="600"
data-theme-id="dark"
data-default-tab="js,result"
data-user="VonHeikemen"
data-slug-hash="dyoMJRw"
data-preview="true"
style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"
data-pen-title="an fmap example">
&lt;span>
See the Pen &lt;a href="https://codepen.io/VonHeikemen/pen/dyoMJRw">an fmap example&lt;/a> by Heiker (&lt;a href="https://codepen.io/VonHeikemen">@VonHeikemen&lt;/a>) on &lt;a href="https://codepen.io">CodePen&lt;/a>.
&lt;/span>
&lt;/p>
&lt;script async src="https://static.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;h3 id="more-examples">More examples&lt;/h3>
&lt;p>I think by now you understand really well what functors do, but if you still want to see more examples you can check out this articles. &lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/web-development/learn-fp/using-a-maybe/">Handling the absence of a value&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/">Handling side effects&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>The only question that remains is &amp;quot;what is the benefit of using functors?&amp;quot;&lt;/p>
&lt;p>I'll do my best here:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>This pattern allows you to focus on one problem at time. The &lt;code>map&lt;/code> function handles how you get the data and in the callback you can focus only on processing the data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Reusability. This style of programming really encourage the creation of single purpose function that a lot of the times can become useful even across projects.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Extensibility through composition. People have mixed feelings about this one, specially if we are talking about arrays. This is another thing that functors encourage, that is using chains of functions to implement a procedure.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="sources">Sources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://dev.to/techgirl1908/why-is-map-called-map-2l03">Why is map called map?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/fantasyland/fantasy-land">Fantasy land&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/fantasyland/static-land">Static land&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/thefrontside/funcadelic.js">funcadelic.js&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/">How to deal with dirty side effects in your pure functional JavaScript&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jrsinclair.com/articles/2020/whats-more-fantastic-than-fantasy-land-static-land/">What’s more fantastic than fantasy land? An Introduction to Static land&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@lettier/your-easy-guide-to-monads-applicatives-functors-862048d61610">Your easy guide to Monads, Applicatives, &amp;amp; Functors&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Dealing with side effects and pure functions in javascript</title><pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/web-development/learn-fp/dealing-with-side-effects-and-pure-functions/</link><guid>https://vonheikemen.github.io/devlog/web-development/learn-fp/dealing-with-side-effects-and-pure-functions/</guid><description>&lt;p>Have you ever heard the term &amp;quot;pure function&amp;quot;? What about &amp;quot;side effects&amp;quot;? If you have then probably you've heard that side effects are evil and should be avoided at all cost (just like &lt;code>var&lt;/code>.) Here is the problem, if you write javascript you probably want to cause those side effects (specially if you get paid to write javascript) So the solution here is not to avoid all the side effects but to control them. I going to show you a few things that you can do to make your pure functions and your side effects get along just fine.&lt;/p>
&lt;p>Before we start let us just do a little recap on some terms, so we can all be in the same page.&lt;/p>
&lt;h2 id="concepts">Concepts&lt;/h2>
&lt;h3 id="pure-function">Pure function&lt;/h3>
&lt;p>For the sake of simplicity let us say that a pure function is a function whose output is only determined by its input and has no observable effect on the outside world. The main benefit they provide (in my opinion) is predictability, if you give them the same input values they will always return you the same output. Lets look at some examples.&lt;/p>
&lt;p>This one is pure.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">increment&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">number&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">number &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>This one isn't&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#fac863;">Math&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">random&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;/pre>
&lt;p>And these are tricky.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">A_CONSTANT &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">increment&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">number&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">number &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#cccece;">A_CONSTANT&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#fac863;">module&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#fac863;">exports &lt;/span>&lt;span style="color:#5fb3b3;">={
&lt;/span>&lt;span style="color:#cccece;">increment
&lt;/span>&lt;span style="color:#5fb3b3;">};
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">a_constant&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">increment&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">number&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">number &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#6699cc;">a_constant&lt;/span>&lt;span style="color:#5fb3b3;">();
}
&lt;/span>&lt;/pre>&lt;h3 id="side-effects">Side effects&lt;/h3>
&lt;p>I will call a side effect to anything that compromises the purity of a function. The list includes but is not limited to:&lt;/p>
&lt;ul>
&lt;li>Changing (mutate) an external variable in any way.&lt;/li>
&lt;li>Showing things in the screen.&lt;/li>
&lt;li>Writing to a file.&lt;/li>
&lt;li>Making an http request.&lt;/li>
&lt;li>Spawn a process.&lt;/li>
&lt;li>Saving data in a database.&lt;/li>
&lt;li>Calling other functions with side-effects.&lt;/li>
&lt;li>DOM manipulation.&lt;/li>
&lt;li>Randomness.&lt;/li>
&lt;/ul>
&lt;p>So, any action that can change the &amp;quot;state of the world&amp;quot; is a side effect.&lt;/p>
&lt;h2 id="how-do-we-use-those-things-together">How do we use those things together?&lt;/h2>
&lt;p>You're probably still thinking about that side effect list, is basically everything javascript is good for and yet some people still tell you to avoid them. Don't fear I come bearing suggestions.&lt;/p>
&lt;h3 id="good-old-function-composition">Good old function composition&lt;/h3>
&lt;p>Another way of saying it will be: good old separation of concerns. This is the non complicated way. If there is a way to break apart a computation from a side effect then put the computation on a function and give the output to the function/block that has the side effect.&lt;/p>
&lt;p>It could be as simple as doing something like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">some_process&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">data &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">get_data_somehow&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">clean_data &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">computation&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">save&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">clean_data&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Now, &lt;code>some_process&lt;/code> still isn't pure but that's okay, we are writing javascript we don't need everything to be pure, what we need is to keep our sanity. By splitting the side effects from the pure computation we have created three independent functions that solve only one problem at a time. You could even take it one step further and use a helper function like &lt;a href="https://ramdajs.com/docs/#pipe">pipe&lt;/a> to get rid of those intermediate variables and compose those functions directly.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">some_process &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">get_data_somehow&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">computation&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">save&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>But now we have created another problem, what happens when we want to make a side effect in the middle of one those? What do we do? Well if a helper function created the problem then I say use another helper function to get out of it. Something like this would work.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">tap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">arg&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">;
}
}
&lt;/span>&lt;/pre>
&lt;p>This will allow you to place a function with a side effect in the middle of chain of functions while keeping data flow.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">some_process &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">get_data_somehow&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">tap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">computation&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">tap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">a_side_effect&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">save
&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>There is argument to be made against these type of things, some people would argue that now all your logic is scattered all over the place and that you have to move around to actually know what the function does. I really don't mind, it's a matter of preference.&lt;/p>
&lt;p>Let's get back to business, did you see &lt;code>tap&lt;/code>'s signature? Look at it: &lt;code>tap(fn)&lt;/code>. It takes a callback as a parameter lets see how we can use that to our advantage.&lt;/p>
&lt;h3 id="make-someone-else-handle-the-problem">Make someone else handle the problem&lt;/h3>
&lt;p>As we all know life isn't always so simple, sometimes we just can't make that sweet pipeline of functions. In some situations we need to do some side-effect in the middle of a process and when that happens we can always cheat. In javascript we can treat functions as values which lets us do funny things like passing functions as parameters to other functions. This way the function can have the flexibility to execute a side effect when we need to while maintaining some of the predictability that we know and love.&lt;/p>
&lt;p>Say for example that you have a function that is already pure and does something to a collection of data but now for some reason you need log the original and the transformed values right after the transformation happens. What you can do is add a function as a parameter and call it in the right moment.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">transform&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">onchange&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Array&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">isArray&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">) ? [] : {};
&lt;/span>&lt;span style="color:#c594c5;">for&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">key &lt;/span>&lt;span style="color:#5fb3b3;">in &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">] = &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">] + &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#6699cc;">onchange&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">], &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">]);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>This technically fulfills some of the requirements of a pure function, the output (and behavior) of the function is still determined by its input, it just so happens that one of those inputs is a function that can trigger any side effect. Again, the goal in here is not to fight against the nature of javascript and have everything be 100% pure, we want to control when the side effect happens. So in this case the one who controls whether or not to have side effects is the caller of the function. One extra benefit of this is that if you want to use that function in a unit test to prove that it still works as expected the only thing you'll need to do is supply its arguments, you don't have grab any mocking library to test it. &lt;/p>
&lt;p>You may be wondering why put the callback as the first parameter, this is really about personal preference. If you put the &lt;code>thing&lt;/code> that changes the most frequently in the last position you make it easier to do partial application, that is binding the values of the parameters without executing the function. For example you could use &lt;code>transform.bind&lt;/code> to create a specialized function which already has the &lt;code>onchange&lt;/code> callback.&lt;/p>
&lt;h3 id="lazy-effects">Lazy effects&lt;/h3>
&lt;p>The idea here is to delay the inevitable. Instead of performing the side effect right away what you do is provide a way for the caller of your function to execute the side-effect when they see fit. You can do this in a couple of ways.&lt;/p>
&lt;h4 id="using-function-wrappers">Using function wrappers&lt;/h4>
&lt;p>As I mentioned before in javascript you can treat functions as values and one thing you can do with values is returning them from functions. I'm talking about functions that return functions. We already saw how useful that can be and if you think about is not that crazy, how many times have you seen something like this?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Stuff&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">thing&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// setup
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">some_method&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#5f6364;">// code...
&lt;/span>&lt;span style="color:#5fb3b3;">},
&lt;/span>&lt;span style="color:#6699cc;">other&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#5f6364;">// code...
&lt;/span>&lt;span style="color:#5fb3b3;">}
}
}
&lt;/span>&lt;/pre>
&lt;p>This is an old school &amp;quot;constructor.&amp;quot; Before, in the good ol' days of ES5, this was one way of emulating classes. Is a regular function that returns an object, and is we all know objects can have methods. What we want to do is little bit like that, we want convert the block that contains the side effect into a function and return it.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">some_process&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">config&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">/*
* do some pure computation with config
*/
&lt;/span>&lt;span style="color:#c594c5;">return function &lt;/span>&lt;span style="color:#6699cc;">_effect&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#5f6364;">/*
* do whatever you want in here
*/
&lt;/span>&lt;span style="color:#5fb3b3;">}
}
&lt;/span>&lt;/pre>
&lt;p>This way we give the caller of our function the opportunity to use the side effect when they want, and they can even pass it around and compose it with other functions. Interestingly enough this is not a very common pattern, maybe because there are other ways to achieve the same goal.&lt;/p>
&lt;h4 id="using-data-structures">Using data structures&lt;/h4>
&lt;p>Another way to create lazy effects is to wrap a side effect inside a data structure. What we want to do is to treat our effects as regular data, have the ability to manipulate them and even chain other effects in safe way (I mean without executing them). You've probably seen this before, one example that I can think of is Observables. Take a look at this code that uses rxjs.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// taken from:
// https://www.learnrxjs.io/operators/creation/create.html
/*
Increment value every 1s, emit even numbers.
*/
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">evenNumbers &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">create&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">observer&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">interval &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">setInterval&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value &lt;/span>&lt;span style="color:#5fb3b3;">% &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">next&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">++;
}, &lt;/span>&lt;span style="color:#f99157;">1000&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">clearInterval&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">interval&lt;/span>&lt;span style="color:#5fb3b3;">);
});
&lt;/span>&lt;/pre>
&lt;p>The result of &lt;code>Observable.create&lt;/code> not only delays the execution of &lt;code>setInterval&lt;/code> but also gives you the ability to call &lt;code>evenNumbers.pipe&lt;/code> to chain other observables that can also have other side effects. Now of course Observables and rxjs aren't the only way, we can create our own effect type. If we want to create one all we need is a function to execute the effect and another one that lets us compose effects.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Effect&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">effect&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">run&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">args&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">effect&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#cccece;">args&lt;/span>&lt;span style="color:#5fb3b3;">);
},
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Effect&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">effect&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">)));
}
};
}
&lt;/span>&lt;/pre>
&lt;p>It may not look like much but this is actually enough to be useful. You can start composing your effects without triggering any changes to the environment. You can now do stuff like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">persist &lt;/span>&lt;span style="color:#5fb3b3;">= (&lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(`&lt;/span>&lt;span style="color:#99c794;">saving &lt;/span>&lt;span style="color:#5fb3b3;">${&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">}&lt;/span>&lt;span style="color:#99c794;"> to a database...&lt;/span>&lt;span style="color:#5fb3b3;">`);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">? &lt;/span>&lt;span style="color:#f99157;">true &lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">;
};
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">show_message &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">result &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">result
&lt;/span>&lt;span style="color:#5fb3b3;">? &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">we good&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
: &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">we not good&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">save &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Effect&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">persist&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">show_message&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#cccece;">save&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">run&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">some stuff&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// saving some stuff to a database...
// we good
&lt;/span>&lt;span style="color:#cccece;">save&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">run&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// saving to a database...
// we not good
&lt;/span>&lt;/pre>
&lt;p>If you have used &lt;code>Array.map&lt;/code> to compose data transformations you'll be feeling right at home when using &lt;code>Effect&lt;/code>, all you have to do is provide the functions with the side effect and at the of the chain the resulting &lt;code>Effect&lt;/code> will know what to do when you are ready to call it.&lt;/p>
&lt;p>I've only scratched the surface of what you can do with &lt;code>Effect&lt;/code>, if you want to learn more try to search the term &lt;code>functor&lt;/code> and &lt;code>IO Monad&lt;/code>, I promise you is going to be fun. &lt;/p>
&lt;h2 id="what-now">What now?&lt;/h2>
&lt;p>Now you click on the link in the end of the post, it's a really good article (basically a better version of this one). &lt;/p>
&lt;p>I hope now you are confident enough to start writing pure functions in your code and combine them with the convenient side effects that javascript lets you do.&lt;/p>
&lt;h2 id="sources">Sources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/">How to deal with dirty side effects in your pure functional JavaScript&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Lenses A.K.A. composable getters and setters</title><pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/web-development/learn-fp/lenses-a-k-a-composable-getters-and-setters/</link><guid>https://vonheikemen.github.io/devlog/web-development/learn-fp/lenses-a-k-a-composable-getters-and-setters/</guid><description>&lt;p>This time around we will figure out what are lenses, how do they look like in javascript and hopefully will build a mostly adequate implementation.&lt;/p>
&lt;p>Let us first take a step back and ask.&lt;/p>
&lt;h2 id="what-are-getters-and-setters">What are getters and setters?&lt;/h2>
&lt;p>This are functions that have one goal, they get or set value. But of course that is not the only thing they are good for. Most use cases I've seen involve triggering a side-effect when a value changes or put some validations to prevent undesired behavior.&lt;/p>
&lt;p>In javascript you could make them explicit by doing something like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Some&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">thing &lt;/span>&lt;span style="color:#5fb3b3;">= &amp;#39;&lt;/span>&lt;span style="color:#99c794;">stuff&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">get_thing&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#5f6364;">// you can do anything in here
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">;
},
&lt;/span>&lt;span style="color:#6699cc;">set_thing&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// same in here.
&lt;/span>&lt;span style="color:#cccece;">thing &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
}
}
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">obj &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Some&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">get_thing&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;stuff&amp;#39;
&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">set_thing&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">other stuff&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">get_thing&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;other stuff&amp;#39;
&lt;/span>&lt;/pre>
&lt;p>Or you could make then implicit.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">some &lt;/span>&lt;span style="color:#5fb3b3;">= {};
&lt;/span>&lt;span style="color:#fac863;">Object&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">defineProperty&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">some&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">thing&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, {
&lt;/span>&lt;span style="color:#6699cc;">get&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">thing&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
},
&lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">can&amp;#39;t touch this&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;);
}
});
&lt;/span>&lt;span style="color:#cccece;">some&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">thing &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;thing&amp;#39;
&lt;/span>&lt;span style="color:#cccece;">some&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">thing &lt;/span>&lt;span style="color:#5fb3b3;">= &amp;#39;&lt;/span>&lt;span style="color:#99c794;">what?&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#5f6364;">//
// can&amp;#39;t touch this
//
&lt;/span>&lt;span style="color:#cccece;">some&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">thing &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;thing&amp;#39;
&lt;/span>&lt;/pre>
&lt;p>But what is so wrong in there that some people feel the need to use something like lenses?&lt;/p>
&lt;p>Let's start with that second example. I can tell you that some people don't like magical things, just the thought of a function being executed without their knowledge is bad enough.&lt;/p>
&lt;p>The first example is bit more interesting. Let's see it again.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">get_thing&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;stuff&amp;#39;
&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">set_thing&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">other stuff&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">get_thing&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;other stuff&amp;#39;
&lt;/span>&lt;/pre>
&lt;p>You use &lt;code>get_thing&lt;/code> you get &lt;code>stuff&lt;/code>, so far so good. But here is the problem you use it again in exactly the same way and yet you get &lt;code>other stuff&lt;/code>. You kinda have to keep track of the last call to &lt;code>set_thing&lt;/code> in order to know what you would get. We don't have the ability to predict the result from &lt;code>get_thing&lt;/code>, you can't be 100% sure what it will do without looking around (or knowing) others parts of the code.&lt;/p>
&lt;h2 id="is-there-a-better-way">Is there a better way?&lt;/h2>
&lt;p>I wouldn't say better. Let us just try lenses, you can decide later if you like them or not.&lt;/p>
&lt;p>What do we need? Lenses are a functional programing thing so the first thing we will do is create helper functions. This will be the first version of getters and setters.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Getter
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">key&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">obj &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">];
}
&lt;/span>&lt;span style="color:#5f6364;">// Setter
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">key&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">Object&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">assign&lt;/span>&lt;span style="color:#5fb3b3;">({}, &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">, {[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">]: &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">});
}
&lt;/span>&lt;/pre>
&lt;p>Now for the &amp;quot;constructor.&amp;quot;&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">getter&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">setter&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{ &lt;/span>&lt;span style="color:#cccece;">getter&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">setter &lt;/span>&lt;span style="color:#5fb3b3;">};
}
&lt;/span>&lt;span style="color:#5f6364;">// That is it.
&lt;/span>&lt;/pre>
&lt;p>You'll notice that &lt;code>Lens&lt;/code> does absolutely nothing, I'm doing that on purpose. You can already tell that most of the work is in the getter and setter. Your lens are going to be as robust as your getter and setter implementations.&lt;/p>
&lt;p>Now we need to make them do something, we will make three little functions. &lt;/p>
&lt;p>&lt;code>view&lt;/code>: gets a value&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">lens&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">getter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>&lt;code>over&lt;/code>: transforms a value using a callback&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">lens&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">setter&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">lens&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">getter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#cccece;">obj
&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>&lt;code>set&lt;/code>: replaces a value&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">always&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">val&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// don&amp;#39;t you love reusability?
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">always&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>It's time for a test drive.&lt;/p>
&lt;p>Let's say we have an object named &lt;code>alice&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">alice &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">Alice Jones&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;,
&lt;/span>&lt;span style="color:#cccece;">address&lt;/span>&lt;span style="color:#5fb3b3;">: [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">22 Walnut St&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">San Francisco&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">CA&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;],
&lt;/span>&lt;span style="color:#cccece;">pets&lt;/span>&lt;span style="color:#5fb3b3;">: { &lt;/span>&lt;span style="color:#cccece;">dog&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">joker&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">batman&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39; }
};
&lt;/span>&lt;/pre>
&lt;p>We'll start with something simple, inspect the values. This is how you would do it.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)),
&lt;/span>&lt;span style="color:#cccece;">alice
&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;Alice Jones&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>I see you're not impressed and that's fine. I just wrote a lot characters just to get a name. But here is the thing, these are standalone functions. We can always compose and create new ones. Let's start with that &lt;code>Lens(prop, assoc)&lt;/code> bit, we will put that in a function because we will use it a lot.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">key&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;/pre>
&lt;p>And now...&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;Alice Jones&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>You could even take it one step further and make a function that just expects the object that holds the data.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">get_name &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">obj &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// or with partial application
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_name &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">view&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;span style="color:#5f6364;">// or using a curry utility.
// view = curry(view);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_name &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;span style="color:#5f6364;">// and you can also do this with `set` and `over`
&lt;/span>&lt;/pre>
&lt;p>Enough of that. Going back to our test, let's try &lt;code>over&lt;/code>. Let's transform the name to uppercase.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">upper &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">str &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">toUpperCase&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">uppercase_alice &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &lt;/span>&lt;span style="color:#cccece;">upper&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// see?
&lt;/span>&lt;span style="color:#6699cc;">get_name&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">uppercase_alice&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;ALICE JONES&amp;quot;
// sanity check
&lt;/span>&lt;span style="color:#6699cc;">get_name&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;Alice Jones&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>It's &lt;code>set&lt;/code>'s turn.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">alice_smith &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &amp;#39;&lt;/span>&lt;span style="color:#99c794;">Alice smith&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">get_name&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">alice_smith&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;Alice smith&amp;quot;
// sanity check
&lt;/span>&lt;span style="color:#6699cc;">get_name&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;Alice Jones&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>That's all nice but the name is just one property, what about nested object keys or arrays? Ah, you see now that is where it gets awkward with our current implementation. Right now you could do the following.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">dog &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#f99157;">obj &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">dog&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)(&lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">pets&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#f99157;">obj &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">dog&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)(&lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">pets&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">))
);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;joker&amp;quot;
// or bring a `compose` utility
&lt;/span>&lt;span style="color:#cccece;">dog &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">dog&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;), &lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">pets&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;)),
&lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">dog&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;), &lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">pets&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;))
);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;joker&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>I hear you. Don't worry, I wouldn't let you write stuff like that. It is because of situations like this one that people say stuff like &amp;quot;just use &lt;a href="https://ramdajs.com/">Ramda&lt;/a>&amp;quot; (and those people are right) But what makes ramda so special?&lt;/p>
&lt;h2 id="making-it-special">Making it special&lt;/h2>
&lt;p>If you go to ramda's documentation and search &amp;quot;lens&amp;quot; you'll see that they have a &lt;code>lensProp&lt;/code> function which is basically our &lt;code>Lprop&lt;/code>. And if you go to the source you'll see something like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">lensProp&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">k&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">k&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">k&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;/pre>
&lt;p>Look at that. But now the comments on their source and documentation suggest that it also works with just one property. Let's go back to our &amp;quot;lens&amp;quot; search on their site. Now we will check that curious &lt;code>lensPath&lt;/code> function. It is exactly what we want. Once again we check out the source.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">lensPath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">p&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">p&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">p&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;span style="color:#5f6364;">// Welcome to functional programming, y&amp;#39;all.
&lt;/span>&lt;/pre>
&lt;p>The secret sauce it's made of other functions that don't have any specific ties to lenses. Isn't that just nice?&lt;/p>
&lt;p>What is in that &lt;code>path&lt;/code> function? Let's check it out. I'll show you a slightly different version, but it works just the same.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">keys&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// this is for currying
// they do this by wrapping `path`
// with a helper function
// but this is what happens
// they return a function that remembers `keys`
// and expects `obj`
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">this&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">idx &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">while &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">idx &lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt; &lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// we don&amp;#39;t like null
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">== &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#5f6364;">// this is how we get the nested keys
&lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">idx&lt;/span>&lt;span style="color:#5fb3b3;">]];
&lt;/span>&lt;span style="color:#cccece;">idx &lt;/span>&lt;span style="color:#5fb3b3;">+= &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>I'll do the same with &lt;code>assocPath&lt;/code>. For this one they make use of some internal helpers but again this is what happens.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">path&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// again with the currying stuff
// this is why they have a helper function
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">this&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">);
} &lt;/span>&lt;span style="color:#c594c5;">else if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">this&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#5f6364;">// check for an empty list
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">path&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">index &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">path&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#5f6364;">// Beware: recursion ahead.
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">path&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt; &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">is_empty &lt;/span>&lt;span style="color:#5fb3b3;">=
typeof &lt;/span>&lt;span style="color:#cccece;">obj &lt;/span>&lt;span style="color:#5fb3b3;">!== &amp;#39;&lt;/span>&lt;span style="color:#99c794;">object&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39; || &lt;/span>&lt;span style="color:#cccece;">obj &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">null &lt;/span>&lt;span style="color:#5fb3b3;">|| !&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">hasOwnProperty&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">index&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// if the current object is &amp;quot;empty&amp;quot;
// we need to create a new one
// otherwise we pick the object at `index`
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">next &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">is_empty
&lt;/span>&lt;span style="color:#5fb3b3;">? typeof &lt;/span>&lt;span style="color:#cccece;">path&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">] === &amp;#39;&lt;/span>&lt;span style="color:#99c794;">number&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;
? []
: {}
: &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">index&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#5f6364;">// we start again the process
// but now with a reduced `path`
// and `next` as the new `obj`
&lt;/span>&lt;span style="color:#cccece;">value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Array&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">prototype&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">slice&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">call&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">next&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#5f6364;">// the base cases
// we either have to copy an array
// or an object
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(typeof &lt;/span>&lt;span style="color:#cccece;">index &lt;/span>&lt;span style="color:#5fb3b3;">=== &amp;#39;&lt;/span>&lt;span style="color:#99c794;">number&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39; &amp;amp;&amp;amp; &lt;/span>&lt;span style="color:#fac863;">Array&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">isArray&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">)) {
&lt;/span>&lt;span style="color:#5f6364;">// make a &amp;#39;copy&amp;#39; of the array
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">arr &lt;/span>&lt;span style="color:#5fb3b3;">= [].&lt;/span>&lt;span style="color:#6699cc;">concat&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#cccece;">arr&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">index&lt;/span>&lt;span style="color:#5fb3b3;">] = &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">arr&lt;/span>&lt;span style="color:#5fb3b3;">;
} &lt;/span>&lt;span style="color:#c594c5;">else &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#5f6364;">// old school &amp;#39;copy&amp;#39;
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= {};
&lt;/span>&lt;span style="color:#c594c5;">for &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">p &lt;/span>&lt;span style="color:#5fb3b3;">in &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">p&lt;/span>&lt;span style="color:#5fb3b3;">] = &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">p&lt;/span>&lt;span style="color:#5fb3b3;">];
}
&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">index&lt;/span>&lt;span style="color:#5fb3b3;">] = &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
}
&lt;/span>&lt;/pre>
&lt;p>With our new found knowledge we can create an &lt;code>Lpath&lt;/code> function and improve &lt;code>Lprop&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lpath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">keys&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">key&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">]), &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">]));
}
&lt;/span>&lt;/pre>
&lt;p>Now we can do more stuff, like playing with &lt;code>alice&lt;/code> pets.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">dog_lens &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Lpath&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">pets&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">dog&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;joker&amp;#39;
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">new_alice &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">upper&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">new_alice&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;JOKER&amp;#39;
&lt;/span>&lt;span style="color:#cccece;">new_alice &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">Joker&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">new_alice&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;Joker&amp;#39;
&lt;/span>&lt;/pre>
&lt;p>All of this works great but there is just one tiny detail, the lenses that the current constructor creates aren't composable. Imagine that we have three lenses from differents files or something and we want to combine them like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">pet_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">imaginary_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>This wouldn't work because &lt;code>compose&lt;/code> expects a list of functions and our lenses are objects. But we can fix this (in a very funny way) with some functional programming trickery.&lt;/p>
&lt;p>Let's start with our lenses constructor. Instead of returning an object we are going to return a &amp;quot;curried&amp;quot; function that takes a callback, an object and returns a &lt;strong>Functor&lt;/strong> (a thing that has &lt;code>map&lt;/code> method and follows &lt;a href="https://github.com/fantasyland/fantasy-land#functor">this rules&lt;/a>)&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">getter&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">setter&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#f99157;">obj &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">apply &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">focus &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">setter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">focus&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">functor &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">getter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">functor&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">apply&lt;/span>&lt;span style="color:#5fb3b3;">);
};
}
&lt;/span>&lt;/pre>
&lt;p>What's with the a &lt;code>fn =&amp;gt; obj =&amp;gt;&lt;/code> stuff? That is going to help us with our &lt;code>compose&lt;/code> situation. Now after you provide the &lt;code>getter&lt;/code> and &lt;code>setter&lt;/code> you get a function, and that is what makes &lt;code>compose&lt;/code> happy.&lt;/p>
&lt;p>And &lt;code>functor.map&lt;/code>? That is going to make sure that we can still use a lens as unit (like &lt;code>Lprop('pets')&lt;/code>) but also a part of a chain using &lt;code>compose&lt;/code>.&lt;/p>
&lt;p>In case you are wondering what the good folks at ramda do different, they use their own bulletproof implementation of &lt;code>map&lt;/code>.&lt;/p>
&lt;p>Now we modify &lt;code>view&lt;/code> and &lt;code>over&lt;/code>. Starting with &lt;code>view&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">constant &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">constant&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">) });
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">constant&lt;/span>&lt;span style="color:#5fb3b3;">)(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>That &lt;code>constant&lt;/code> thing might look like is too much, but it does the job. Things can get crazy in those &lt;code>compose&lt;/code> chains, that just makes sure the value you want stays safe.&lt;/p>
&lt;p>What about &lt;code>over&lt;/code>? It will do almost the same thing, except that in this case we do need to use the &lt;code>setter&lt;/code> function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">identity &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">setter &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">identity&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">setter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)) });
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">apply &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">identity&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">apply&lt;/span>&lt;span style="color:#5fb3b3;">)(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>And now we should have a mostly adequate &lt;code>Lens&lt;/code> implementation. The whole thing without dependencies (&lt;code>path&lt;/code> and &lt;code>assocPath&lt;/code>) should look like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">getter&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">setter&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#f99157;">obj &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">apply &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">focus &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">setter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">focus&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">functor &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">getter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">functor&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">apply&lt;/span>&lt;span style="color:#5fb3b3;">);
};
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">constant &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">constant&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">) });
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">constant&lt;/span>&lt;span style="color:#5fb3b3;">)(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">identity &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">setter &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">identity&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">setter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)) });
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">apply &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">identity&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">apply&lt;/span>&lt;span style="color:#5fb3b3;">)(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">val&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">always&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">key&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">]), &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">]));
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lpath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">keys&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">always&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>But can you believe me if I said it works? You shouldn't. Let's make some tests. We'll bring back &lt;code>alice&lt;/code> and add her sister &lt;code>calie&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">alice &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Alice Jones&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">address&lt;/span>&lt;span style="color:#5fb3b3;">: [&amp;quot;&lt;/span>&lt;span style="color:#99c794;">22 Walnut St&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">San Francisco&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">CA&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;],
&lt;/span>&lt;span style="color:#cccece;">pets&lt;/span>&lt;span style="color:#5fb3b3;">: { &lt;/span>&lt;span style="color:#cccece;">dog&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">joker&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">batman&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &lt;/span>&lt;span style="color:#cccece;">imaginary&lt;/span>&lt;span style="color:#5fb3b3;">: { &lt;/span>&lt;span style="color:#cccece;">dragon&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">harley&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; } }
};
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">calie &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">calie Jones&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">address&lt;/span>&lt;span style="color:#5fb3b3;">: [&amp;quot;&lt;/span>&lt;span style="color:#99c794;">22 Walnut St&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">San Francisco&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">CA&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;],
&lt;/span>&lt;span style="color:#cccece;">pets&lt;/span>&lt;span style="color:#5fb3b3;">: { &lt;/span>&lt;span style="color:#cccece;">dog&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">riddler&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">ivy&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &lt;/span>&lt;span style="color:#cccece;">imaginary&lt;/span>&lt;span style="color:#5fb3b3;">: { &lt;/span>&lt;span style="color:#cccece;">dragon&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">hush&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; } },
&lt;/span>&lt;span style="color:#cccece;">friend&lt;/span>&lt;span style="color:#5fb3b3;">: [&lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">]
};
&lt;/span>&lt;/pre>
&lt;p>And because we planned ahead we have some lenses already available.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// some generic lens
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">head_lens &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// specific lens
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">bff_lens &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">friend&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &lt;/span>&lt;span style="color:#cccece;">head_lens&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">imaginary_lens &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Lpath&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">pets&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">imaginary&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>Say that we want to do something with their &lt;code>dragons&lt;/code>, all we have to do is &lt;code>compose&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">dragon_lens &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">imaginary_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">dragon&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;span style="color:#5f6364;">// just for fun
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">bff_dragon_lens &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">bff_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// demo
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">upper &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">str &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">toUpperCase&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#5f6364;">// view
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">calie&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;hush&amp;quot;
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">bff_dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">calie&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;harley&amp;quot;
// over
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">new_calie &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">upper&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">calie&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">new_calie&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;HUSH&amp;quot;
&lt;/span>&lt;span style="color:#cccece;">new_calie &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">bff_dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">upper&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">calie&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">bff_dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">new_calie&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;HARLEY&amp;quot;
// set
&lt;/span>&lt;span style="color:#cccece;">new_calie &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">fluffykins&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">calie&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">new_calie&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;fluffykins&amp;quot;
&lt;/span>&lt;span style="color:#cccece;">new_calie &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">bff_dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">pumpkin&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">calie&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">bff_dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">new_calie&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;pumpkin&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>So we just manipulated a deeply nested object property by composing lenses. If you're not excited then I don't know what to tell you. We just solve a problem by composing functions! &lt;/p>
&lt;p>These things can be hard to sell because they require for you to write in a certain style in order to make the most out of it. And for people who write javascript there are libraries out there that solve the same problem in a more convenient way, or at least in a way that is more suitable for their style. &lt;/p>
&lt;p>Anyway, if you're still interested in seeing lenses in a non trivial context checkout &lt;a href="https://github.com/kwasniew/hyperapp-realworld-example-app">this repository&lt;/a>, it is a &lt;a href="https://github.com/gothinkster/realworld">real world example app&lt;/a> (kinda like medium.com clone) that uses hyperapp to handle the frontend. In it the author chose to use lenses to handle state of the app.&lt;/p>
&lt;h2 id="sources">Sources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://ramdajs.com/docs/">ramda - docs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/branneman/f06bd451f74e5bc1725db23be682d4fe">fp-lenses.js&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=IoVaArsh6tM">Lambda World 2018 - Functional Lenses in JavaScript (video)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Taking a look at finite state machines</title><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/web-development/taking-a-look-at-finite-state-machine/</link><guid>https://vonheikemen.github.io/devlog/web-development/taking-a-look-at-finite-state-machine/</guid><description>&lt;h2 id="the-finite-who-what">The finite who-- what?&lt;/h2>
&lt;p>It is a way of modeling the behavior of a system. The idea is that your &amp;quot;system&amp;quot; can only be in one state at any given time, and an input (or event) can trigger the transition to another state.&lt;/p>
&lt;h2 id="what-kind-of-problems-does-it-solve">What kind of problems does it solve?&lt;/h2>
&lt;p>Invalid state. How many times have you used a flag or attribute like &amp;quot;disabled&amp;quot; to prevent a user from doing something they shouldn't do? By setting the rules of our system we can avoid these kind of problems.&lt;/p>
&lt;h2 id="how-does-that-look-like-in-javascript">How does that look like in javascript?&lt;/h2>
&lt;p>I'm very glad you asked. The real reason I'm writing this is to show you a library that I saw the other day. We are going to use &lt;a href="https://thisrobot.life/">robot3&lt;/a> to built a random quote machine.&lt;/p>
&lt;p>We will make a card that displays a quote and below that we'll have a button that will fetch another quote.&lt;/p>
&lt;p>We'll do it one step at a time. Let's first prepare the states. &lt;/p>
&lt;p>Our card will be either &lt;code>idle&lt;/code> or &lt;code>loading&lt;/code>. Create a machine with that.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">import &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#cccece;">createMachine&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">interpret
&lt;/span>&lt;span style="color:#5fb3b3;">} &lt;/span>&lt;span style="color:#c594c5;">from &lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">https://unpkg.com/robot3@0.2.9/machine.js&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">mr_robot &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">createMachine&lt;/span>&lt;span style="color:#5fb3b3;">({
&lt;/span>&lt;span style="color:#6699cc;">idle&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#6699cc;">state&lt;/span>&lt;span style="color:#5fb3b3;">(),
&lt;/span>&lt;span style="color:#6699cc;">loading&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#6699cc;">state&lt;/span>&lt;span style="color:#5fb3b3;">()
});
&lt;/span>&lt;/pre>
&lt;p>In here each &lt;code>state&lt;/code> is a key in the &amp;quot;setup object&amp;quot; that we pass to &lt;code>createMachine&lt;/code>, but also notice that it needs to be a &lt;code>state&lt;/code> object, which we create with the &lt;code>state&lt;/code> function.&lt;/p>
&lt;p>Now we need transitions. Our &lt;code>idle&lt;/code> state will switch to &lt;code>loading&lt;/code> if a &lt;code>fetch&lt;/code> event happens, &lt;code>loading&lt;/code> will go back to &lt;code>idle&lt;/code> if a &lt;code>done&lt;/code> is dispatched. &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> import {
createMachine,
state,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> transition,
&lt;/span>&lt;span style="color:#cccece;"> interpret
} from &amp;#39;https://unpkg.com/robot3@0.2.9/machine.js&amp;#39;;
const mr_robot = createMachine({
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> idle: state(),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> loading: state()
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> loading: state(transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;))
&lt;/span>&lt;span style="color:#cccece;"> });
&lt;/span>&lt;/pre>
&lt;p>&lt;code>transition&lt;/code> is the thing that connects our states. It's first parameter is the name of the event that will trigger the transition, the second parameter is the &amp;quot;destination&amp;quot; state it will switch to. The rest of &lt;code>transition&lt;/code>'s parameters can be a list of function that will be executed when this transition is triggered.&lt;/p>
&lt;p>Looks lovely, but uhm... how do we test it? The machine by itself doesn't do anything. We need to give our new machine to the &lt;code>interpret&lt;/code> function which will give us a &amp;quot;service&amp;quot; that can dispatch events. To prove that we are actually doing something we'll also give a handler to &lt;code>interpret&lt;/code>, it will be like a 'onchange', it will listen to state changes.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">handler &lt;/span>&lt;span style="color:#5fb3b3;">= ({ &lt;/span>&lt;span style="color:#f99157;">machine &lt;/span>&lt;span style="color:#5fb3b3;">}) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">machine&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">current&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#5fb3b3;">{ &lt;/span>&lt;span style="color:#cccece;">send &lt;/span>&lt;span style="color:#5fb3b3;">} = &lt;/span>&lt;span style="color:#6699cc;">interpret&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">mr_robot&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">handler&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Now you can see if it's alive.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">done&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// You should see in the console
// loading (3)
// idle
&lt;/span>&lt;/pre>
&lt;p>Dispatching &lt;code>fetch&lt;/code> will turn the current state to &lt;code>loading&lt;/code> and &lt;code>done&lt;/code> will get it back to &lt;code>idle&lt;/code>. I see you're not impressed. That's fine. Let's try something, let's add another state &lt;code>end&lt;/code> and make &lt;code>loading&lt;/code> switch to that, then dispatch &lt;code>done&lt;/code> and see what happens. &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const mr_robot = createMachine({
idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> loading: state(transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;))
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> loading: state(transition(&amp;#39;done&amp;#39;, &amp;#39;end&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> end: state()
&lt;/span>&lt;span style="color:#cccece;"> });
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">done&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// You should see in the console
// idle
&lt;/span>&lt;/pre>
&lt;p>Sending &lt;code>done&lt;/code> while &lt;code>idle&lt;/code> doesn't trigger a &lt;code>loading&lt;/code> state, it stays in &lt;code>idle&lt;/code> because that state doesn't have a &lt;code>done&lt;/code> event. And now...&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// We do the usual flow.
&lt;/span>&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">done&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// You should have
// loading
// end
// Now try again `fetch`
&lt;/span>&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// You should have
// end
&lt;/span>&lt;/pre>
&lt;p>If you send &lt;code>fetch&lt;/code> (or any other event) while in &lt;code>end&lt;/code> state will give you &lt;code>end&lt;/code> every single time. Why? Because you can't go anywhere, &lt;code>end&lt;/code> doesn't have transitions.&lt;/p>
&lt;p>I hope you see why this is useful. If not, I apologize for all the &lt;code>console.log&lt;/code>ing.&lt;/p>
&lt;p>Going back to our current machine. This what we got so far.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> &lt;/span>&lt;span style="color:#c594c5;">import &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#cccece;">createMachine&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">transition&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">interpret
&lt;/span>&lt;span style="color:#5fb3b3;">} &lt;/span>&lt;span style="color:#c594c5;">from &lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">https://unpkg.com/robot3@0.2.9/machine.js&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">mr_robot &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">createMachine&lt;/span>&lt;span style="color:#5fb3b3;">({
&lt;/span>&lt;span style="color:#6699cc;">idle&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#6699cc;">state&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">transition&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">loading&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)),
&lt;/span>&lt;span style="color:#6699cc;">loading&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#6699cc;">state&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">transition&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">done&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">idle&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
});
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">handler &lt;/span>&lt;span style="color:#5fb3b3;">= ({ &lt;/span>&lt;span style="color:#f99157;">machine &lt;/span>&lt;span style="color:#5fb3b3;">}) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">machine&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">current&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#5fb3b3;">{ &lt;/span>&lt;span style="color:#cccece;">send &lt;/span>&lt;span style="color:#5fb3b3;">} = &lt;/span>&lt;span style="color:#6699cc;">interpret&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">mr_robot&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">handler&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>But this is still not enough, now we need to get some data when we enter the &lt;code>loading&lt;/code> state. Let's first fake our quote fetching function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">get_quote&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#5f6364;">// make a random delay, 3 to 5 seconds.
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">delay &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">random_number&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">5&lt;/span>&lt;span style="color:#5fb3b3;">) * &lt;/span>&lt;span style="color:#f99157;">1000&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">promise &lt;/span>&lt;span style="color:#5fb3b3;">= new &lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">res &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">setTimeout&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">res&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">&amp;lt;quote&amp;gt;&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &lt;/span>&lt;span style="color:#cccece;">delay&lt;/span>&lt;span style="color:#5fb3b3;">);
});
&lt;/span>&lt;span style="color:#5f6364;">// sanity check
&lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">res &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">res&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">res&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>To make it work with our state machine we will use a function called &lt;code>invoke&lt;/code>, this utility calls an &amp;quot;async function&amp;quot; (a function that returns a promise) when you enter a &lt;code>state&lt;/code> then when the promise resolves it sends a &lt;code>done&lt;/code> event (if it fails it sends a &lt;code>error&lt;/code> event).&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> import {
createMachine,
state,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> invoke,
&lt;/span>&lt;span style="color:#cccece;"> transition,
interpret
} from &amp;#39;https://unpkg.com/robot3@0.2.9/machine.js&amp;#39;;
const mr_robot = createMachine({
idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> loading: state(transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> loading: invoke(get_quote, transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;)),
&lt;/span>&lt;span style="color:#cccece;"> });
&lt;/span>&lt;/pre>
&lt;p>If you test &lt;code>send('fetch')&lt;/code> you should see in the console.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">loading
// wait a few seconds...
&amp;lt;quote&amp;gt;
idle
&lt;/span>&lt;/pre>
&lt;p>By now I hope you're all wondering where do we actually keep the data? There is a handy feature in &lt;code>createMachine&lt;/code> that let us define a &amp;quot;context&amp;quot; object that will be available to us in the function that we attach to our &lt;code>transitions&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">context &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">ev &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({
&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">: {},
});
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const mr_robot = createMachine({
idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
loading: invoke(get_quote, transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> });
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> }, context);
&lt;/span>&lt;/pre>
&lt;p>Next we'll use another utility. We will pass a third parameter to &lt;code>loading&lt;/code>'s transition, a hook of some sort that will modify the context object. This utility is called &lt;code>reduce&lt;/code> and it looks like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">((&lt;/span>&lt;span style="color:#f99157;">ctx&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">ev&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({ ...&lt;/span>&lt;span style="color:#cccece;">ctx&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">data&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">ev&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">data &lt;/span>&lt;span style="color:#5fb3b3;">}))
&lt;/span>&lt;/pre>
&lt;p>It takes the current context, a payload (here named &lt;code>ev&lt;/code>) and whatever you return from it becomes your new context. We add that to the &lt;code>loading&lt;/code> state.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> import {
createMachine,
state,
invoke,
transition,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> reduce,
&lt;/span>&lt;span style="color:#cccece;"> interpret
} from &amp;#39;https://unpkg.com/robot3@0.2.9/machine.js&amp;#39;;
const mr_robot = createMachine({
idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> loading: invoke(get_quote, transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> loading: invoke(
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> get_quote,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> transition(
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> &amp;#39;done&amp;#39;,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> &amp;#39;idle&amp;#39;,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> reduce((ctx, ev) =&amp;gt; ({ ...ctx, data: ev.data }))
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> )
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> ),
&lt;/span>&lt;span style="color:#cccece;"> }, context);
&lt;/span>&lt;/pre>
&lt;p>Sanity check time. How do we know that works? We modify &lt;code>interpret&lt;/code>'s handler.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">handler &lt;/span>&lt;span style="color:#5fb3b3;">= ({ &lt;/span>&lt;span style="color:#f99157;">machine&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">context &lt;/span>&lt;span style="color:#5fb3b3;">}) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">JSON&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">stringify&lt;/span>&lt;span style="color:#5fb3b3;">({
&lt;/span>&lt;span style="color:#6699cc;">state&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">machine&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">current&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">context
&lt;/span>&lt;span style="color:#5fb3b3;">}));
}
&lt;/span>&lt;/pre>
&lt;p>You should see this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">{&amp;#39;state&amp;#39;:&amp;#39;loading&amp;#39;,&amp;#39;context&amp;#39;:{&amp;#39;data&amp;#39;:{}}}
// wait a few seconds...
{&amp;#39;state&amp;#39;:&amp;#39;idle&amp;#39;,&amp;#39;context&amp;#39;:{&amp;#39;data&amp;#39;:&amp;#39;&amp;lt;quote&amp;gt;&amp;#39;}}
&lt;/span>&lt;/pre>
&lt;p>We are ready. Let's show something in the browser.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">main &lt;/span>&lt;span style="color:#bb80b3;">id&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">app&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">section &lt;/span>&lt;span style="color:#bb80b3;">id&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card__content&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">div &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card__body&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">div &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card__quote&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&lt;/span>&lt;span style="color:#cccece;">
quote
&lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">div&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">div &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card__author&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&lt;/span>&lt;span style="color:#cccece;">
-- author
&lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">div&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">div&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">div &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card__footer&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">button &lt;/span>&lt;span style="color:#bb80b3;">id&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">load_btn&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">btn btn--new&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&lt;/span>&lt;span style="color:#cccece;">
More
&lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">button&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">a &lt;/span>&lt;span style="color:#bb80b3;">href&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">#&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; &lt;/span>&lt;span style="color:#bb80b3;">target&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">_blank&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">btn btn--tweet&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&lt;/span>&lt;span style="color:#cccece;">
Tweet
&lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">a&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">div&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">section&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">main&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#eb606b;">body &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">display&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">flex&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">justify-content&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">center&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">align-items&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">center&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">min-height&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">95vh&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">background&lt;/span>&lt;span style="color:#5fb3b3;">: #ddd;
&lt;/span>&lt;span style="color:#fac863;">font-size&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">1em&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">color&lt;/span>&lt;span style="color:#5fb3b3;">: #212121;
}
.&lt;/span>&lt;span style="color:#bb80b3;">card &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">width&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">600px&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">background&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">white&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">box-shadow&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">0 2px 5px 0 &lt;/span>&lt;span style="color:#6699cc;">rgba&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">0.16&lt;/span>&lt;span style="color:#5fb3b3;">)&lt;/span>&lt;span style="color:#cccece;">, &lt;/span>&lt;span style="color:#f99157;">0 2px 10px 0 &lt;/span>&lt;span style="color:#6699cc;">rgba&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">0.12&lt;/span>&lt;span style="color:#5fb3b3;">);
}
.&lt;/span>&lt;span style="color:#bb80b3;">card__content &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">color&lt;/span>&lt;span style="color:#5fb3b3;">: #212121;
&lt;/span>&lt;span style="color:#fac863;">padding&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">20px&lt;/span>&lt;span style="color:#5fb3b3;">;
}
.&lt;/span>&lt;span style="color:#bb80b3;">card__content--loader &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">height&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">95px&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">display&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">flex&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">align-items&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">center&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">justify-content&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">center
&lt;/span>&lt;span style="color:#5fb3b3;">}
.&lt;/span>&lt;span style="color:#bb80b3;">card__body &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">padding-bottom&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">15px&lt;/span>&lt;span style="color:#5fb3b3;">;
}
.&lt;/span>&lt;span style="color:#bb80b3;">card__author &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">padding-top&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">10px&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">font-style&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">italic&lt;/span>&lt;span style="color:#5fb3b3;">;
}
.&lt;/span>&lt;span style="color:#bb80b3;">card__footer &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">width&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">100%&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">display&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">flex&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">justify-content&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">space-between&lt;/span>&lt;span style="color:#5fb3b3;">;
}
.&lt;/span>&lt;span style="color:#bb80b3;">btn &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">color&lt;/span>&lt;span style="color:#5fb3b3;">: #fff;
&lt;/span>&lt;span style="color:#fac863;">cursor&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">pointer&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">margin-top&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">10px&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">margin-left&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">10px&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">border-radius&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">0.4rem&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">text-decoration&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">none&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">display&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">inline-block&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">padding&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">.3rem .9rem&lt;/span>&lt;span style="color:#5fb3b3;">;
}
.&lt;/span>&lt;span style="color:#bb80b3;">btn--new &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">background-color&lt;/span>&lt;span style="color:#5fb3b3;">: #2093be;
&lt;/span>&lt;span style="color:#fac863;">border&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">0.1rem solid &lt;/span>&lt;span style="color:#5fb3b3;">#2093be;
}
.&lt;/span>&lt;span style="color:#bb80b3;">btn--tweet &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">background-color&lt;/span>&lt;span style="color:#5fb3b3;">: #0074d9;
&lt;/span>&lt;span style="color:#fac863;">border&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">0.1rem solid &lt;/span>&lt;span style="color:#5fb3b3;">#0074d9;
}
.&lt;/span>&lt;span style="color:#bb80b3;">btn&lt;/span>&lt;span style="color:#5fb3b3;">:&lt;/span>&lt;span style="color:#cccece;">hover &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">background&lt;/span>&lt;span style="color:#5fb3b3;">: #3cb0fd;
&lt;/span>&lt;span style="color:#fac863;">border&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">0.1rem solid &lt;/span>&lt;span style="color:#5fb3b3;">#3cb0fd;
&lt;/span>&lt;span style="color:#fac863;">text-decoration&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">none&lt;/span>&lt;span style="color:#5fb3b3;">;
}
.&lt;/span>&lt;span style="color:#bb80b3;">hide &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">display&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">none&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Now the last piece of the puzzle, the side effects. We need to attach another function to our transitions so we can update the DOM. We could use &lt;code>reduce&lt;/code> again but is just rude to have side effects on something called &lt;code>reduce&lt;/code> (just don't) We will bring another utility made for that, &lt;code>action&lt;/code>.&lt;/p>
&lt;p>But first we must prepare. Update the context object with the necessary dependencies. (This step is not necessary, this is just me being allergic to global variables)&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const context = ev =&amp;gt; ({
data: {},
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> dom: {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> quote: document.querySelector(&amp;#39;.card__quote&amp;#39;),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> author: document.querySelector(&amp;#39;.card__author&amp;#39;),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> load_btn: window.load_btn,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> tweet_btn: document.querySelector(&amp;#39;.btn--tweet&amp;#39;),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> card: window.card
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> }
&lt;/span>&lt;span style="color:#cccece;"> });
&lt;/span>&lt;/pre>
&lt;p>Create the side effects. At this point you should make sure that &lt;code>get_quote&lt;/code> actually returns an object with a &lt;code>quote&lt;/code> and &lt;code>author&lt;/code> property.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">update_card&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#f99157;">dom&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">data &lt;/span>&lt;span style="color:#5fb3b3;">}) {
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">load_btn&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">textContent &lt;/span>&lt;span style="color:#5fb3b3;">= &amp;#39;&lt;/span>&lt;span style="color:#99c794;">More&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">quote&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">textContent &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">quote&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">author&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">textContent &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">author&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">web_intent &lt;/span>&lt;span style="color:#5fb3b3;">= &amp;#39;&lt;/span>&lt;span style="color:#99c794;">https://twitter.com/intent/tweet?text=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">tweet &lt;/span>&lt;span style="color:#5fb3b3;">= `${&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">quote&lt;/span>&lt;span style="color:#5fb3b3;">}&lt;/span>&lt;span style="color:#99c794;"> -- &lt;/span>&lt;span style="color:#5fb3b3;">${&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">author&lt;/span>&lt;span style="color:#5fb3b3;">}`;
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">tweet_btn&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">setAttribute&lt;/span>&lt;span style="color:#5fb3b3;">(
&amp;#39;&lt;/span>&lt;span style="color:#99c794;">href&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">web_intent &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#6699cc;">encodeURIComponent&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">tweet&lt;/span>&lt;span style="color:#5fb3b3;">)
);
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">show_loading&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#f99157;">dom &lt;/span>&lt;span style="color:#5fb3b3;">}) {
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">load_btn&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">textContent &lt;/span>&lt;span style="color:#5fb3b3;">= &amp;#39;&lt;/span>&lt;span style="color:#99c794;">Loading...&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
}
&lt;/span>&lt;/pre>
&lt;p>Put everything together.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> import {
createMachine,
state,
invoke,
transition,
reduce,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> action,
&lt;/span>&lt;span style="color:#cccece;"> interpret
} from &amp;#39;https://unpkg.com/robot3@0.2.9/machine.js&amp;#39;;
const mr_robot = createMachine({
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;, action(show_loading))),
&lt;/span>&lt;span style="color:#cccece;"> loading: invoke(
get_quote,
transition(
&amp;#39;done&amp;#39;,
&amp;#39;idle&amp;#39;,
reduce((ctx, ev) =&amp;gt; ({ ...ctx, data: ev.data })),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> action(update_card)
&lt;/span>&lt;span style="color:#cccece;"> )
),
}, context);
&lt;/span>&lt;/pre>
&lt;p>By now everything kinda works but it looks bad when it loads for the first time. Let's make another loader, one that hides the card while we fetch the first quote.&lt;/p>
&lt;p>Let's start with the HTML.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> &amp;lt;main id=&amp;quot;app&amp;quot; class=&amp;quot;card&amp;quot;&amp;gt;
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> &amp;lt;section id=&amp;quot;card&amp;quot; class=&amp;quot;card__content&amp;quot;&amp;gt;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> &amp;lt;section class=&amp;quot;card__content card__content--loader&amp;quot;&amp;gt;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> &amp;lt;p&amp;gt;Loading&amp;lt;/p&amp;gt;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> &amp;lt;/section&amp;gt;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> &amp;lt;section id=&amp;quot;card&amp;quot; class=&amp;quot;hide card__content&amp;quot;&amp;gt;
&lt;/span>&lt;span style="color:#cccece;"> &amp;lt;div class=&amp;quot;card__body&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;card__quote&amp;quot;&amp;gt;
quote
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;card__author&amp;quot;&amp;gt;
-- author
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;card__footer&amp;quot;&amp;gt;
&amp;lt;button id=&amp;quot;load_btn&amp;quot; class=&amp;quot;btn btn--new&amp;quot;&amp;gt;
More
&amp;lt;/button&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot; target=&amp;quot;_blank&amp;quot; class=&amp;quot;btn btn--tweet&amp;quot;&amp;gt;
Tweet
&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/span>&lt;/pre>
&lt;p>We'll make another state, &lt;code>empty&lt;/code>. We can reuse our original &lt;code>loading&lt;/code> state for this. Make a factory function that returns the loading transition.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">load_quote &lt;/span>&lt;span style="color:#5fb3b3;">= (...&lt;/span>&lt;span style="color:#f99157;">args&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt;
&lt;/span>&lt;span style="color:#6699cc;">invoke&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">get_quote&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">transition&lt;/span>&lt;span style="color:#5fb3b3;">(
&amp;#39;&lt;/span>&lt;span style="color:#99c794;">done&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;,
&amp;#39;&lt;/span>&lt;span style="color:#99c794;">idle&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;,
&lt;/span>&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">((&lt;/span>&lt;span style="color:#f99157;">ctx&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">ev&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({ ...&lt;/span>&lt;span style="color:#cccece;">ctx&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">data&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">ev&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">data &lt;/span>&lt;span style="color:#5fb3b3;">})),
...&lt;/span>&lt;span style="color:#cccece;">args
&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">transition&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">error&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">idle&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
);
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const mr_robot = createMachine({
idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;, action(show_loading))),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> loading: invoke(
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> get_quote,
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> transition(
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> &amp;#39;done&amp;#39;,
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> &amp;#39;idle&amp;#39;,
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> reduce((ctx, ev) =&amp;gt; ({ ...ctx, data: ev.data })),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> action(update_card)
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> )
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> ),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> loading: load_quote(action(update_card))
&lt;/span>&lt;span style="color:#cccece;"> }, context);
&lt;/span>&lt;/pre>
&lt;p>Now we use this to hide the first loader and show the quote when it's ready.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const context = ev =&amp;gt; ({
data: {},
dom: {
quote: document.querySelector(&amp;#39;.card__quote&amp;#39;),
author: document.querySelector(&amp;#39;.card__author&amp;#39;),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> loader: document.querySelector(&amp;#39;.card__content--loader&amp;#39;),
&lt;/span>&lt;span style="color:#cccece;"> load_btn: window.load_btn,
tweet_btn: document.querySelector(&amp;#39;.btn--tweet&amp;#39;),
card: window.card
}
});
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">hide_loader&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#f99157;">dom &lt;/span>&lt;span style="color:#5fb3b3;">}) {
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">loader&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">classList&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">add&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hide&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">card&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">classList&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">remove&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hide&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
}
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const mr_robot = createMachine({
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> empty: load_quote(action(update_card), action(hide_loader)),
&lt;/span>&lt;span style="color:#cccece;"> idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;, action(show_loading))),
loading: load_quote(action(update_card))
}, context);
&lt;/span>&lt;span style="color:#5fb3b3;">-
-&lt;/span>&lt;span style="color:#ec5f67;"> const handler = ({ machine, context }) =&amp;gt; {
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> console.log(JSON.stringify({
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> state: machine.current,
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> context
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> }));
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> }
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> const handler = () =&amp;gt; {};
&lt;/span>&lt;span style="color:#cccece;">
const { send } = interpret(mr_robot, handler);
&lt;/span>&lt;span style="color:#5fb3b3;">+
+&lt;/span>&lt;span style="color:#99c794;"> const fetch_quote = () =&amp;gt; send(&amp;#39;fetch&amp;#39;);
&lt;/span>&lt;span style="color:#5fb3b3;">+
+&lt;/span>&lt;span style="color:#99c794;"> window.load_btn.addEventListener(&amp;#39;click&amp;#39;, fetch_quote);
&lt;/span>&lt;/pre>
&lt;p>Let's see it work.&lt;/p>
&lt;p
class="codepen"
data-height="600"
data-theme-id="dark"
data-default-tab="js,result"
data-user="VonHeikemen"
data-slug-hash="OJJvQzR"
data-preview="true"
style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"
data-pen-title="Finite Random Quote Machine">
&lt;span>
See the Pen &lt;a href="https://codepen.io/VonHeikemen/pen/OJJvQzR">Finite Random Quote Machine&lt;/a> by Heiker (&lt;a href="https://codepen.io/VonHeikemen">@VonHeikemen&lt;/a>) on &lt;a href="https://codepen.io">CodePen&lt;/a>.
&lt;/span>
&lt;/p>
&lt;script async src="https://static.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;h2 id="so-is-this-state-machine-thing-helpful">So is this state machine thing helpful?&lt;/h2>
&lt;p>I hope so. Did you notice we made a bunch of test and created the blueprint of the quote machine even before writing any HTML? I think that's cool. &lt;/p>
&lt;p>Did you try to click the 'loading' button while loading? Did it triggered a bunch of call to &lt;code>get_quote&lt;/code>? That is because we made (sort of) impossible that a &lt;code>fetch&lt;/code> event can happen during &lt;code>loading&lt;/code>. &lt;/p>
&lt;p>Not only that, the behavior of the machine and the effects on the outside world are separated. Depending on how you like to write code that may be a good or a bad thing.&lt;/p>
&lt;h2 id="want-to-know-more">Want to know more?&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://xstate.js.org/docs/about/concepts.html">XState (concepts)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://thisrobot.life/">robot3 - docs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.freecodecamp.org/news/state-machines-basics-of-computer-science-d42855debc66/">Understanding State Machines&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Functional programming for your everyday javascript: Using a Maybe</title><pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/web-development/learn-fp/using-a-maybe/</link><guid>https://vonheikemen.github.io/devlog/web-development/learn-fp/using-a-maybe/</guid><description>&lt;p>Have you ever heard about monads and how great they are? Maybe you have but you still don't get it. Well... I'm not here to tell you what they are, I won't try to sell them to you either, what I will do is show you an example of how would it be if you use them in your javascripts.&lt;/p>
&lt;p>We'll do something fun, lets solve a fairly trivial problem in an unnecessary complicated way. &lt;/p>
&lt;p>Suppose that we have a dictionary stored in a json file or a plain js object.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">{
&amp;quot;&lt;/span>&lt;span style="color:#99c794;">accident&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#cccece;">: &lt;/span>&lt;span style="color:#5fb3b3;">[&amp;quot;&lt;/span>&lt;span style="color:#99c794;">An unexpected, unfortunate mishap, failure or loss with the potential for harming human life, property or the environment.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">An event that happens suddenly or by chance without an apparent cause.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;],
&amp;quot;&lt;/span>&lt;span style="color:#99c794;">accumulator&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#cccece;">: &lt;/span>&lt;span style="color:#5fb3b3;">[&amp;quot;&lt;/span>&lt;span style="color:#99c794;">A rechargeable device for storing electrical energy in the form of chemical energy, consisting of one or more separate secondary cells.&lt;/span>&lt;span style="color:#5fb3b3;">\\&lt;/span>&lt;span style="color:#99c794;">n(Source: CED)&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;],
&amp;quot;&lt;/span>&lt;span style="color:#99c794;">acid&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#cccece;">: &lt;/span>&lt;span style="color:#5fb3b3;">[&amp;quot;&lt;/span>&lt;span style="color:#99c794;">A compound capable of transferring a hydrogen ion in solution.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Being harsh or corrosive in tone.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Having an acid, sharp or tangy taste.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">A powerful hallucinogenic drug manufactured from lysergic acid.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Having a pH less than 7, or being sour, or having the strength to neutralize alkalis, or turning a litmus paper red.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;],
&lt;/span>&lt;span style="color:#5f6364;">// ... moar words and meanings
&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#99c794;">Paris&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#cccece;">: &lt;/span>&lt;span style="color:#5fb3b3;">[&amp;quot;&lt;/span>&lt;span style="color:#99c794;">The capital and largest city of France.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;]
}
&lt;/span>&lt;/pre>
&lt;p>We want a form that lets a user search one of this words and then shows the meaning(s). This is simple, right? What could possibly go wrong?&lt;/p>
&lt;p>Because everyone loves HTML we'll start with that.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">form &lt;/span>&lt;span style="color:#bb80b3;">id&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">search_form&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">label &lt;/span>&lt;span style="color:#bb80b3;">for&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">search_input&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&lt;/span>&lt;span style="color:#cccece;">Search a word&lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">label&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">input &lt;/span>&lt;span style="color:#bb80b3;">id&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">search_input&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; &lt;/span>&lt;span style="color:#bb80b3;">type&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">text&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">button &lt;/span>&lt;span style="color:#bb80b3;">type&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">submit&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&lt;/span>&lt;span style="color:#cccece;">Submit&lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">button&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">form&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">div &lt;/span>&lt;span style="color:#bb80b3;">id&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">result&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">div&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&lt;/span>&lt;/pre>
&lt;p>In the first version we will just try get one those values based on the user input.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
// magically retrieve the data from a file or whatever
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">entries &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">data&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">format&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">results&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">results&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">join&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">&amp;lt;br&amp;gt;&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;); &lt;/span>&lt;span style="color:#5f6364;">// I regret nothing
&lt;/span>&lt;span style="color:#5fb3b3;">}
&lt;/span>&lt;span style="color:#fac863;">window&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">search_form&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">addEventListener&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">submit&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">ev&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">ev&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">preventDefault&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">input &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">ev&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">target&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#fac863;">window&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">innerHTML &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">format&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">entries&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">input&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">]);
});
&lt;/span>&lt;/pre>
&lt;p>Naturally the first thing we try to search is &amp;quot;acid.&amp;quot; And behold here are the results.&lt;/p>
&lt;blockquote>
&lt;p>A compound capable of transferring a hydrogen ion in solution.
Being harsh or corrosive in tone.
Having an acid, sharp or tangy taste.
A powerful hallucinogenic drug manufactured from lysergic acid.
Having a pH less than 7, or being sour, or having the strength to neutralize alkalis, or turning a litmus paper red.&lt;/p>
&lt;/blockquote>
&lt;p>Now we search for &amp;quot;paris&amp;quot;, I'm sure it's there. What did we get? Nothing. Not exactly nothing, we got.&lt;/p>
&lt;blockquote>
&lt;p>TypeError: results is undefined&lt;/p>
&lt;/blockquote>
&lt;p>We also got an unpredictable submit button that sometime works and sometimes doesn't. So what do we want? What do we really, really want? Safety, objects that don't crash our application, we want reliable objects. &lt;/p>
&lt;p>What we will do is implement containers that let us describe the flow of execution without worrying about the value they hold. Sounds good, right? Let me show you what I mean with a little javascript. Try this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">is_even &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">% &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">odd_arr &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">4&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">5&lt;/span>&lt;span style="color:#5fb3b3;">].&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">is_even&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">toString&lt;/span>&lt;span style="color:#5fb3b3;">());
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">empty_arr &lt;/span>&lt;span style="color:#5fb3b3;">= [].&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">is_even&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">toString&lt;/span>&lt;span style="color:#5fb3b3;">());
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">({&lt;/span>&lt;span style="color:#cccece;">odd_arr&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">empty_arr&lt;/span>&lt;span style="color:#5fb3b3;">});
&lt;/span>&lt;/pre>
&lt;p>Did it throw an exception on the empty array? (if it did let me know). Isn't that nice? Doesn't it feel all warm and fuzzy knowing that the array methods would do the right thing even if there isn't anything to work with? That is what we want.&lt;/p>
&lt;p>You might be wondering couldn't we just write a few &lt;code>if&lt;/code> statements and be done with it? Well... yeah, but where is the fun in that? We all know that chaining functions is cool, and we are fans of functional programming, we do what every functional programming savvy does: &lt;strong>hide things under a function&lt;/strong>.&lt;/p>
&lt;p>So we are going to hide an &lt;code>if&lt;/code> statement (or maybe a couple), if the value we evaluate is undefined-ish we return a wrapper that will know how to behave no matter what happens.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// maybe.js
// (I would like to apologize for the many `thing`s you&amp;#39;ll see)
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">the_thing&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">the_thing &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">null
&lt;/span>&lt;span style="color:#5fb3b3;">|| &lt;/span>&lt;span style="color:#cccece;">the_thing &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">undefined
&lt;/span>&lt;span style="color:#5fb3b3;">|| &lt;/span>&lt;span style="color:#cccece;">the_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">is_nothing
&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">();
}
&lt;/span>&lt;span style="color:#5f6364;">// I don&amp;#39;t want nested Maybes
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">the_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">is_just&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">the_thing&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Just&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">the_thing&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>This wrappers are not going to be your standard by the book &lt;code>Maybe&lt;/code> you see in a proper functional programming language. We will cheat a little in the name of convenience and side effects. Also their methods will be named after the methods in the Option type you find in Rust (I like those names better). Here is where the magic happens.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// maybe.js
// I lied, there will be a lot of cheating and `fun`s.
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Just&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">thing&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#6699cc;">and_then&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">or_else&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">tap&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">predicate_fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt;
&lt;/span>&lt;span style="color:#6699cc;">predicate_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">)
? &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">)
: &lt;/span>&lt;span style="color:#6699cc;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">(),
&lt;/span>&lt;span style="color:#cccece;">is_just&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">is_nothing&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">inspect&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">`&lt;/span>&lt;span style="color:#99c794;">Just(&lt;/span>&lt;span style="color:#5fb3b3;">${&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">}&lt;/span>&lt;span style="color:#99c794;">)&lt;/span>&lt;span style="color:#5fb3b3;">`,
};
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#cccece;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">and_then&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">or_else&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(),
&lt;/span>&lt;span style="color:#cccece;">tap&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">filter&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">is_just&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">is_nothing&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">inspect&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">`&lt;/span>&lt;span style="color:#99c794;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">`,
};
}
&lt;/span>&lt;/pre>
&lt;p>What is the purpose of these methods?&lt;/p>
&lt;ul>
&lt;li>&lt;code>map&lt;/code>: Applies the function &lt;code>fun&lt;/code> to &lt;code>the_thing&lt;/code> and wraps it again on a Maybe to keep the party going... I mean to keep the shape of the object, so you can keep chaining functions.&lt;/li>
&lt;li>&lt;code>and_then&lt;/code>: This is mostly an escape hatch. Apply the function &lt;code>fun&lt;/code> and let fate decide.&lt;/li>
&lt;li>&lt;code>or_else&lt;/code>: It is the &lt;code>else&lt;/code> to your &lt;code>map&lt;/code> and &lt;code>and_then&lt;/code>. The other path. The &amp;quot;what if is not there?&amp;quot;&lt;/li>
&lt;li>&lt;code>tap&lt;/code>: These one is there just for the side effects. If you see it then it's probably affecting something outside of it's scope (or maybe is just the perfect place to put a &lt;code>console.log&lt;/code>).&lt;/li>
&lt;li>filter: It &amp;quot;lets you go through&amp;quot; if the predicate function returns something truthy.&lt;/li>
&lt;li>&lt;code>unwrap_or&lt;/code>: This is how you get &lt;code>the_thing&lt;/code> out. You'll want this when you're done chaining methods and you're ready to get back to the imperative world.&lt;/li>
&lt;/ul>
&lt;p>Lets go back to our form and see it in action. We'll make a function &lt;code>search&lt;/code> that may o may not retrieve a match to the user's query. If it does we'll chain other functions that will be executed in a &amp;quot;safe context.&amp;quot;&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">search &lt;/span>&lt;span style="color:#5fb3b3;">= (&lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">input&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">input&lt;/span>&lt;span style="color:#5fb3b3;">]);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">search_word &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">word &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">entries&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">word&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">format&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">word not found&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;/pre>
&lt;p>And now we replace our unholy old way with the new safe(r) function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> window.search_form.addEventListener(&amp;#39;submit&amp;#39;, function(ev) {
ev.preventDefault();
let input = ev.target[0];
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> window.result.innerHTML = format(entries[input.value]);
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> window.result.innerHTML = search_word(input.value);
&lt;/span>&lt;span style="color:#cccece;"> });
&lt;/span>&lt;/pre>
&lt;p>Now we test. Search for &amp;quot;accident.&amp;quot;&lt;/p>
&lt;blockquote>
&lt;p>An unexpected, unfortunate mishap, failure or loss with the potential for harming human life, property or the environment.
An event that happens suddenly or by chance without an apparent cause.&lt;/p>
&lt;/blockquote>
&lt;p>Now Paris. Search for &amp;quot;paris.&amp;quot;&lt;/p>
&lt;blockquote>
&lt;p>word not found&lt;/p>
&lt;/blockquote>
&lt;p>It didn't freeze the button, that's good. But I know Paris is there. If you check you'll see that is &amp;quot;Paris.&amp;quot; We'll just capitalize the user input so they don't have to. First we'll try to search the exact input, if that fails we'll try the capitalize way.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">create_search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">exact&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">input &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">word &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">exact &lt;/span>&lt;span style="color:#5fb3b3;">? &lt;/span>&lt;span style="color:#cccece;">input &lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#6699cc;">capitalize&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">input&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">word&lt;/span>&lt;span style="color:#5fb3b3;">]);
}
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">capitalize&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">str&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">charAt&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">toUpperCase&lt;/span>&lt;span style="color:#5fb3b3;">() + &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">slice&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>Change the search function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> const search = (data, input) =&amp;gt; Maybe(data[input]);
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> const search = create_search(entries, true);
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> const search_name = create_search(entries, false);
&lt;/span>&lt;span style="color:#5fb3b3;">-
-&lt;/span>&lt;span style="color:#ec5f67;"> const search_word = word =&amp;gt; search(entries, word)
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> const search_word = word =&amp;gt; search(word)
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> .or_else(() =&amp;gt; search_name(word))
&lt;/span>&lt;span style="color:#cccece;"> .map(format)
.unwrap_or(&amp;#39;word not found&amp;#39;);
&lt;/span>&lt;/pre>
&lt;p>Very nice. This what we got so far in main.js if you wanna see the whole picture.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">entries &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">data&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">create_search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">exact&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">input &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">word &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">exact &lt;/span>&lt;span style="color:#5fb3b3;">? &lt;/span>&lt;span style="color:#cccece;">input &lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#6699cc;">capitalize&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">input&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">word&lt;/span>&lt;span style="color:#5fb3b3;">]);
}
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">capitalize&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">str&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">charAt&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">toUpperCase&lt;/span>&lt;span style="color:#5fb3b3;">() + &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">slice&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">format&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">results&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">results&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">join&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">&amp;lt;br&amp;gt;&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
}
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">search &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">create_search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">entries&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">search_name &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">create_search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">entries&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">search_word &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">word &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">word&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">or_else&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">search_name&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">word&lt;/span>&lt;span style="color:#5fb3b3;">))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">format&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">word not found&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#fac863;">window&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">search_form&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">addEventListener&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">submit&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">ev&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">ev&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">preventDefault&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">input &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">ev&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">target&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#fac863;">window&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">innerHTML &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">search_word&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">input&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
});
&lt;/span>&lt;/pre>
&lt;p>But is that all we want in life? No, of course not, we want love but since javascript can't give us that we'll settle for a little &amp;quot;suggest word&amp;quot; feature. I want to search &amp;quot;accu&amp;quot; and have a confirm dialog telling me &amp;quot;Did you mean accumulator?&amp;quot;&lt;/p>
&lt;p>We'll need help with this one, we'll bring a dependency, one that can perform a fuzzy search on the entries: &lt;a href="https://github.com/wouter2203/fuzzy-search#readme">fuzzy-search&lt;/a>. So we add the following. &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">import &lt;/span>&lt;span style="color:#cccece;">FuzzySearch &lt;/span>&lt;span style="color:#c594c5;">from &lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">https://unpkg.com/fuzzy-search@3.0.1/src/FuzzySearch.js&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">fzf &lt;/span>&lt;span style="color:#5fb3b3;">= new &lt;/span>&lt;span style="color:#cccece;">FuzzySearch&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#fac863;">Object&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">keys&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">entries&lt;/span>&lt;span style="color:#5fb3b3;">),
[],
{&lt;/span>&lt;span style="color:#6699cc;">caseSensitive&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">sort&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">}
);
&lt;/span>&lt;/pre>
&lt;p>But again we can't perform a safe operation 'cause the moment we try to get a match from an empty array the whole thing will fall apart. So what do we do? We hide things under a function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">suggest&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">word&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">matches &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fzf&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">word&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">matches&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">]);
}
&lt;/span>&lt;/pre>
&lt;p>Fuzzy search is ready, now lets throw in a super awesome confirm dialog. You'll love it.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">confirm_word&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value &lt;/span>&lt;span style="color:#5fb3b3;">&amp;amp;&amp;amp; &lt;/span>&lt;span style="color:#6699cc;">confirm&lt;/span>&lt;span style="color:#5fb3b3;">(`&lt;/span>&lt;span style="color:#99c794;">Did you mean &lt;/span>&lt;span style="color:#5fb3b3;">${&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">}`)) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
}
&lt;/span>&lt;/pre>
&lt;p>We combine the new functions with our &lt;code>search&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">suggest_word &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">suggest&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">confirm_word&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">search&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Add the feature to &lt;code>search_word&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const search_word = word =&amp;gt; search(word)
.or_else(() =&amp;gt; search_name(word))
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> .or_else(suggest_word(word))
&lt;/span>&lt;span style="color:#cccece;"> .map(format)
.unwrap_or(&amp;#39;word not found&amp;#39;);
&lt;/span>&lt;/pre>
&lt;p>That works! But lets say we are allergic to &lt;code>if&lt;/code> statements and not to mention that it's just rude to return &lt;code>undefined&lt;/code> from a function. We can do better.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> function confirm_word(value) {
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> if(value &amp;amp;&amp;amp; confirm(`Did you mean ${value}`)) {
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> return value;
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> }
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> return confirm(`Did you mean ${value}`);
&lt;/span>&lt;span style="color:#cccece;"> }
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const suggest_word = value =&amp;gt; () =&amp;gt; suggest(value)
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> .map(confirm_word)
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> .filter(confirm_word)
&lt;/span>&lt;span style="color:#cccece;"> .map(search);
&lt;/span>&lt;/pre>
&lt;p>Something bugs me. I search &amp;quot;accu&amp;quot;, the dialog pops in, I confirm the suggestion and the results appears. But &amp;quot;accu&amp;quot; it's still there in the input, it's awkward. Lets update the input with the right word.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">update_input &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">window&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">search_form&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">].&lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const suggest_word = value =&amp;gt; () =&amp;gt; suggest(value)
.filter(confirm_word)
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> .tap(update_input)
&lt;/span>&lt;span style="color:#cccece;"> .map(search);
&lt;/span>&lt;/pre>
&lt;p>Want to see it in action? There you go.&lt;/p>
&lt;p
class="codepen"
data-height="600"
data-theme-id="dark"
data-default-tab="js,result"
data-user="VonHeikemen"
data-slug-hash="JjjNvLE"
data-preview="true"
style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"
data-pen-title="Maybe I got your word">
&lt;span>
See the Pen &lt;a href="https://codepen.io/VonHeikemen/pen/JjjNvLE">Maybe I got your word&lt;/a> by Heiker (&lt;a href="https://codepen.io/VonHeikemen">@VonHeikemen&lt;/a>) on &lt;a href="https://codepen.io">CodePen&lt;/a>.
&lt;/span>
&lt;/p>
&lt;script async src="https://static.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;h2 id="bonus-track">Bonus track&lt;/h2>
&lt;blockquote>
&lt;p>&lt;em>Warning&lt;/em>: The main point of the post (which is me showing that codepen example) was already accomplished. What follows is a strange experiment to see if I could make that &lt;code>Maybe&lt;/code> function support asynchronous operations. If you are tired just skip everything and check out the last example code.&lt;/p>
&lt;/blockquote>
&lt;p>Now you might be saying: this is cute and all but in the &amp;quot;real world&amp;quot; we make http requests, query a database, make all sorts of asynchronous stuff, can this still be useful in that context?&lt;/p>
&lt;p>I hear you. Our current implementation just supports normal blocking tasks. You would have to break the chain of &lt;code>Maybes&lt;/code> the moment a &lt;code>Promise&lt;/code> shows up. &lt;/p>
&lt;p>But what if... listen... we make a promise aware &lt;code>Just&lt;/code>. We can do that, an &lt;code>AsyncJust&lt;/code>? &lt;code>JustAsync&lt;/code>? Oh, that's awful.&lt;/p>
&lt;p>If you don't know, a &lt;code>Promise&lt;/code> is a data type that javascript uses to coordinate future events. To do so it uses a method called &lt;code>then&lt;/code> that takes a callback (it also has &lt;code>catch&lt;/code> for when things go wrong) So if we hijack what goes into that &lt;code>then&lt;/code> then we can keep our nice &lt;code>Maybe&lt;/code> interface.&lt;/p>
&lt;p>How good are you following a bunch of callbacks?&lt;/p>
&lt;p>Here I go. Let me show you the &lt;code>Future&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Don&amp;#39;t judge me.
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">map_future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">))),
&lt;/span>&lt;span style="color:#6699cc;">and_then&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">map_future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">))),
&lt;/span>&lt;span style="color:#6699cc;">or_else&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">catch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#6699cc;">tap&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">))),
&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">catch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">filter_future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">))),
&lt;/span>&lt;span style="color:#cccece;">is_just&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">is_nothing&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">is_future&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">inspect&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">`&lt;/span>&lt;span style="color:#99c794;">&amp;lt;Promise&amp;gt;&lt;/span>&lt;span style="color:#5fb3b3;">`
};
}
&lt;/span>&lt;/pre>
&lt;p>If we remove the noise maybe we could understand better.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// In it&amp;#39;s very core is callbacks all the way.
&lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#cccece;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">and_then: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">or_else: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">catch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">tap: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">))&lt;/span>&lt;span style="color:#cccece;">)&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">unwrap_or: &lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">catch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">filter: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">}
&lt;/span>&lt;/pre>
&lt;ul>
&lt;li>&lt;code>map&lt;/code>/&lt;code>and_then&lt;/code>: these do the same thing because you can't get out of a &lt;code>Promise&lt;/code>. &lt;/li>
&lt;li>&lt;code>or_else&lt;/code>: puts your callback in the &lt;code>catch&lt;/code> method to mimic an &lt;code>else&lt;/code> behavior.&lt;/li>
&lt;li>&lt;code>tap&lt;/code>: uses &lt;code>then&lt;/code> to peek at the value. Since this is for side effects we return the value again.&lt;/li>
&lt;li>&lt;code>unwrap_or&lt;/code>: It will return the promise so you can use &lt;code>await&lt;/code>. If everything goes well the original value of the &lt;code>Promise&lt;/code> will be returned when you &lt;code>await&lt;/code>, else the provided argument will be returned. Either way the promise doesn't throw an error because the &lt;code>Future&lt;/code> attached the &lt;code>catch&lt;/code> method to it.&lt;/li>
&lt;li>&lt;code>filter&lt;/code>: these one is a special kind of &lt;code>map&lt;/code> that's why &lt;code>filter_future&lt;/code> exists.&lt;/li>
&lt;li>Almost all these methods return a new &lt;code>Future&lt;/code> 'cause &lt;code>promise.then&lt;/code> returns a new &lt;code>Promise&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>What makes the &lt;code>Future&lt;/code> weird is what happens inside &lt;code>map&lt;/code>. Remember &lt;code>map_future&lt;/code>?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">map_future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fun&lt;/span>&lt;span style="color:#5fb3b3;">) { &lt;/span>&lt;span style="color:#5f6364;">// `fun` is the user&amp;#39;s callback
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#5f6364;">/* Evaluate the original value */
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">promise_content &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#5f6364;">// It needs to decide if the value of the Promise
// can be trusted
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_content&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#cccece;">is_nothing&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">reject&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">return&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#5f6364;">// If it is a Just then unwrap it.
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_content&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">is_just&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">promise_content &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">();
}
&lt;/span>&lt;span style="color:#5f6364;">/* Evaluate the return value of the user&amp;#39;s callback */
// Use Maybe because I have trust issues.
// For the javascript world is undefined and full of errors.
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_content&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">is_just&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// If it gets here it&amp;#39;s all good.
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">();
}
&lt;/span>&lt;span style="color:#5f6364;">// at this point i should check if result is a Future
// if that happens you are using them in a wrong way
// so for now I don&amp;#39;t do it
// There is something seriously wrong.
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">reject&lt;/span>&lt;span style="color:#5fb3b3;">();
}
}
&lt;/span>&lt;/pre>
&lt;p>Now &lt;code>filter_future&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">filter_future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">predicate_fun&lt;/span>&lt;span style="color:#5fb3b3;">) { &lt;/span>&lt;span style="color:#5f6364;">// the user&amp;#39;s function
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">predicate_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Did you just returned a `Promise`?
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">then&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// You did! That&amp;#39;s why you can&amp;#39;t have nice things.
// peek inside the user&amp;#39;s promise.
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">return_result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">the_real_result &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">the_real_result
&lt;/span>&lt;span style="color:#5fb3b3;">? &lt;/span>&lt;span style="color:#cccece;">val
&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">reject&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#5f6364;">// keep the promise chain alive.
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">return_result&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">? &lt;/span>&lt;span style="color:#cccece;">val &lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">reject&lt;/span>&lt;span style="color:#5fb3b3;">();
}
}
&lt;/span>&lt;/pre>
&lt;p>There is one last thing I would like to do and that is create a helper function to convert a regular value into a &lt;code>Future&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#fac863;">Future&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">from_val &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">resolve&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;/pre>
&lt;p>All we have to do now to support a &lt;code>Future&lt;/code> in a &lt;code>Maybe&lt;/code> is this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> function Maybe(the_thing) {
if(the_thing === null
|| the_thing === undefined
|| the_thing.is_nothing
) {
return Nothing();
}
&lt;/span>&lt;span style="color:#5fb3b3;">-
-&lt;/span>&lt;span style="color:#ec5f67;"> if(the_thing.is_just) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> if(the_thing.is_future || the_thing.is_just) {
&lt;/span>&lt;span style="color:#cccece;"> return the_thing;
}
return Just(the_thing);
}
&lt;/span>&lt;/pre>
&lt;p>But the million dollar question remains. Does it actually work?&lt;/p>
&lt;p>I have &lt;a href="https://github.com/VonHeikemen/maybe-type-in-js">CLI version&lt;/a> of this. And here is the same codepen example with some tweaks: I added the &lt;code>Future&lt;/code> related functions, the confirm dialog is actually a dialog (&lt;a href="https://github.hubspot.com/vex/">this one&lt;/a>) and the event listener is now an async function that can &lt;code>await&lt;/code> the result.&lt;/p>
&lt;p
class="codepen"
data-height="600"
data-theme-id="dark"
data-default-tab="js,result"
data-user="VonHeikemen"
data-slug-hash="oNNwagG"
data-preview="true"
style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"
data-pen-title="Maybe I will promise you a word">
&lt;span>
See the Pen &lt;a href="https://codepen.io/VonHeikemen/pen/oNNwagG">Maybe I will promise you a word&lt;/a> by Heiker (&lt;a href="https://codepen.io/VonHeikemen">@VonHeikemen&lt;/a>) on &lt;a href="https://codepen.io">CodePen&lt;/a>.
&lt;/span>
&lt;/p>
&lt;h3 id="bonus-bonus-edit">Bonus bonus edit&lt;/h3>
&lt;p>That is how it looks like when we cheat. If we didn't cheat it would be like &lt;a href="https://codepen.io/VonHeikemen/pen/QWWYJwZ">this&lt;/a>.&lt;/p>
&lt;h2 id="other-resources">Other resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.toptal.com/javascript/option-maybe-either-future-monads-js">Option/Maybe, Either, and Future Monads in JavaScript, Python, Ruby, Swift, and Scala&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jrsinclair.com/articles/2016/marvellously-mysterious-javascript-maybe-monad/">The Marvellously Mysterious JavaScript Maybe Monad&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=pgq-Pfg6ul4">Monad Mini-Series: Functors (video)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=SfWR3dKnFIo">Oh Composable World! (video)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Homemade observables</title><pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/web-development/homemade-observables/</link><guid>https://vonheikemen.github.io/devlog/web-development/homemade-observables/</guid><description>&lt;p>On this episode we will build our own implementation of an observable. I hope that by the end of this post we gain a better understanding of this pattern that is used in libraries like RxJS.&lt;/p>
&lt;h2 id="about-observables">About Observables&lt;/h2>
&lt;h3 id="what-is-it">What is it?&lt;/h3>
&lt;p>Lets start with &lt;strong>my&lt;/strong> definition of observable.&lt;/p>
&lt;blockquote>
&lt;p>An Observable is a function that follows a convention and is used to connect a data source with a consumer.&lt;/p>
&lt;/blockquote>
&lt;p>In our case a data source is something that produces values. And, a consumer is something that receives values from a data source.&lt;/p>
&lt;h3 id="fun-facts">Fun facts&lt;/h3>
&lt;h4 id="observables-are-lazy">Observables are lazy&lt;/h4>
&lt;p>That means that they would not do any kind of work until it's absolutely necessary. Nothing will happen until you subscribe to them.&lt;/p>
&lt;h4 id="they-can-emit-multiple-values">They can emit multiple values&lt;/h4>
&lt;p>Depending on the data source you can receive a finite number of values or an infinite stream of values.&lt;/p>
&lt;h4 id="they-can-be-synchronous-or-asynchronous">They can be synchronous or asynchronous&lt;/h4>
&lt;p>It all depends on their internal implementation. You can setup an observable that process some stream of data in a synchronous way or create one from an event that can happen over time.&lt;/p>
&lt;h3 id="some-rules">Some rules&lt;/h3>
&lt;p>Remember when I said that observables follow a convention? Well, we are going to make our own arbitrary rules that our implementation will follow. These will be important because we are going to build a little ecosystem around our observables.&lt;/p>
&lt;p>Here we go:&lt;/p>
&lt;ol>
&lt;li>An observable instance will have a &lt;code>subscribe&lt;/code> method.&lt;/li>
&lt;li>The observable &amp;quot;factory&amp;quot; will take a &lt;code>subscriber&lt;/code> function as a parameter.&lt;/li>
&lt;li>The &lt;code>subscriber&lt;/code> function will take an &lt;code>observer&lt;/code> object as a parameter.&lt;/li>
&lt;li>The &lt;code>observer&lt;/code> object can implement these methods &lt;code>next&lt;/code>, &lt;code>error&lt;/code> and &lt;code>complete&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>Now, lets do stuff.&lt;/p>
&lt;h3 id="the-code">The code&lt;/h3>
&lt;h4 id="factory-function">Factory function&lt;/h4>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">subscriber&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">observer &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">subscriber&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">)
};
}
&lt;/span>&lt;span style="color:#5f6364;">// I swear to you, this works.
&lt;/span>&lt;/pre>
&lt;p>That is less magical than I thought. What we see here is that the &lt;strong>Observable&lt;/strong> factory is just a way to postpone the work that has to be done until you call subscribe. The &lt;code>subscriber&lt;/code> function is doing the heavy lifting, that's good because we can do whatever we want in there, is what will make our observables useful.&lt;/p>
&lt;p>So far I haven't done a really good job explaining the &lt;code>observer&lt;/code> and the &lt;code>subscriber&lt;/code> roles. I hope it'll become clear when you see them in action.&lt;/p>
&lt;h2 id="a-use-case">A use case&lt;/h2>
&lt;p>Say that we want to convert an array into an Observable. How can we do this?&lt;/p>
&lt;p>Lets think about what we know: &lt;/p>
&lt;ul>
&lt;li>We can do all of our logic inside the &lt;code>subscriber&lt;/code> function.&lt;/li>
&lt;li>We can expect an observer object with three methods, &lt;code>next&lt;/code>, &lt;code>error&lt;/code> and &lt;code>complete&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>We can use the methods of the observer object as communication channels. The &lt;code>next&lt;/code> function will receive the values that our data source gives us. The &lt;code>error&lt;/code> will handle any errors we throw at it, it will be like the &lt;code>catch&lt;/code> function in the &lt;code>Promise&lt;/code> class. And, we will use the &lt;code>complete&lt;/code> method when the data source is done producing values.&lt;/p>
&lt;p>Our array to observable function could look like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">fromArray&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">arr&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">observer&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">try &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#cccece;">arr&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">forEach&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">next&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">complete&lt;/span>&lt;span style="color:#5fb3b3;">();
} &lt;/span>&lt;span style="color:#c594c5;">catch &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">e&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">error&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">e&lt;/span>&lt;span style="color:#5fb3b3;">);
}
});
}
&lt;/span>&lt;span style="color:#5f6364;">// This is how we use it
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">arrayStream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">fromArray&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">4&lt;/span>&lt;span style="color:#5fb3b3;">]);
&lt;/span>&lt;span style="color:#cccece;">arrayStream&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">({
&lt;/span>&lt;span style="color:#6699cc;">next&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">error&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">err &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">error&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">err&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">complete&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">info&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">Nothing more to give&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
});
&lt;/span>&lt;span style="color:#5f6364;">// And now watch all the action on the console
&lt;/span>&lt;/pre>&lt;h3 id="be-safe">Be safe&lt;/h3>
&lt;p>Right now the observer object is basically a lawless town, we could do all sorts of weird stuff like sending yet another value to &lt;code>next&lt;/code> even after we call the &lt;code>complete&lt;/code> method. Ideally our observables should give us some guarantees, like:&lt;/p>
&lt;ul>
&lt;li>The methods on the observer object should be optional.&lt;/li>
&lt;li>The &lt;code>complete&lt;/code> and &lt;code>error&lt;/code> methods need to call the unsubscribe function (if there is one).&lt;/li>
&lt;li>If you unsubscribe, you can't call &lt;code>next&lt;/code>, &lt;code>complete&lt;/code> or &lt;code>error&lt;/code>.&lt;/li>
&lt;li>If the &lt;code>complete&lt;/code> or &lt;code>error&lt;/code> method were called, no more values are emitted. &lt;/li>
&lt;/ul>
&lt;h3 id="interactive-example">Interactive example&lt;/h3>
&lt;p>We can actually start doing some interesting things with what we learned so far. In this example I made a helper function that let me create an observable from a DOM event.&lt;/p>
&lt;p
class="codepen"
data-height="600"
data-theme-id="dark"
data-default-tab="js,result"
data-user="VonHeikemen"
data-slug-hash="wxNYPV"
data-preview="true"
style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"
data-pen-title="Observables - basics">
&lt;span>
See the Pen &lt;a href="https://codepen.io/VonHeikemen/pen/wxNYPV">Observables - basics&lt;/a> by Heiker (&lt;a href="https://codepen.io/VonHeikemen">@VonHeikemen&lt;/a>) on &lt;a href="https://codepen.io">CodePen&lt;/a>.
&lt;/span>
&lt;/p>
&lt;script async src="https://static.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;p>Now we will learn how we can manipulate existing Observables to extend their behavior.&lt;/p>
&lt;h2 id="it-all-starts-with-operators">It all starts with operators&lt;/h2>
&lt;p>This time we'll create some utility functions, and tweak a little bit our current Observable implementation, in order to create more flexible features with them.&lt;/p>
&lt;p>Operators are functions that allow us to extend the behavior of an observable with a chain of functions. Each of this functions can take an observable as a data source and returns a new observable.&lt;/p>
&lt;p>Lets keep the array theme in here and create a &lt;strong>map&lt;/strong> operator that emulates the native map function of the Array prototype, but for observables. Our operator will do this: take a value, apply a function that will perform some transformation and return a new value.&lt;/p>
&lt;p>Lets give it a try:&lt;/p>
&lt;p>First step, get the transform function and the data source, then return a new observable that we can use.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">transformFn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">source$&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">observer&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// to be continued...
&lt;/span>&lt;span style="color:#5fb3b3;">});
}
&lt;/span>&lt;/pre>
&lt;p>Here comes the cool part, the source that we get is an observable and that means we can subscribe to it to get some values.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">transformFn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">source$&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">observer&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// remember to keep returning values from your functions.
// This will return the unsubcribe function
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">source$&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// to be continued...
&lt;/span>&lt;span style="color:#5fb3b3;">});
});
}
&lt;/span>&lt;/pre>
&lt;p>Now we need to pass the result of the transformation to the observer so we can &amp;quot;see&amp;quot; it when we subscribe to this new observable.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">transformFn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">source$&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">observer&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">source$&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// ****** WE ARE HERE ******
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">newValue &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">transformFn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">next&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">newValue&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// *************************
&lt;/span>&lt;span style="color:#5fb3b3;">});
});
}
&lt;/span>&lt;/pre>
&lt;p>There is a lot of indentation and returns going on in here. We can &amp;quot;fix&amp;quot; that if we use arrow functions all the way.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">transformFn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">source$&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">observer &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt;
&lt;/span>&lt;span style="color:#cccece;">source$&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">next&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#6699cc;">transformFn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)
))
);
}
&lt;/span>&lt;span style="color:#5f6364;">// that didn&amp;#39;t do much for the indentation.
// Well, you can&amp;#39;t win them all.
&lt;/span>&lt;/pre>
&lt;p>We still need to use the operator and right now this will be it.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">fromArray&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">arr&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">observer&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">arr&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">forEach&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">next&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">complete&lt;/span>&lt;span style="color:#5fb3b3;">();
});
}
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">thisArray &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">4&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#6699cc;">plusOne &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">array$ &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">plusOne&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">fromArray&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thisArray&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#cccece;">array$&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;/pre>
&lt;p>This doesn't feel very chainy. In order to use more of this map functions we would have to nest them, and that ain't right. Don't worry, we'll get to that in a moment.&lt;/p>
&lt;h2 id="pipe-all-the-things">Pipe all the things&lt;/h2>
&lt;p>We will create a helper function that will allow us to use one or more operators that can modify an observable source. &lt;/p>
&lt;p>This function will take a collection of functions, and each function in the collection will use the return value of the previous function as an input.&lt;/p>
&lt;p>First, I'm going to show how this could be done as a standalone helper function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">aFunctionArray&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">initialSource&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#6699cc;">reducerFn &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">source&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">source&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
};
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">finalResult &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">aFunctionArray&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">reducerFn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">initialSource&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">finalResult&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>In here the &lt;strong>reduce&lt;/strong> function loops over the array and for each element in it executes &lt;strong>reducerFn&lt;/strong>. Inside reducerFn in the first loop, &lt;strong>source&lt;/strong> will be &lt;strong>initialSource&lt;/strong> and in the rest of the loops &lt;strong>source&lt;/strong> will be whatever you return from reducerFn. The &lt;strong>finalResult&lt;/strong> is just the last result returned from reducerFn.&lt;/p>
&lt;p>With some modifications (ES6+ goodness included) we can use this helper function within our Observable factory to make it more flexible. Our new factory would now look like this:&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Observable &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">subscriber&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">observable &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">observer &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">subscriber&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">SafeObserver&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">fns&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">((&lt;/span>&lt;span style="color:#f99157;">source&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">source&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">observable&lt;/span>&lt;span style="color:#5fb3b3;">);
}
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">observable&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>We need to do one more thing to make sure our operators are compatible with this new pipe function. For example, our current &lt;strong>map&lt;/strong> operator expects both &lt;strong>transformFn&lt;/strong> and &lt;strong>source&lt;/strong> at the same time. That just won't happen inside pipe. Will have to split it into two functions, one that will take the initial necessary parameters to make it work and another one that takes the source observable.&lt;/p>
&lt;p>There are a couple of ways we can do this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Option 1
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">transformFn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// Instead of returning an observable
// we return a function that expects a source
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">source$ &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">observer &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt;
&lt;/span>&lt;span style="color:#cccece;">source$&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">next&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#6699cc;">transformFn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)
))
);
}
&lt;/span>&lt;span style="color:#5f6364;">// Option 2
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">transformFn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">source$&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">source$ &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">undefined&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// we&amp;#39;ll return a function
// that will &amp;quot;remember&amp;quot; the transform function
// and expect the source and put in its place.
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">placeholder &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">transformFn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">placeholder&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">observer &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt;
&lt;/span>&lt;span style="color:#cccece;">source$&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">next&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#6699cc;">transformFn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)
))
);
}
&lt;/span>&lt;/pre>
&lt;p>And finally we can extend our observable in this way:&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">thisArray &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">4&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#6699cc;">plusOne &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#6699cc;">timesTwo &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">* &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">array$ &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">fromArray&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thisArray&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">plusOne&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">timesTwo&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">`&lt;/span>&lt;span style="color:#99c794;">number: &lt;/span>&lt;span style="color:#5fb3b3;">${&lt;/span>&lt;span style="color:#cccece;">num&lt;/span>&lt;span style="color:#5fb3b3;">}`),
&lt;/span>&lt;span style="color:#5f6364;">// ... many more operators
&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#cccece;">array$&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;/pre>
&lt;p>Now we are ready to create more operators.&lt;/p>
&lt;h2 id="exercise-time">Exercise time&lt;/h2>
&lt;p>Lets say that we have a piece of code that prints a &amp;quot;time string&amp;quot; to the console every second, and stops after five seconds (because why not). This guy right here:&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">startTimer&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">time &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">interval &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">setInterval&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#cccece;">time &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">time &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">minutes &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Math&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">floor&lt;/span>&lt;span style="color:#5fb3b3;">((&lt;/span>&lt;span style="color:#cccece;">time &lt;/span>&lt;span style="color:#5fb3b3;">/ &lt;/span>&lt;span style="color:#f99157;">60&lt;/span>&lt;span style="color:#5fb3b3;">) % &lt;/span>&lt;span style="color:#f99157;">60&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">toString&lt;/span>&lt;span style="color:#5fb3b3;">().&lt;/span>&lt;span style="color:#6699cc;">padStart&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">0&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">seconds &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Math&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">floor&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">time &lt;/span>&lt;span style="color:#5fb3b3;">% &lt;/span>&lt;span style="color:#f99157;">60&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">toString&lt;/span>&lt;span style="color:#5fb3b3;">().&lt;/span>&lt;span style="color:#6699cc;">padStart&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">0&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">timeString &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">minutes &lt;/span>&lt;span style="color:#5fb3b3;">+ &amp;#39;&lt;/span>&lt;span style="color:#99c794;">:&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39; + &lt;/span>&lt;span style="color:#cccece;">seconds&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">timeString&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">timeString &lt;/span>&lt;span style="color:#5fb3b3;">=== &amp;#39;&lt;/span>&lt;span style="color:#99c794;">00:05&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;) {
&lt;/span>&lt;span style="color:#6699cc;">clearInterval&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">interval&lt;/span>&lt;span style="color:#5fb3b3;">);
}
}, &lt;/span>&lt;span style="color:#f99157;">1000&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>There is nothing wrong with this piece of code. I mean, it does the job, it's predictable, and everything you need to know about it is there in plain sight. But you know, we are in a refactoring mood and we just learned something new. We'll turn this into an observable thingy.&lt;/p>
&lt;p>First things first, lets make a couple of helper function that handle the formatting and time calculations.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">paddedNumber&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">num&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">toString&lt;/span>&lt;span style="color:#5fb3b3;">().&lt;/span>&lt;span style="color:#6699cc;">padStart&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">0&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">readableTime&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">time&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">minutes &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Math&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">floor&lt;/span>&lt;span style="color:#5fb3b3;">((&lt;/span>&lt;span style="color:#cccece;">time &lt;/span>&lt;span style="color:#5fb3b3;">/ &lt;/span>&lt;span style="color:#f99157;">60&lt;/span>&lt;span style="color:#5fb3b3;">) % &lt;/span>&lt;span style="color:#f99157;">60&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">seconds &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Math&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">floor&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">time &lt;/span>&lt;span style="color:#5fb3b3;">% &lt;/span>&lt;span style="color:#f99157;">60&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">paddedNumber&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">minutes&lt;/span>&lt;span style="color:#5fb3b3;">) + &amp;#39;&lt;/span>&lt;span style="color:#99c794;">:&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39; + &lt;/span>&lt;span style="color:#6699cc;">paddedNumber&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">seconds&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>Now lets handle the time. &lt;em>setInterval&lt;/em> is a great candidate for a data source, it takes a callback in which we could produce values, it also has a &amp;quot;cleanup&amp;quot; mechanism. It just makes the perfect observable.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">interval&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">delay&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">observer&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">counter &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#6699cc;">callback &lt;/span>&lt;span style="color:#5fb3b3;">= () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">next&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">counter&lt;/span>&lt;span style="color:#5fb3b3;">++);
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">_interval &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">setInterval&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">callback&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">delay&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">setUnsubscribe&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">clearInterval&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">_interval&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">unsubscribe&lt;/span>&lt;span style="color:#5fb3b3;">;
});
}
&lt;/span>&lt;/pre>
&lt;p>This is amazing, we now have really reusable way to set and destroy an interval.&lt;/p>
&lt;p>You may have notice that we are passing a number to the observer, we are not calling it &lt;em>seconds&lt;/em> because the &lt;strong>delay&lt;/strong> can be any arbitrary number. In here we're not keeping track of the time, we are merely counting how many times the callback has been executed. Why? Because we want to make every observable factory as generic as possible. We can always modify the value that it emits by using operators.&lt;/p>
&lt;p>This how we could use our new interval function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// pretend we have our helper functions in scope.
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">time$ &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">interval&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1000&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">plusOne&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">readableTime&lt;/span>&lt;span style="color:#5fb3b3;">)
);
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">unsubscribe &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">time$&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">timeString&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">timeString&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">timeString &lt;/span>&lt;span style="color:#5fb3b3;">=== &amp;#39;&lt;/span>&lt;span style="color:#99c794;">00:05&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;) {
&lt;/span>&lt;span style="color:#6699cc;">unsubscribe&lt;/span>&lt;span style="color:#5fb3b3;">();
}
});
&lt;/span>&lt;/pre>
&lt;p>That's better. But that &lt;em>if&lt;/em> bothers me. I feel like that behavior doesn't belong in there. You know what? I'll make an operator that can unsubscribe to the interval after it emits five values.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// I&amp;#39;ll named &amp;quot;take&amp;quot; because naming is hard.
// Also, that is how is called in other libraries.
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">take&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">total&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">source$ &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">observer&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// we&amp;#39;ll have our own counter because I don&amp;#39;t trust in the values
// that other observables emits
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">count &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">unsubscribeSource &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">source$&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">count&lt;/span>&lt;span style="color:#5fb3b3;">++;
&lt;/span>&lt;span style="color:#5f6364;">// we pass every single value to the observer.
// the subscribe function will still get every value in the stream
&lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">next&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">count &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#cccece;">total&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// we signal the completion of the stream and &amp;quot;destroy&amp;quot; the thing
&lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">complete&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#6699cc;">unsubscribeSource&lt;/span>&lt;span style="color:#5fb3b3;">();
}
});
});
}
&lt;/span>&lt;/pre>
&lt;p>Now we can have a self destructing timer. Finally.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// pretend we have our helper functions in scope.
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">time$ &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">interval&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1000&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">plusOne&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">readableTime&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">take&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">5&lt;/span>&lt;span style="color:#5fb3b3;">)
);
&lt;/span>&lt;span style="color:#cccece;">time$&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">subscribe&lt;/span>&lt;span style="color:#5fb3b3;">({
&lt;/span>&lt;span style="color:#6699cc;">next&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">timeString &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">timeString&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">complete&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">info&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">Time&amp;#39;s up&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;)
});
&lt;/span>&lt;/pre>&lt;h2 id="playgrounds">Playgrounds&lt;/h2>
&lt;p>I made a couple of pens so you can play around with this stuff. &lt;a href="https://codepen.io/VonHeikemen/pen/OwQYxG">This pen&lt;/a> contains all the Observable related code that I wrote for this posts and them some more.&lt;/p>
&lt;p>And this is the pen for the exercise.&lt;/p>
&lt;p
class="codepen"
data-height="600"
data-theme-id="dark"
data-default-tab="js,result"
data-user="VonHeikemen"
data-slug-hash="VGZXZa"
data-preview="true"
style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"
data-pen-title="Observables - boring timer">
&lt;span>
See the Pen &lt;a href="https://codepen.io/VonHeikemen/pen/VGZXZa">Observables - boring timer&lt;/a> by Heiker (&lt;a href="https://codepen.io/VonHeikemen">@VonHeikemen&lt;/a>) on &lt;a href="https://codepen.io">CodePen&lt;/a>.
&lt;/span>
&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Observables are a powerful thing, with a little bit of creativity you can turn anything you want into an observable. Really. A promise, an AJAX request, a DOM event, an array, a time interval and anything you can imagine can be a source of data that can be wrapped in an observable.&lt;/p>
&lt;p>They are a powerful abstraction. They can let you process streams of data one chunk at a time. Not only that, but also let you piece together solutions that can be compose by generic functions and custom functions specific to the problem at hand. &lt;/p>
&lt;p>Fair warning though. They are not the ultimate solution to every problem. You'll have to decide if the complexity is worth it. Like in the exercise, we lose the simplicity of the &lt;em>startTimer&lt;/em> in order to gain some flexibility (that we could've achieve some other way).&lt;/p>
&lt;h2 id="sources">Sources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@benlesh/learning-observable-by-building-observable-d5da57405d87">Learning Observable By Building Observable&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@kevinkreuzer/observables-just-powerful-functions-a033c355b22c">Observables, just powerful functions?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://netbasal.com/whos-afraid-of-observables-bde0dc4f48cc">Who’s Afraid of Observables?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://netbasal.com/understanding-mergemap-and-switchmap-in-rxjs-13cf9c57c885">Understanding mergeMap and switchMap in RxJS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://netbasal.com/javascript-observables-under-the-hood-2423f760584">JavaScript — Observables Under The Hood&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/zenparsing/zen-observable">Github repository - zen-observable&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dev.to/supermanitu/understanding-observables">Understanding Observables&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Thank you for reading.&lt;/p></description></item></channel></rss>