<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Devlog</title><link>https://vonheikemen.github.io/devlog/</link><description/><generator>Zola</generator><language>en</language><atom:link href="https://vonheikemen.github.io/devlog/tags/beginners/rss.xml" rel="self" type="application/rss+xml"/><lastBuildDate>Thu, 07 Nov 2019 00:00:00 +0000</lastBuildDate><item><title>Taking a look at finite state machines</title><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/web-development/taking-a-look-at-finite-state-machine/</link><guid>https://vonheikemen.github.io/devlog/web-development/taking-a-look-at-finite-state-machine/</guid><description>&lt;h2 id="the-finite-who-what">The finite who-- what?&lt;/h2>
&lt;p>It is a way of modeling the behavior of a system. The idea is that your &amp;quot;system&amp;quot; can only be in one state at any given time, and an input (or event) can trigger the transition to another state.&lt;/p>
&lt;h2 id="what-kind-of-problems-does-it-solve">What kind of problems does it solve?&lt;/h2>
&lt;p>Invalid state. How many times have you used a flag or attribute like &amp;quot;disabled&amp;quot; to prevent a user from doing something they shouldn't do? By setting the rules of our system we can avoid these kind of problems.&lt;/p>
&lt;h2 id="how-does-that-look-like-in-javascript">How does that look like in javascript?&lt;/h2>
&lt;p>I'm very glad you asked. The real reason I'm writing this is to show you a library that I saw the other day. We are going to use &lt;a href="https://thisrobot.life/">robot3&lt;/a> to built a random quote machine.&lt;/p>
&lt;p>We will make a card that displays a quote and below that we'll have a button that will fetch another quote.&lt;/p>
&lt;p>We'll do it one step at a time. Let's first prepare the states. &lt;/p>
&lt;p>Our card will be either &lt;code>idle&lt;/code> or &lt;code>loading&lt;/code>. Create a machine with that.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">import &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#cccece;">createMachine&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">interpret
&lt;/span>&lt;span style="color:#5fb3b3;">} &lt;/span>&lt;span style="color:#c594c5;">from &lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">https://unpkg.com/robot3@0.2.9/machine.js&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">mr_robot &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">createMachine&lt;/span>&lt;span style="color:#5fb3b3;">({
&lt;/span>&lt;span style="color:#6699cc;">idle&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#6699cc;">state&lt;/span>&lt;span style="color:#5fb3b3;">(),
&lt;/span>&lt;span style="color:#6699cc;">loading&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#6699cc;">state&lt;/span>&lt;span style="color:#5fb3b3;">()
});
&lt;/span>&lt;/pre>
&lt;p>In here each &lt;code>state&lt;/code> is a key in the &amp;quot;setup object&amp;quot; that we pass to &lt;code>createMachine&lt;/code>, but also notice that it needs to be a &lt;code>state&lt;/code> object, which we create with the &lt;code>state&lt;/code> function.&lt;/p>
&lt;p>Now we need transitions. Our &lt;code>idle&lt;/code> state will switch to &lt;code>loading&lt;/code> if a &lt;code>fetch&lt;/code> event happens, &lt;code>loading&lt;/code> will go back to &lt;code>idle&lt;/code> if a &lt;code>done&lt;/code> is dispatched. &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> import {
createMachine,
state,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> transition,
&lt;/span>&lt;span style="color:#cccece;"> interpret
} from &amp;#39;https://unpkg.com/robot3@0.2.9/machine.js&amp;#39;;
const mr_robot = createMachine({
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> idle: state(),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> loading: state()
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> loading: state(transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;))
&lt;/span>&lt;span style="color:#cccece;"> });
&lt;/span>&lt;/pre>
&lt;p>&lt;code>transition&lt;/code> is the thing that connects our states. It's first parameter is the name of the event that will trigger the transition, the second parameter is the &amp;quot;destination&amp;quot; state it will switch to. The rest of &lt;code>transition&lt;/code>'s parameters can be a list of function that will be executed when this transition is triggered.&lt;/p>
&lt;p>Looks lovely, but uhm... how do we test it? The machine by itself doesn't do anything. We need to give our new machine to the &lt;code>interpret&lt;/code> function which will give us a &amp;quot;service&amp;quot; that can dispatch events. To prove that we are actually doing something we'll also give a handler to &lt;code>interpret&lt;/code>, it will be like a 'onchange', it will listen to state changes.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">handler &lt;/span>&lt;span style="color:#5fb3b3;">= ({ &lt;/span>&lt;span style="color:#f99157;">machine &lt;/span>&lt;span style="color:#5fb3b3;">}) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">machine&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">current&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#5fb3b3;">{ &lt;/span>&lt;span style="color:#cccece;">send &lt;/span>&lt;span style="color:#5fb3b3;">} = &lt;/span>&lt;span style="color:#6699cc;">interpret&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">mr_robot&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">handler&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Now you can see if it's alive.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">done&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// You should see in the console
// loading (3)
// idle
&lt;/span>&lt;/pre>
&lt;p>Dispatching &lt;code>fetch&lt;/code> will turn the current state to &lt;code>loading&lt;/code> and &lt;code>done&lt;/code> will get it back to &lt;code>idle&lt;/code>. I see you're not impressed. That's fine. Let's try something, let's add another state &lt;code>end&lt;/code> and make &lt;code>loading&lt;/code> switch to that, then dispatch &lt;code>done&lt;/code> and see what happens. &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const mr_robot = createMachine({
idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> loading: state(transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;))
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> loading: state(transition(&amp;#39;done&amp;#39;, &amp;#39;end&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> end: state()
&lt;/span>&lt;span style="color:#cccece;"> });
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">done&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// You should see in the console
// idle
&lt;/span>&lt;/pre>
&lt;p>Sending &lt;code>done&lt;/code> while &lt;code>idle&lt;/code> doesn't trigger a &lt;code>loading&lt;/code> state, it stays in &lt;code>idle&lt;/code> because that state doesn't have a &lt;code>done&lt;/code> event. And now...&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// We do the usual flow.
&lt;/span>&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">done&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// You should have
// loading
// end
// Now try again `fetch`
&lt;/span>&lt;span style="color:#6699cc;">send&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// You should have
// end
&lt;/span>&lt;/pre>
&lt;p>If you send &lt;code>fetch&lt;/code> (or any other event) while in &lt;code>end&lt;/code> state will give you &lt;code>end&lt;/code> every single time. Why? Because you can't go anywhere, &lt;code>end&lt;/code> doesn't have transitions.&lt;/p>
&lt;p>I hope you see why this is useful. If not, I apologise for all the &lt;code>console.log&lt;/code>ing.&lt;/p>
&lt;p>Going back to our current machine. This what we got so far.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> &lt;/span>&lt;span style="color:#c594c5;">import &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#cccece;">createMachine&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">transition&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">interpret
&lt;/span>&lt;span style="color:#5fb3b3;">} &lt;/span>&lt;span style="color:#c594c5;">from &lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">https://unpkg.com/robot3@0.2.9/machine.js&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">mr_robot &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">createMachine&lt;/span>&lt;span style="color:#5fb3b3;">({
&lt;/span>&lt;span style="color:#6699cc;">idle&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#6699cc;">state&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">transition&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">loading&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)),
&lt;/span>&lt;span style="color:#6699cc;">loading&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#6699cc;">state&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">transition&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">done&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">idle&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
});
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">handler &lt;/span>&lt;span style="color:#5fb3b3;">= ({ &lt;/span>&lt;span style="color:#f99157;">machine &lt;/span>&lt;span style="color:#5fb3b3;">}) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">machine&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">current&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#5fb3b3;">{ &lt;/span>&lt;span style="color:#cccece;">send &lt;/span>&lt;span style="color:#5fb3b3;">} = &lt;/span>&lt;span style="color:#6699cc;">interpret&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">mr_robot&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">handler&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>But this is still not enough, now we need to get some data when we enter the &lt;code>loading&lt;/code> state. Let's first fake our quote fetching function.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">get_quote&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#5f6364;">// make a random delay, 3 to 5 seconds.
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">delay &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">random_number&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">5&lt;/span>&lt;span style="color:#5fb3b3;">) * &lt;/span>&lt;span style="color:#f99157;">1000&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">promise &lt;/span>&lt;span style="color:#5fb3b3;">= new &lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">res &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">setTimeout&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">res&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">&amp;lt;quote&amp;gt;&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &lt;/span>&lt;span style="color:#cccece;">delay&lt;/span>&lt;span style="color:#5fb3b3;">);
});
&lt;/span>&lt;span style="color:#5f6364;">// sanity check
&lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">res &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">res&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">res&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>To make it work with our state machine we will use a function called &lt;code>invoke&lt;/code>, this utility calls an &amp;quot;async function&amp;quot; (a function that returns a promise) when you enter a &lt;code>state&lt;/code> then when the promise resolves it sends a &lt;code>done&lt;/code> event (if it fails it sends a &lt;code>error&lt;/code> event).&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> import {
createMachine,
state,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> invoke,
&lt;/span>&lt;span style="color:#cccece;"> transition,
interpret
} from &amp;#39;https://unpkg.com/robot3@0.2.9/machine.js&amp;#39;;
const mr_robot = createMachine({
idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> loading: state(transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> loading: invoke(get_quote, transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;)),
&lt;/span>&lt;span style="color:#cccece;"> });
&lt;/span>&lt;/pre>
&lt;p>If you test &lt;code>send('fetch')&lt;/code> you should see in the console.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">loading
// wait a few seconds...
&amp;lt;quote&amp;gt;
idle
&lt;/span>&lt;/pre>
&lt;p>By now I hope you're all wondering where do we actually keep the data? There is a handy feature in &lt;code>createMachine&lt;/code> that let us define a &amp;quot;context&amp;quot; object that will be available to us in the function that we attach to our &lt;code>transitions&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">context &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">ev &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({
&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">: {},
});
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const mr_robot = createMachine({
idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
loading: invoke(get_quote, transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> });
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> }, context);
&lt;/span>&lt;/pre>
&lt;p>Next we'll use another utility. We will pass a third parameter to &lt;code>loading&lt;/code>'s transition, a hook of some sort that will modify the context object. This utility is called &lt;code>reduce&lt;/code> and it looks like this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">((&lt;/span>&lt;span style="color:#f99157;">ctx&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">ev&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({ ...&lt;/span>&lt;span style="color:#cccece;">ctx&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">data&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">ev&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">data &lt;/span>&lt;span style="color:#5fb3b3;">}))
&lt;/span>&lt;/pre>
&lt;p>It takes the current context, a payload (here named &lt;code>ev&lt;/code>) and whatever you return from it becomes your new context. We add that to the &lt;code>loading&lt;/code> state.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> import {
createMachine,
state,
invoke,
transition,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> reduce,
&lt;/span>&lt;span style="color:#cccece;"> interpret
} from &amp;#39;https://unpkg.com/robot3@0.2.9/machine.js&amp;#39;;
const mr_robot = createMachine({
idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> loading: invoke(get_quote, transition(&amp;#39;done&amp;#39;, &amp;#39;idle&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> loading: invoke(
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> get_quote,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> transition(
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> &amp;#39;done&amp;#39;,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> &amp;#39;idle&amp;#39;,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> reduce((ctx, ev) =&amp;gt; ({ ...ctx, data: ev.data }))
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> )
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> ),
&lt;/span>&lt;span style="color:#cccece;"> }, context);
&lt;/span>&lt;/pre>
&lt;p>Sanity check time. How do we know that works? We modify &lt;code>interpret&lt;/code>'s handler.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">handler &lt;/span>&lt;span style="color:#5fb3b3;">= ({ &lt;/span>&lt;span style="color:#f99157;">machine&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">context &lt;/span>&lt;span style="color:#5fb3b3;">}) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">JSON&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">stringify&lt;/span>&lt;span style="color:#5fb3b3;">({
&lt;/span>&lt;span style="color:#6699cc;">state&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">machine&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">current&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">context
&lt;/span>&lt;span style="color:#5fb3b3;">}));
}
&lt;/span>&lt;/pre>
&lt;p>You should see this.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">{&amp;#39;state&amp;#39;:&amp;#39;loading&amp;#39;,&amp;#39;context&amp;#39;:{&amp;#39;data&amp;#39;:{}}}
// wait a few seconds...
{&amp;#39;state&amp;#39;:&amp;#39;idle&amp;#39;,&amp;#39;context&amp;#39;:{&amp;#39;data&amp;#39;:&amp;#39;&amp;lt;quote&amp;gt;&amp;#39;}}
&lt;/span>&lt;/pre>
&lt;p>We are ready. Let's show something in the browser.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">main &lt;/span>&lt;span style="color:#bb80b3;">id&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">app&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">section &lt;/span>&lt;span style="color:#bb80b3;">id&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card__content&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">div &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card__body&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">div &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card__quote&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&lt;/span>&lt;span style="color:#cccece;">
quote
&lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">div&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">div &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card__author&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&lt;/span>&lt;span style="color:#cccece;">
-- author
&lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">div&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">div&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">div &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">card__footer&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">button &lt;/span>&lt;span style="color:#bb80b3;">id&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">load_btn&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">btn btn--new&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&lt;/span>&lt;span style="color:#cccece;">
More
&lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">button&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">a &lt;/span>&lt;span style="color:#bb80b3;">href&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">#&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; &lt;/span>&lt;span style="color:#bb80b3;">target&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">_blank&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; &lt;/span>&lt;span style="color:#bb80b3;">class&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">btn btn--tweet&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&lt;/span>&lt;span style="color:#cccece;">
Tweet
&lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">a&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">div&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">section&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">main&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#eb606b;">body &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">display&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">flex&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">justify-content&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">center&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">align-items&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">center&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">min-height&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">95vh&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">background&lt;/span>&lt;span style="color:#5fb3b3;">: #ddd;
&lt;/span>&lt;span style="color:#fac863;">font-size&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">1em&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">color&lt;/span>&lt;span style="color:#5fb3b3;">: #212121;
}
.&lt;/span>&lt;span style="color:#bb80b3;">card &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">width&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">600px&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">background&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">white&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">box-shadow&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">0 2px 5px 0 &lt;/span>&lt;span style="color:#6699cc;">rgba&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">0.16&lt;/span>&lt;span style="color:#5fb3b3;">)&lt;/span>&lt;span style="color:#cccece;">, &lt;/span>&lt;span style="color:#f99157;">0 2px 10px 0 &lt;/span>&lt;span style="color:#6699cc;">rgba&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">0.12&lt;/span>&lt;span style="color:#5fb3b3;">);
}
.&lt;/span>&lt;span style="color:#bb80b3;">card__content &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">color&lt;/span>&lt;span style="color:#5fb3b3;">: #212121;
&lt;/span>&lt;span style="color:#fac863;">padding&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">20px&lt;/span>&lt;span style="color:#5fb3b3;">;
}
.&lt;/span>&lt;span style="color:#bb80b3;">card__content--loader &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">height&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">95px&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">display&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">flex&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">align-items&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">center&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">justify-content&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">center
&lt;/span>&lt;span style="color:#5fb3b3;">}
.&lt;/span>&lt;span style="color:#bb80b3;">card__body &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">padding-bottom&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">15px&lt;/span>&lt;span style="color:#5fb3b3;">;
}
.&lt;/span>&lt;span style="color:#bb80b3;">card__author &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">padding-top&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">10px&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">font-style&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">italic&lt;/span>&lt;span style="color:#5fb3b3;">;
}
.&lt;/span>&lt;span style="color:#bb80b3;">card__footer &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">width&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">100%&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">display&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">flex&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">justify-content&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">space-between&lt;/span>&lt;span style="color:#5fb3b3;">;
}
.&lt;/span>&lt;span style="color:#bb80b3;">btn &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">color&lt;/span>&lt;span style="color:#5fb3b3;">: #fff;
&lt;/span>&lt;span style="color:#fac863;">cursor&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">pointer&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">margin-top&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">10px&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">margin-left&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">10px&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">border-radius&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">0.4rem&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">text-decoration&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">none&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">display&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">inline-block&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#fac863;">padding&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">.3rem .9rem&lt;/span>&lt;span style="color:#5fb3b3;">;
}
.&lt;/span>&lt;span style="color:#bb80b3;">btn--new &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">background-color&lt;/span>&lt;span style="color:#5fb3b3;">: #2093be;
&lt;/span>&lt;span style="color:#fac863;">border&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">0.1rem solid &lt;/span>&lt;span style="color:#5fb3b3;">#2093be;
}
.&lt;/span>&lt;span style="color:#bb80b3;">btn--tweet &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">background-color&lt;/span>&lt;span style="color:#5fb3b3;">: #0074d9;
&lt;/span>&lt;span style="color:#fac863;">border&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">0.1rem solid &lt;/span>&lt;span style="color:#5fb3b3;">#0074d9;
}
.&lt;/span>&lt;span style="color:#bb80b3;">btn&lt;/span>&lt;span style="color:#5fb3b3;">:&lt;/span>&lt;span style="color:#cccece;">hover &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">background&lt;/span>&lt;span style="color:#5fb3b3;">: #3cb0fd;
&lt;/span>&lt;span style="color:#fac863;">border&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">0.1rem solid &lt;/span>&lt;span style="color:#5fb3b3;">#3cb0fd;
&lt;/span>&lt;span style="color:#fac863;">text-decoration&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">none&lt;/span>&lt;span style="color:#5fb3b3;">;
}
.&lt;/span>&lt;span style="color:#bb80b3;">hide &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">display&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">none&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Now the last piece of the puzzle, the side effects. We need to attach another function to our transitions so we can update the DOM. We could use &lt;code>reduce&lt;/code> again but is just rude to have side effects on something called &lt;code>reduce&lt;/code> (just don't) We will bring another utility made for that, &lt;code>action&lt;/code>.&lt;/p>
&lt;p>But first we must prepare. Update the context object with the necesary dependencies. (This step is not necesary, this is just me being allergic to global variables)&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const context = ev =&amp;gt; ({
data: {},
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> dom: {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> quote: document.querySelector(&amp;#39;.card__quote&amp;#39;),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> author: document.querySelector(&amp;#39;.card__author&amp;#39;),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> load_btn: window.load_btn,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> tweet_btn: document.querySelector(&amp;#39;.btn--tweet&amp;#39;),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> card: window.card
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> }
&lt;/span>&lt;span style="color:#cccece;"> });
&lt;/span>&lt;/pre>
&lt;p>Create the side effects. At this point you should make sure that &lt;code>get_quote&lt;/code> actually returns an object with a &lt;code>quote&lt;/code> and &lt;code>author&lt;/code> property.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">update_card&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#f99157;">dom&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">data &lt;/span>&lt;span style="color:#5fb3b3;">}) {
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">load_btn&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">textContent &lt;/span>&lt;span style="color:#5fb3b3;">= &amp;#39;&lt;/span>&lt;span style="color:#99c794;">More&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">quote&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">textContent &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">quote&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">author&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">textContent &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">author&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">web_intent &lt;/span>&lt;span style="color:#5fb3b3;">= &amp;#39;&lt;/span>&lt;span style="color:#99c794;">https://twitter.com/intent/tweet?text=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">tweet &lt;/span>&lt;span style="color:#5fb3b3;">= `${&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">quote&lt;/span>&lt;span style="color:#5fb3b3;">}&lt;/span>&lt;span style="color:#99c794;"> -- &lt;/span>&lt;span style="color:#5fb3b3;">${&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">author&lt;/span>&lt;span style="color:#5fb3b3;">}`;
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">tweet_btn&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">setAttribute&lt;/span>&lt;span style="color:#5fb3b3;">(
&amp;#39;&lt;/span>&lt;span style="color:#99c794;">href&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">web_intent &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#6699cc;">encodeURIComponent&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">tweet&lt;/span>&lt;span style="color:#5fb3b3;">)
);
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">show_loading&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#f99157;">dom &lt;/span>&lt;span style="color:#5fb3b3;">}) {
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">load_btn&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">textContent &lt;/span>&lt;span style="color:#5fb3b3;">= &amp;#39;&lt;/span>&lt;span style="color:#99c794;">Loading...&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
}
&lt;/span>&lt;/pre>
&lt;p>Put everything together.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> import {
createMachine,
state,
invoke,
transition,
reduce,
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> action,
&lt;/span>&lt;span style="color:#cccece;"> interpret
} from &amp;#39;https://unpkg.com/robot3@0.2.9/machine.js&amp;#39;;
const mr_robot = createMachine({
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;, action(show_loading))),
&lt;/span>&lt;span style="color:#cccece;"> loading: invoke(
get_quote,
transition(
&amp;#39;done&amp;#39;,
&amp;#39;idle&amp;#39;,
reduce((ctx, ev) =&amp;gt; ({ ...ctx, data: ev.data })),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> action(update_card)
&lt;/span>&lt;span style="color:#cccece;"> )
),
}, context);
&lt;/span>&lt;/pre>
&lt;p>By now everything kinda works but it looks bad when it loads for the first time. Let's make another loader, one that hides the card while we fetch the first quote.&lt;/p>
&lt;p>Let's start with the HTML.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> &amp;lt;main id=&amp;quot;app&amp;quot; class=&amp;quot;card&amp;quot;&amp;gt;
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> &amp;lt;section id=&amp;quot;card&amp;quot; class=&amp;quot;card__content&amp;quot;&amp;gt;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> &amp;lt;section class=&amp;quot;card__content card__content--loader&amp;quot;&amp;gt;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> &amp;lt;p&amp;gt;Loading&amp;lt;/p&amp;gt;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> &amp;lt;/section&amp;gt;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> &amp;lt;section id=&amp;quot;card&amp;quot; class=&amp;quot;hide card__content&amp;quot;&amp;gt;
&lt;/span>&lt;span style="color:#cccece;"> &amp;lt;div class=&amp;quot;card__body&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;card__quote&amp;quot;&amp;gt;
quote
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;card__author&amp;quot;&amp;gt;
-- author
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;card__footer&amp;quot;&amp;gt;
&amp;lt;button id=&amp;quot;load_btn&amp;quot; class=&amp;quot;btn btn--new&amp;quot;&amp;gt;
More
&amp;lt;/button&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot; target=&amp;quot;_blank&amp;quot; class=&amp;quot;btn btn--tweet&amp;quot;&amp;gt;
Tweet
&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/span>&lt;/pre>
&lt;p>We'll make another state, &lt;code>empty&lt;/code>. We can reuse our original &lt;code>loading&lt;/code> state for this. Make a factory function that returns the loading transition.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">load_quote &lt;/span>&lt;span style="color:#5fb3b3;">= (...&lt;/span>&lt;span style="color:#f99157;">args&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt;
&lt;/span>&lt;span style="color:#6699cc;">invoke&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">get_quote&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">transition&lt;/span>&lt;span style="color:#5fb3b3;">(
&amp;#39;&lt;/span>&lt;span style="color:#99c794;">done&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;,
&amp;#39;&lt;/span>&lt;span style="color:#99c794;">idle&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;,
&lt;/span>&lt;span style="color:#6699cc;">reduce&lt;/span>&lt;span style="color:#5fb3b3;">((&lt;/span>&lt;span style="color:#f99157;">ctx&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">ev&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({ ...&lt;/span>&lt;span style="color:#cccece;">ctx&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">data&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">ev&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">data &lt;/span>&lt;span style="color:#5fb3b3;">})),
...&lt;/span>&lt;span style="color:#cccece;">args
&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">transition&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">error&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">idle&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
);
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const mr_robot = createMachine({
idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;, action(show_loading))),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> loading: invoke(
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> get_quote,
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> transition(
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> &amp;#39;done&amp;#39;,
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> &amp;#39;idle&amp;#39;,
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> reduce((ctx, ev) =&amp;gt; ({ ...ctx, data: ev.data })),
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> action(update_card)
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> )
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> ),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> loading: load_quote(action(update_card))
&lt;/span>&lt;span style="color:#cccece;"> }, context);
&lt;/span>&lt;/pre>
&lt;p>Now we use this to hide the first loader and show the quote when it's ready.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const context = ev =&amp;gt; ({
data: {},
dom: {
quote: document.querySelector(&amp;#39;.card__quote&amp;#39;),
author: document.querySelector(&amp;#39;.card__author&amp;#39;),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> loader: document.querySelector(&amp;#39;.card__content--loader&amp;#39;),
&lt;/span>&lt;span style="color:#cccece;"> load_btn: window.load_btn,
tweet_btn: document.querySelector(&amp;#39;.btn--tweet&amp;#39;),
card: window.card
}
});
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">hide_loader&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#f99157;">dom &lt;/span>&lt;span style="color:#5fb3b3;">}) {
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">loader&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">classList&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">add&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hide&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#cccece;">dom&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">card&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">classList&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">remove&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hide&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
}
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const mr_robot = createMachine({
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> empty: load_quote(action(update_card), action(hide_loader)),
&lt;/span>&lt;span style="color:#cccece;"> idle: state(transition(&amp;#39;fetch&amp;#39;, &amp;#39;loading&amp;#39;, action(show_loading))),
loading: load_quote(action(update_card))
}, context);
&lt;/span>&lt;span style="color:#5fb3b3;">-
-&lt;/span>&lt;span style="color:#ec5f67;"> const handler = ({ machine, context }) =&amp;gt; {
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> console.log(JSON.stringify({
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> state: machine.current,
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> context
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> }));
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> }
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> const handler = () =&amp;gt; {};
&lt;/span>&lt;span style="color:#cccece;">
const { send } = interpret(mr_robot, handler);
&lt;/span>&lt;span style="color:#5fb3b3;">+
+&lt;/span>&lt;span style="color:#99c794;"> const fetch_quote = () =&amp;gt; send(&amp;#39;fetch&amp;#39;);
&lt;/span>&lt;span style="color:#5fb3b3;">+
+&lt;/span>&lt;span style="color:#99c794;"> window.load_btn.addEventListener(&amp;#39;click&amp;#39;, fetch_quote);
&lt;/span>&lt;/pre>
&lt;p>Let's see it work.&lt;/p>
&lt;p
class="codepen"
data-height="600"
data-theme-id="dark"
data-default-tab="js,result"
data-user="VonHeikemen"
data-slug-hash="OJJvQzR"
data-preview="true"
style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"
data-pen-title="Finite Random Quote Machine">
&lt;span>
See the Pen &lt;a href="https://codepen.io/VonHeikemen/pen/OJJvQzR">Finite Random Quote Machine&lt;/a> by Heiker (&lt;a href="https://codepen.io/VonHeikemen">@VonHeikemen&lt;/a>) on &lt;a href="https://codepen.io">CodePen&lt;/a>.
&lt;/span>
&lt;/p>
&lt;script async src="https://static.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;h2 id="so-is-this-state-machine-thing-helpful">So is this state machine thing helpful?&lt;/h2>
&lt;p>I hope so. Did you notice we made a bunch of test and created the blueprint of the quote machine even before writing any HTML? I think that's cool. &lt;/p>
&lt;p>Did you try to click the 'loading' button while loading? Did it triggered a bunch of call to &lt;code>get_quote&lt;/code>? That is because we made (sort of) impossible that a &lt;code>fetch&lt;/code> event can happen during &lt;code>loading&lt;/code>. &lt;/p>
&lt;p>Not only that, the behavior of the machine is and the effects on the outside world are separated. Depending on how you like to write code that may be a good or a bad thing.&lt;/p>
&lt;h2 id="want-to-know-more">Want to know more?&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://xstate.js.org/docs/about/concepts.html">XState (concepts)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://thisrobot.life/">robot3 - docs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.freecodecamp.org/news/state-machines-basics-of-computer-science-d42855debc66/">Understanding State Machines&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>