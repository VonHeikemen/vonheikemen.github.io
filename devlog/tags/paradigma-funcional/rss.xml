<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Devlog</title><link>https://vonheikemen.github.io/devlog/</link><description/><generator>Zola</generator><language>en</language><atom:link href="https://vonheikemen.github.io/devlog/tags/paradigma-funcional/rss.xml" rel="self" type="application/rss+xml"/><lastBuildDate>Fri, 03 Apr 2020 00:00:00 +0000</lastBuildDate><item><title>Lo que sé del paradigma funcional</title><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/table-of-content/</link><guid>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/table-of-content/</guid><description>&lt;p>Aprender sobre el paradigma funcional en la programación no es una tarea fácil, sobre todo si buscan material que contenga ejemplos prácticos de cómo usar los conceptos que enseñan. Lo que presento en esta ocasión es una recopilación de las notas que he tomado, y que he transformado en &amp;quot;artículos&amp;quot;, así como también enlaces a las fuentes de donde he sacado toda esta información.&lt;/p>
&lt;p>Aunque todo este material esté relacionado, no planifiqué escribir todas esas notas. Entonces aquí intentaré darles una sugerencia en el orden de lectura.&lt;/p>
&lt;h2 id="conceptos-basicos">Conceptos básicos&lt;/h2>
&lt;p>Para empezar quisiera que vieran el video que me convenció de darle una oportunidad a este paradigma. La charla se llama &amp;quot;Programación funcional en JS: ¿Qué? ¿Por qué? ¿Cómo?&amp;quot; En el video se explica lo que es y lo que no es programación funcional, también muestra ejemplos de los conceptos básicos del paradigma en javascript.&lt;/p>
&lt;div >
&lt;iframe src="https://www.youtube.com/embed/qtsbZarFzm8" webkitallowfullscreen mozallowfullscreen allowfullscreen>
&lt;/iframe>
&lt;/div>
&lt;p>Si no pudieron entender la charla porque no hablan inglés, no se preocupen, una búsqueda rápida sobre &lt;strong>funciones puras&lt;/strong> y sus beneficios técnicos debería ponerlos al tanto.&lt;/p>
&lt;p>Ahora bien, yo también hice mi propia investigación y escribí un material que complementa lo que se dice en el video.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/pure-functions/">Funciones puras y porque son una buena idea&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/dealing-with-side-effects-and-pure-functions/">Cómo combinar efectos y funciones puras en javascript&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="lectura-extra">Lectura extra&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming">Una introducción a la programación funcional (artículo en inglés)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="una-herramienta-especial">Una herramienta especial&lt;/h2>
&lt;p>Si ya revisaron todo el material anterior ya cuentan con suficiente conocimiento para empezar a incorporar un poco del estilo funcional en su rutina habitual. No tienen que conocer todos los trucos del libro para beneficiarse de este paradigma.&lt;/p>
&lt;p>Quiero que presten una atención especial a algo llamado &lt;strong>aplicación parcial&lt;/strong>, al igual que las funciones puras este es un que concepto que puede ayudarlos mucho, incluso si deciden no adoptar el paradigma funcional completamente.&lt;/p>
&lt;p>Estas son mis notas (con ejemplos prácticos): &lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/partial-application/">Aplicación parcial&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Si están convencidos de que la aplicación parcial es útil vean este video para que tengan una idea del tipo de cosas que pueden lograr.&lt;/p>
&lt;div >
&lt;iframe src="https://www.youtube.com/embed/m3svKOdZijA" webkitallowfullscreen mozallowfullscreen allowfullscreen>
&lt;/iframe>
&lt;/div>
&lt;h2 id="como-armar-las-piezas">Cómo armar las piezas&lt;/h2>
&lt;p>Una cosa es conocer los conceptos y otra es saber utilizarlos de la manera más efectiva posible. Ya tienen las bases y algunas herramientas, pero aún deben estar preguntándose ¿Cómo encaja todo esto? Ese nuestro siguiente paso. &lt;/p>
&lt;p>En este artículo veremos cómo podemos usar lo que hemos aprendido:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/composition-techniques/">Técnicas de composición&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Y por si acaso se pasaron por alto este video, aquí se los dejo otra vez. Aquí se explica con un poco más de detalle lo que está en el material que yo escribí (porque lo que yo escribí son notas que tomé de aquí).&lt;/p>
&lt;div >
&lt;iframe src="https://www.youtube.com/embed/vDe-4o8Uwl8" webkitallowfullscreen mozallowfullscreen allowfullscreen>
&lt;/iframe>
&lt;/div>
&lt;h2 id="un-paso-mas-alla">Un paso más allá&lt;/h2>
&lt;p>Ya tienen una idea de cómo manipular funciones y adaptarlas a sus necesidades. Pero todavía hay un par de conceptos que no están claros, dos en particular: Functors y Monads. Aquí hago mi mejor esfuerzo para decirles cómo pueden usarlos en su beneficio. &lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/the-power-of-map/">Hablando de Functors&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/using-a-maybe/">Usando un Maybe&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="contenido-extra">Contenido extra&lt;/h2>
&lt;h3 id="un-concepto-curioso">Un concepto curioso&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/lenses-a-k-a-composable-getters-and-setters/">Lenses: Una alternativa a los getters y setters&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="mas-charlas-interesantes">Más charlas interesantes&lt;/h3>
&lt;p>Si se siguen preguntando qué se puede lograr sólo combinando funciones.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=7BsfMMYvGaU">Mary had a little lambda&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=SfWR3dKnFIo">Oh Composable World!&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="hasta-la-proxima">Hasta la próxima&lt;/h2>
&lt;p>Si llegaron hasta aquí y ya revisaron todo, entonces saben tanto como yo. No tengo nada más que enseñarles. Ya sea que hayan decidido adoptar el paradigma funcional en su código o no espero que hayan aprendido algo que puedan aplicar en su desarrollo diario.&lt;/p></description></item><item><title>Funciones puras y porque son una buena idea</title><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/pure-functions/</link><guid>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/pure-functions/</guid><description>&lt;p>Cuando se habla del paradigma funcional en la programación uno de los conceptos básicos que resalta por su importancia son la funciones puras. Las personas acostumbradas a este paradigma hacen un gran esfuerzo para mantener su código tanto como sea posible en funciones puras, aquí les explicaré algunas de las razones. Pero primero debemos saber...&lt;/p>
&lt;h2 id="que-es-una-funcion-pura">¿Qué es una función pura?&lt;/h2>
&lt;p>Una función cuyo resultado es influenciado solamente por sus parámetros de entrada y no tiene ningún efecto observable en el mundo exterior (lo que se conoce como efecto secundario).&lt;/p>
&lt;h3 id="beneficios">Beneficios&lt;/h3>
&lt;p>Quiero enfocarme en los beneficios que este tipo de funciones nos aportan a nosotros los humanos que leemos e interpretamos código en nuestra mente.&lt;/p>
&lt;ul>
&lt;li>Son predecibles&lt;/li>
&lt;/ul>
&lt;p>Proporcionarles los mismos datos de entrada siempre produce el mismo resultado. Esta es una de las propiedades más relevantes, y para mí es la más importante. Nos da habilidad de probar con relativa facilidad la efectividad de nuestra solución. &lt;/p>
&lt;p>Digamos que tenemos una función que transforma todas las letras de un texto a mayúscula ¿qué necesitamos para probar que funciona? La función, sus parámetros y el valor esperado.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">to_uppercase&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hello&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;) == &amp;#39;&lt;/span>&lt;span style="color:#99c794;">HELLO&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;/pre>
&lt;p>No necesitamos simular el ambiente externo o herramientas especiales, sólo comparamos con el valor esperado. Esto nos da confianza en lo que hemos creado, porque podemos probar con certeza que funciona de manera adecuada.&lt;/p>
&lt;ul>
&lt;li>Comprensión&lt;/li>
&lt;/ul>
&lt;p>Cuando hablamos de código nos pasamos más tiempo leyendo y analizando que escribiendo. La comunicación es un aspecto que debemos considerar. Una función pura en teoría necesitaría la menor cantidad de contexto para poder entender su comportamiento, ya que todo lo que necesitas saber está (o al menos debería) en el cuerpo de la función y sus argumentos.&lt;/p>
&lt;p>Otra propiedad que poseen estas funciones se le conoce como &lt;strong>transparencia referencial&lt;/strong>, esto significa que podemos reemplazar la llamada de una función con el valor que retorna.&lt;/p>
&lt;p>Por ejemplo, esto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">to_uppercase&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">hi&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;) + &amp;#39;&lt;/span>&lt;span style="color:#99c794;">, user&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;/pre>
&lt;p>Puede ser reemplazado por esto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">HI, user&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;/pre>
&lt;p>Quiere decir que una vez que comprendes qué hace una función pura puedes reemplazar mentalmente la llamada de la función con su resultado.&lt;/p>
&lt;ul>
&lt;li>Composición&lt;/li>
&lt;/ul>
&lt;p>Si han creado una función pura hay una alta probabilidad de que hayan creado un componente independiente que pueden aprovechar en diferentes contextos. Al ser completamente independientes y reusables son los candidatos perfectos para ser combinados con otros componentes. Piénsenlo, si &amp;quot;combinan&amp;quot; dos funciones puras en una nueva función, el resultado también será una función pura. Esta es una característica poderosa que les permitirá crear procedimientos complejos con piezas &amp;quot;simples.&amp;quot;&lt;/p>
&lt;h2 id="esto-no-termina-aqui">Esto no termina aquí&lt;/h2>
&lt;p>Las funciones puras pueden ser buenas pero en algún momento debemos abandonar la idea de la pureza y causar un cambio en el mundo (mostrar algo en pantalla, hacer una petición HTTP, etc...) para eso he preparado otros artículos con más detalles sobre el tema.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/composition-techniques/">Técnicas de composición&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/dealing-with-side-effects-and-pure-functions/">Cómo combinar efectos y funciones puras en javascript&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="fuentes">Fuentes&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=qtsbZarFzm8&amp;amp;feature=youtu.be">Functional Programming in JS: What? Why? How? (video)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming">An introduction to functional programming&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch5.md/#chapter-5-reducing-side-effects">Functional-Light JavaScript - Chapter 5: Reducing Side Effects&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Un poco del paradigma funcional en tu javascript: Técnicas de composición</title><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/composition-techniques/</link><guid>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/composition-techniques/</guid><description>&lt;p>Hoy el tema será la composición de funciones. El arte de crear cosas complejas con piezas &amp;quot;simples&amp;quot;. Si no saben nada del paradigma funcional en la programación incluso mejor, esta será una introducción a conceptos y patrones de ese paradigma que pueden implementarse en javascript. Lo que voy a presentar no será una fórmula mágica que hará su código más legible, simple y sin errores; así no funcionan las cosas. Sí creo que ayuda en la solución de problemas pero para sacarle el mayor provecho deben tener en cuenta ciertas cosas. Así que antes de mostrar cualquier implementación vamos a hablar de algunos conceptos y filosofía.&lt;/p>
&lt;h2 id="lo-que-deben-saber">Lo que deben saber&lt;/h2>
&lt;h3 id="que-es-la-composicion-de-funciones">¿Qué es la composición de funciones?&lt;/h3>
&lt;p>Es un mecanismo que nos permite combinar dos o más funciones en una nueva función.&lt;/p>
&lt;p>Parece una idea simple, ciertamente todos en algún momento hemos combinado un par de funciones ¿De verdad pensamos en la composición cuando creamos una función? ¿Qué nos ayudaría a crear funciones diseñadas para ser combinadas?&lt;/p>
&lt;h3 id="filosofia">Filosofía&lt;/h3>
&lt;p>Repito, la composición de funciones es más efectiva si siguen ciertos principios.&lt;/p>
&lt;ul>
&lt;li>La función tiene un sólo propósito, una sola responsabilidad.&lt;/li>
&lt;li>Asume que el resultado de la función será consumido por otra.&lt;/li>
&lt;/ul>
&lt;p>Probablemente han escuchado eso en algún otro lado, es parte de la &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy#Origin">filosofía unix&lt;/a>. ¿Alguna vez se han preguntado cómo un lenguage como &lt;code>bash&lt;/code>, que tiene una sintaxis un tanto extraña y muchas limitaciones, puede ser tan popular? Esos dos principios son parte de la razón. Una gran parte de los programas que se ejecutan en este ambiente están diseñados para ser componentes reusables y cuando &amp;quot;conectas&amp;quot; dos o más, el resultado es un programa que también puede ser conectado con otros programas aún no conocidos.&lt;/p>
&lt;p>Para algunos puede parecer tonto o incluso exagerado tener muchas funciones que solo hacen una cosa, especialmente si esas funciones hacen algo que parece inútil, pero puedo demostrarles que cada función puede ser valiosa en el contexto adecuado.&lt;/p>
&lt;p>Intentemos ilustrar una situación donde estos principios se ponen en práctica.&lt;/p>
&lt;blockquote>
&lt;p>Nota: De antemano me disculpo por el uso indebido de los comandos &lt;code>cat&lt;/code> y &lt;code>grep&lt;/code>, esto lo hago para demostrar el valor de la composición.&lt;/p>
&lt;/blockquote>
&lt;p>Digamos que queremos extraer el valor de la variable &lt;code>HOST&lt;/code> que está en un archivo &lt;code>.env&lt;/code>, vamos a hacerlo usando &lt;code>bash&lt;/code>. &lt;/p>
&lt;p>Este sería el archivo.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">ENV=development
HOST=http://locahost:5000
&lt;/span>&lt;/pre>
&lt;p>Para mostrar el contenido de ese archivo usamos &lt;code>cat&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">cat .env
&lt;/span>&lt;/pre>
&lt;p>Para filtrar el contenido del archivo y buscar la línea que queremos usamos &lt;code>grep&lt;/code>, le proveemos el patrón que buscamos y el contenido del archivo.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">cat .env &lt;/span>&lt;span style="color:#5fb3b3;">| &lt;/span>&lt;span style="color:#6699cc;">grep &lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#99c794;">HOST=.*&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>Para obtener el valor que queremos usamos &lt;code>cut&lt;/code>. El comando &lt;code>cut&lt;/code> va a tomar el resultado de &lt;code>grep&lt;/code> y lo va a dividir usando un delimitador, luego le decimos qué sección de la cadena queremos.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">cat .env &lt;/span>&lt;span style="color:#5fb3b3;">| &lt;/span>&lt;span style="color:#6699cc;">grep &lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#99c794;">HOST=.*&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; | &lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;"> --&lt;/span>&lt;span style="color:#f99157;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; --&lt;/span>&lt;span style="color:#f99157;">fields&lt;/span>&lt;span style="color:#5fb3b3;">=&lt;/span>&lt;span style="color:#6699cc;">2
&lt;/span>&lt;/pre>
&lt;p>Eso debería mostrarnos.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">http://locahost:5000
&lt;/span>&lt;/pre>
&lt;p>Si colocamos esa cadena de comandos en un script o una función en nuestro &lt;code>.bashrc&lt;/code> efectivamente tendremos un comando que puede ser usado de la misma manera por otros programas que aún no conocemos. Este es el tipo de flexibilidad y poder que queremos lograr.&lt;/p>
&lt;p>Espero que en este punto sepan qué tipo de mentalidad debemos tener al momento de crear una función pero aún hay una cosa que deben recordar.&lt;/p>
&lt;h3 id="las-funciones-son-cosas">Las funciones son cosas&lt;/h3>
&lt;p>Pongamos nuestra atención en javascript. ¿Han escuchado la frase &amp;quot;funciones de primera clase&amp;quot;? Significa que las funciones pueden ser tratadas como cualquier otro valor. Vamos a compararlos con los arreglos.&lt;/p>
&lt;ul>
&lt;li>Pueden asignarlos a una variable.&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">numbers &lt;/span>&lt;span style="color:#5fb3b3;">= [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">99&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">104&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;];
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">repeat_twice &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">str&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">repeat&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">);
};
&lt;/span>&lt;/pre>
&lt;ul>
&lt;li>Pasarlos como argumento a una función.&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">array&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">array&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fn&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">repeat_twice&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">numbers&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;ul>
&lt;li>Pueden ser retornados por una función&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">unary&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">arg&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">);
}
}
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">safer_parseint &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">unary&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">parseInt&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">safer_parseint&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">numbers&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>¿Por qué les muestro esto? Deben estar conscientes de esta característica de javascript porque vamos a usarla crear funciones auxiliares, como &lt;code>unary&lt;/code>, que manipulan otras funciones. Puede que tome un tiempo acostumbrarse a la idea de tratar las funciones como un dato pero definitivamente vale la pena practicarlo ya que es clave para entender muchos de los patrones que se pueden ver en el paradigma funcional. &lt;/p>
&lt;h2 id="composicion-en-la-practica">Composición en la práctica&lt;/h2>
&lt;p>Vamos a retomar el ejemplo del archivo &lt;code>.env&lt;/code>. Recrearemos lo que hicimos en &lt;code>bash&lt;/code>. Primero vamos a intentar un enfoque muy directo, luego exploraremos los defectos de nuestra implementación e intentaremos solucionarlos.&lt;/p>
&lt;p>Ya hemos hecho esto antes, sabemos lo que debemos hacer. Empecemos por crear una función por cada paso.&lt;/p>
&lt;ul>
&lt;li>Extraer el contenido del archivo.&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">fs &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">require&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fs&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">get_env&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">fs&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">readFileSync&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">utf-8&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
}
&lt;/span>&lt;/pre>
&lt;ul>
&lt;li>Filtrar el contenido basados en un patrón.&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">search_host&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">content&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exp &lt;/span>&lt;span style="color:#5fb3b3;">= new &lt;/span>&lt;span style="color:#fac863;">RegExp&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">lines &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">content&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">split&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;\n&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">lines&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">find&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">line &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">exp&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">test&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">line&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;/pre>
&lt;ul>
&lt;li>Extraer el valor.&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">str&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">split&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">];
}
&lt;/span>&lt;/pre>
&lt;p>Ya estamos listos. Veamos qué podemos hacer para que estas funciones trabajen juntas.&lt;/p>
&lt;h3 id="composicion-natural">Composición natural&lt;/h3>
&lt;p>Mencioné que el primer intento sería un enfoque directo, las funciones ya están listas y lo que queda por hacer es ejecutarlas en secuencia.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">search_host&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">get_env&lt;/span>&lt;span style="color:#5fb3b3;">()));
&lt;/span>&lt;/pre>
&lt;p>Digamos que este es el escenario perfecto de una composición de funciones, aquí el resultado de una función se convierte en la entrada de la siguiente, es el mismo efecto que tiene el símbolo &lt;code>|&lt;/code> en &lt;code>bash&lt;/code>. A diferencia de &lt;code>bash&lt;/code> aquí el flujo de datos va de derecha a izquierda. &lt;/p>
&lt;p>Ahora imaginemos que tenemos dos funciones más que hacen algo con el valor de &lt;code>HOST&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">test&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">ping&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">search_host&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">get_env&lt;/span>&lt;span style="color:#5fb3b3;">()))));
&lt;/span>&lt;/pre>
&lt;p>Las cosas se ponen algo incómodas, todavía esta en un nivel manejable pero la cantidad de paréntesis involucrados ya empieza a molestar. Este sería el momento perfecto para crear una función que agrupe esta cadena en una manera más legible, pero no haremos eso aún, primero buscaremos ayuda.&lt;/p>
&lt;h3 id="composicion-automatica">Composición automática&lt;/h3>
&lt;p>Es aquí donde nuestros conocimientos de las funciones empieza a dar frutos. Lo que haremos para resolver el problema de los paréntesis será &amp;quot;automatizar&amp;quot; las llamadas de las funciones. Crearemos una función que acepte una lista de funciones, las ejecute una por una y se asegure de pasar el resultado de la función anterior como parémetro a la siguiente.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">fns&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function &lt;/span>&lt;span style="color:#6699cc;">_composed&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">args&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// Posición de la última función
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">last &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">- &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#5f6364;">// Se ejecuta la última función
// con los parámetros de `_composed`
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">current_value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">last&lt;/span>&lt;span style="color:#5fb3b3;">--](...&lt;/span>&lt;span style="color:#cccece;">args&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// recorremos las funciones restantes en orden inverso
&lt;/span>&lt;span style="color:#c594c5;">for &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">i &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">last&lt;/span>&lt;span style="color:#5fb3b3;">; &lt;/span>&lt;span style="color:#cccece;">i &lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;= &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">; &lt;/span>&lt;span style="color:#cccece;">i&lt;/span>&lt;span style="color:#5fb3b3;">--) {
&lt;/span>&lt;span style="color:#cccece;">current_value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">i&lt;/span>&lt;span style="color:#5fb3b3;">](&lt;/span>&lt;span style="color:#cccece;">current_value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">current_value&lt;/span>&lt;span style="color:#5fb3b3;">;
};
}
&lt;/span>&lt;/pre>
&lt;p>Ahora podremos hacer esto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">search_host&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">get_env&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// get_host en realidad es `_composed`
&lt;/span>&lt;span style="color:#6699cc;">get_host&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;/pre>
&lt;p>Ya no tenemos el problema de los paréntesis, podemos agregar más funciones de manera más fácil y sin entorpecer la legilibilidad.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">test&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">ping&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">search_host&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">get_env
&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">get_host&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;/pre>
&lt;p>Como en nuestro primer intento el flujo de ejecución va de derecha a izquierda. Si prefieren invertir el orden sería así.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">fns&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function &lt;/span>&lt;span style="color:#6699cc;">_piped&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">args&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// Se ejecuta la primera función
// con los parámetros de `_piped`
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">current_value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">](...&lt;/span>&lt;span style="color:#cccece;">args&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// recorremos las funciones restantes en el orden original
&lt;/span>&lt;span style="color:#c594c5;">for &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">i &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">; &lt;/span>&lt;span style="color:#cccece;">i &lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt; &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length&lt;/span>&lt;span style="color:#5fb3b3;">; &lt;/span>&lt;span style="color:#cccece;">i&lt;/span>&lt;span style="color:#5fb3b3;">++) {
&lt;/span>&lt;span style="color:#cccece;">current_value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fns&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">i&lt;/span>&lt;span style="color:#5fb3b3;">](&lt;/span>&lt;span style="color:#cccece;">current_value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">current_value&lt;/span>&lt;span style="color:#5fb3b3;">;
};
}
&lt;/span>&lt;/pre>
&lt;p>Ahora pueden leerlo así.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">get_env&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">search_host&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">get_host&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;/pre>
&lt;p>Todo esto es genial, pero como dije antes lo que tenemos aquí es un escenario ideal. Nuestra composición sólo puede manejar funciones que tienen un parámetro de entrada y una sola línea de ejecución (no necesita controlar el flujo de ejecución). Eso no es malo, todos deberíamos diseñar nuestro código para facilitar ese tipo de situaciones pero como todos sabemos...&lt;/p>
&lt;h3 id="no-siempre-es-tan-facil">No siempre es tan fácil&lt;/h3>
&lt;p>Incluso en nuestro ejemplo la única razón por la que logramos combinar las funciones fue porque incluimos en el código todos los parámetros necesarios e ignoramos el manejo de errores. Pero no todo está perdido, hay formas de sobrepasar las limitaciones que tenemos.&lt;/p>
&lt;p>Antes de continuar modificaremos el ejemplo, haremos que sea más parecido a la implementación en &lt;code>bash&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">fs &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">require&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">fs&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">filepath&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">fs&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">readFileSync&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">filepath&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">utf-8&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">pattern&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">content&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exp &lt;/span>&lt;span style="color:#5fb3b3;">= new &lt;/span>&lt;span style="color:#fac863;">RegExp&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">pattern&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">lines &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">content&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">split&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;\n&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">lines&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">find&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">line &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">exp&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">test&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">line&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#f99157;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">fields &lt;/span>&lt;span style="color:#5fb3b3;">}, &lt;/span>&lt;span style="color:#f99157;">str&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">split&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">)[&lt;/span>&lt;span style="color:#cccece;">fields &lt;/span>&lt;span style="color:#5fb3b3;">- &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">];
}
&lt;/span>&lt;/pre>
&lt;p>No es exactamente lo mismo que sus contrapartes en &lt;code>bash&lt;/code> pero servirá. Ahora, si quisieramos combinar estas nuevas funciones tendríamos que hacerlo de esta manera.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({&lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">}, &lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)));
&lt;/span>&lt;/pre>
&lt;p>Funciona pero yo diría que está al borde de lo aceptable, aún puedo entender lo que está pasando pero no querría agregar otra cosa a esa cadena. Si queremos usar &lt;code>pipe&lt;/code> tendremos que superar nuestro primer obstáculo.&lt;/p>
&lt;h4 id="funciones-con-multiples-entradas">Funciones con múltiples entradas&lt;/h4>
&lt;p>La solución a esto es &lt;strong>aplicación parcial&lt;/strong> y por suerte para nosotros javascript tiene un buen soporte incluido para lo que queremos hacer. Nuestro objetivo es simple, pasarle a una función una parte de sus parámetros sin ejecutarla. Queremos ser capaces de hacer algo así.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;),
&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">})
);
&lt;/span>&lt;span style="color:#6699cc;">get_host&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;/pre>
&lt;p>Para replicar este resultado tendremos que recurrir a una técnica llamada &lt;strong>currying&lt;/strong>, esta consiste en convertir una función de múltiples parámetros en varias funciones de un parámetro. Bien, para lograrlo lo que debemos hacer es aceptar un parámetro a la vez devolviendo una función por cada parámetro que necesitamos. Haremos esto con &lt;code>grep&lt;/code> y &lt;code>cut&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> function grep(pattern, content) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> function grep(pattern) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> return function(content) {
&lt;/span>&lt;span style="color:#cccece;"> const exp = new RegExp(pattern);
const lines = content.split(&amp;#39;\n&amp;#39;);
return lines.find(line =&amp;gt; exp.test(line));
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> }
&lt;/span>&lt;span style="color:#cccece;"> }
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> function cut({ delimiter, fields }, str) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> function cut({ delimiter, fields }) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> return function(str) {
&lt;/span>&lt;span style="color:#cccece;"> return str.split(delimiter)[fields - 1];
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> }
&lt;/span>&lt;span style="color:#cccece;"> }
&lt;/span>&lt;/pre>
&lt;p>En situaciones donde no es posible convertir una función normal a una que soporte currying lo que podemos hacer es usar el método &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">bind&lt;/a> que se encuentra en el prototipo de la funciones.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">grep&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;),
&lt;/span>&lt;span style="color:#cccece;">cut&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, { &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">})
);
&lt;/span>&lt;/pre>
&lt;p>Por último, si todo lo demás parece muy complicado siempre tenemos la opción de crear una función anónima justo en el lugar.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#f99157;">content &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">content&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#f99157;">str &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">}, &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">)
);
&lt;/span>&lt;/pre>
&lt;p>Eso será suficiente para resolver cualquier tipo de problema con funciones que aceptan múltiples parámetros. Sigamos.&lt;/p>
&lt;h4 id="funciones-con-multiples-salidas">Funciones con múltiples salidas&lt;/h4>
&lt;p>¿Múltiples salidas? Con eso me refiero a funciones que retornan dos (tal vez más) tipos de resultados. Esto pasa en funciones que tienen distintos tipos de respuesta dependiendo de cómo las usemos o el contexto donde las usamos. Tenemos ese tipo de funciones en nuestro ejemplo, veamos &lt;code>cat&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">filepath&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">fs&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">readFileSync&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">filepath&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">utf-8&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
}
&lt;/span>&lt;/pre>
&lt;p>Dentro de &lt;code>cat&lt;/code> está la función &lt;code>readFileSync&lt;/code>, es la que se encarga de leer el archivo en nuestro sistema, la cual es una operación que puede fallar por muchas razones. Entonces &lt;code>cat&lt;/code> puede devolver un &lt;code>String&lt;/code> si todo sale bien pero también puede arrojar un error si algo malo ocurre. Tenemos que manejar estos dos casos.&lt;/p>
&lt;p>Desafortunadamente para nosotros las excepciones no son lo único con lo que tenemos que lidiar, también tenemos que manejar la ausencia de valores. En la función &lt;code>grep&lt;/code> tenemos esta línea.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">lines&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">find&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">line &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">exp&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">test&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">line&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;/pre>
&lt;p>El método &lt;code>find&lt;/code> se encarga de evaluar cada línea del contenido del archivo. Como pueden imaginar esta operación también puede fallar, simplemente puede darse el caso de que no encuentre el valor que buscamos. A diferencia de &lt;code>readFileSync&lt;/code> el método &lt;code>find&lt;/code> no arroja un error, lo que hace es retornar &lt;code>undefined&lt;/code>. De por sí &lt;code>undefined&lt;/code> no es malo, es sólo que no tenemos ninguna utilidad para él. Asumir que el resultado siempre será de tipo &lt;code>String&lt;/code> es lo que en definitiva causará un error.&lt;/p>
&lt;p>¿Cúal es la solución? &lt;/p>
&lt;p>&lt;strong>Functors&lt;/strong> &amp;amp;&amp;amp; &lt;strong>Monads&lt;/strong> (me disculpan las palabrotas). Dar una explicación apropiada de esos conceptos toma tiempo así que sólo vamos a enfocarnos en lo que nos interesa. Por los momentos pueden pensar en ellos como estructuras que siguen ciertas reglas (pueden encontrar algunas de ellas aquí: &lt;a href="https://github.com/fantasyland/fantasy-land#fantasy-land-specification">Fantasy land&lt;/a>).&lt;/p>
&lt;p>¿Cómo empezamos? Empecemos con los functors.&lt;/p>
&lt;ul>
&lt;li>Functors&lt;/li>
&lt;/ul>
&lt;p>Vamos a crear una estructura que sea capaz de ejecutar una función en el momento adecuado. Ya se han encontrado con una que puede hacer eso: los arreglos. Intenten esto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">add_one &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">number &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">41&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">empty &lt;/span>&lt;span style="color:#5fb3b3;">= [];
&lt;/span>&lt;span style="color:#cccece;">number&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [42]
&lt;/span>&lt;span style="color:#cccece;">empty&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; []
&lt;/span>&lt;/pre>
&lt;p>¿Se dieron cuenta? &lt;code>map&lt;/code> ejecutó &lt;code>add_one&lt;/code> sólo una vez, con el arreglo &lt;code>number&lt;/code>. No hizo nada en el arreglo vacío, no detuvo la ejecución del programa arrojando un error, sólo devolvió un arreglo. Ese es el tipo de comportamiento que queremos.&lt;/p>
&lt;p>Repliquemos esto por nuestra cuenta. Vamos a crear una estructura llamada &lt;code>Result&lt;/code>, esta representará una operación que puede o no tener éxito. Tendrá un método &lt;code>map&lt;/code> que sólo ejecutará la función que recibe como parámetro si la operación resulta exitosa.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">Result &lt;/span>&lt;span style="color:#5fb3b3;">= {};
&lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Ok &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Ok&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)),
};
}
&lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Err &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Err&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">),
};
}
&lt;/span>&lt;/pre>
&lt;p>Tenemos nuestro functor pero ahora se podrían estar preguntando ¿Es todo, cómo nos ayuda eso? Lo estamos haciendo un paso a la vez. Usemos lo que tenemos en &lt;code>cat&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">filepath&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">try &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Ok&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fs&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">readFileSync&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">filepath&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">utf-8&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
} &lt;/span>&lt;span style="color:#c594c5;">catch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">e&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Err&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">e&lt;/span>&lt;span style="color:#5fb3b3;">);
}
}
&lt;/span>&lt;/pre>
&lt;p>¿Qué ganamos? Intenten esto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;).&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Todavía tienen la misma pregunta en su mente, puedo verlo. Ahora intenten incorporar el resto de las funciones.&lt;/p>
&lt;blockquote>
&lt;p>Nota: Voy a asumir que pueden usar currying para lograr la aplicación parcial de los parámetros.&lt;/p>
&lt;/blockquote>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">}))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>¿Vieron? Esa cadena de &lt;code>map&lt;/code>s se parece mucho a &lt;code>compose&lt;/code> y &lt;code>pipe&lt;/code>. Logramos recuperar la composición y le incorporamos manejo de errores (casi).&lt;/p>
&lt;p>Quiero hacer algo. Ese patrón que hicimos en el &lt;code>try/catch&lt;/code> parece útil, podríamos extraerlo a una función.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">make_safe &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">args&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">try &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Ok&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#cccece;">args&lt;/span>&lt;span style="color:#5fb3b3;">));
} &lt;/span>&lt;span style="color:#c594c5;">catch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">e&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Err&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">e&lt;/span>&lt;span style="color:#5fb3b3;">);
}
}
}
&lt;/span>&lt;/pre>
&lt;p>Ahora podemos transformar &lt;code>cat&lt;/code> sin siquiera tocar su código.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">safer_cat &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">make_safe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">}))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Tal vez quieran hacer algo en caso de error, ¿cierto? Hagamos que sea posible.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const Result = {};
Result.Ok = function(value) {
return {
map: fn =&amp;gt; Result.Ok(fn(value)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> catchMap: () =&amp;gt; Result.Ok(value),
&lt;/span>&lt;span style="color:#cccece;"> };
}
Result.Err = function(value) {
return {
map: () =&amp;gt; Result.Err(value),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> catchMap: fn =&amp;gt; Result.Err(fn(value)),
&lt;/span>&lt;span style="color:#cccece;"> };
}
&lt;/span>&lt;/pre>
&lt;p>Ahora podemos equivocarnos con confianza.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">safer_cat &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">make_safe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">show_error &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">e &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">error&lt;/span>&lt;span style="color:#5fb3b3;">(`&lt;/span>&lt;span style="color:#99c794;">Whoops:&lt;/span>&lt;span style="color:#5fb3b3;">\n${&lt;/span>&lt;span style="color:#cccece;">e&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">message&lt;/span>&lt;span style="color:#5fb3b3;">}`);
&lt;/span>&lt;span style="color:#6699cc;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">what?&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">}))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">catchMap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">show_error&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Sí, lo sé, todo es muy bonito y útil pero en algún momento van a querer sacar el valor del &lt;code>Result&lt;/code>. Entiendo, javascript no es un lenguaje hecho para este tipo de cosas, van a querer &amp;quot;volver a la normalidad&amp;quot;. Agregaremos una función que nos de la libertad de extraer el valor en cualquier caso.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const Result = {};
Result.Ok = function(value) {
return {
map: fn =&amp;gt; Result.Ok(fn(value)),
catchMap: () =&amp;gt; Result.Ok(value),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> cata: (error, success) =&amp;gt; success(value)
&lt;/span>&lt;span style="color:#cccece;"> };
}
Result.Err = function(value) {
return {
map: () =&amp;gt; Result.Err(value),
catchMap: fn =&amp;gt; Result.Err(fn(value)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> cata: (error, success) =&amp;gt; error(value)
&lt;/span>&lt;span style="color:#cccece;"> };
}
&lt;/span>&lt;/pre>
&lt;p>Con esto podremos elegir qué hacer al final de la operación.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">constant &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">identity &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">what?&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">}))
.&lt;/span>&lt;span style="color:#6699cc;">cata&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">constant&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">This ain&amp;#39;t right&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;), &lt;/span>&lt;span style="color:#cccece;">identity&lt;/span>&lt;span style="color:#5fb3b3;">)
&lt;/span>&lt;span style="color:#5f6364;">// ....
&lt;/span>&lt;/pre>
&lt;blockquote>
&lt;p>Nota: Si se preguntan por qué &lt;code>cata&lt;/code>, viene de la palabra &lt;strong>catamorfismo&lt;/strong>, otro de esos términos de teoría de categoría que algunos usan en el paradigma funcional.&lt;/p>
&lt;/blockquote>
&lt;p>Ahora vamos a crear una estructura que nos permita resolver el problema que tenemos con &lt;code>grep&lt;/code>. En este caso lo que tenemos que hacer es manejar la ausencia de un valor.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">Maybe &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value &lt;/span>&lt;span style="color:#5fb3b3;">== &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">();
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Just&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Just &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Just&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#6699cc;">catchMap&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Just&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">cata&lt;/span>&lt;span style="color:#5fb3b3;">: (&lt;/span>&lt;span style="color:#f99157;">nothing&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">just&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">just&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)
};
}
&lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Nothing &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">(),
&lt;/span>&lt;span style="color:#6699cc;">catchMap&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(),
&lt;/span>&lt;span style="color:#6699cc;">cata&lt;/span>&lt;span style="color:#5fb3b3;">: (&lt;/span>&lt;span style="color:#f99157;">nothing&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">just&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">nothing&lt;/span>&lt;span style="color:#5fb3b3;">()
};
}
&lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">wrap_fun &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">args&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#cccece;">args&lt;/span>&lt;span style="color:#5fb3b3;">));
}
}
&lt;/span>&lt;/pre>
&lt;p>Vamos a envolver &lt;code>grep&lt;/code> con un &lt;code>Maybe&lt;/code> y probaremos si funciona usando el &lt;code>cat&lt;/code> original para extraer el contenido del archivo.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">maybe_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">wrap_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;span style="color:#6699cc;">maybe_host&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">catchMap&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">Nothing()&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;/pre>
&lt;p>Eso debería mostrar &lt;code>http://locahost:5000&lt;/code>. Y si cambian el patrón &lt;code>^HOST=&lt;/code> debería mostrar &lt;code>Nothing()&lt;/code>.&lt;/p>
&lt;p>Tenemos versiones más seguras de &lt;code>cat&lt;/code> y &lt;code>grep&lt;/code> pero vean lo que pasa cuando se juntan.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">maybe_host&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">res &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#cccece;">res &lt;/span>&lt;span style="color:#5fb3b3;">}));
.&lt;/span>&lt;span style="color:#6699cc;">catchMap&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">what?&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
&lt;/span>&lt;/pre>
&lt;p>Obtienen esto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">{
res: {
map: [Function: map],
catchMap: [Function: catchMap],
cata: [Function: cata]
}
}
&lt;/span>&lt;/pre>
&lt;p>¿Qué está pasando? Bueno, hay un &lt;code>Maybe&lt;/code> atrapado dentro de un &lt;code>Result&lt;/code>. Tal vez ustedes no esperaban eso pero otras personas sí, y ellas ya tienen las solución.&lt;/p>
&lt;ul>
&lt;li>Monads&lt;/li>
&lt;/ul>
&lt;p>Resulta que los monads son functors con poderes extra. Lo que nos interesa saber por el momento es que resuelven el problema de las estructuras anidadas. Hagamos los ajustes pertinentes.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> Result.Ok = function(value) {
return {
map: fn =&amp;gt; Result.Ok(fn(value)),
catchMap: () =&amp;gt; Result.Ok(value),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> flatMap: fn =&amp;gt; fn(value),
&lt;/span>&lt;span style="color:#cccece;"> cata: (error, success) =&amp;gt; success(value)
};
}
Result.Err = function(value) {
return {
map: () =&amp;gt; Result.Err(value),
catchMap: fn =&amp;gt; Result.Err(fn(value)),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> flatMap: () =&amp;gt; Result.Err(value),
&lt;/span>&lt;span style="color:#cccece;"> cata: (error, success) =&amp;gt; error(value)
};
}
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> Maybe.Just = function(value) {
return {
map: fn =&amp;gt; Maybe.Just(fn(value)),
catchMap: () =&amp;gt; Maybe.Just(value),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> flatMap: fn =&amp;gt; fn(value),
&lt;/span>&lt;span style="color:#cccece;"> cata: (nothing, just) =&amp;gt; just(value),
};
}
Maybe.Nothing = function() {
return {
map: () =&amp;gt; Maybe.Nothing(),
catchMap: fn =&amp;gt; fn(),
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> flatMap: () =&amp;gt; Maybe.Nothing(),
&lt;/span>&lt;span style="color:#cccece;"> cata: (nothing, just) =&amp;gt; nothing(),
};
}
&lt;/span>&lt;/pre>
&lt;p>El método &lt;code>flatMap&lt;/code> además de comportarse como &lt;code>map&lt;/code> nos permite deshacernos de &amp;quot;capas&amp;quot; extras que pueden complicar la composición más adelante. Asegúrense de usar &lt;code>flatMap&lt;/code> sólo con funciones que retornen otros monads ya que esta no es la implementación más segura.&lt;/p>
&lt;blockquote>
&lt;p>Nota: Sí, los arreglos también son monads. Tienen los métodos &lt;code>map&lt;/code> y &lt;code>flatMap&lt;/code> que siguen todas las leyes.&lt;/p>
&lt;/blockquote>
&lt;p>Probamos otra vez con &lt;code>maybe_host&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> &lt;/span>&lt;span style="color:#6699cc;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">flatMap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">maybe_host&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">res &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#cccece;">res &lt;/span>&lt;span style="color:#5fb3b3;">}));
.&lt;/span>&lt;span style="color:#6699cc;">catchMap&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">what?&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;))
&lt;/span>&lt;/pre>
&lt;p>Eso debería darnos.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">{ res: &amp;#39;HOST=http://localhost:5000&amp;#39; }
&lt;/span>&lt;/pre>
&lt;p>Estamos listos para combinar todo nuevamente.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">safer_cat &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">make_safe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">maybe_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">wrap_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">wrap_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({&lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">}));
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
.&lt;/span>&lt;span style="color:#6699cc;">flatMap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">maybe_host&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">flatMap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">cata&lt;/span>&lt;span style="color:#5fb3b3;">(
() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">http://127.0.0.1:3000&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;,
&lt;/span>&lt;span style="color:#f99157;">host &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">host
&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// ....
&lt;/span>&lt;/pre>
&lt;p>¿Y cómo sería si quisiéramos usar &lt;code>pipe&lt;/code> o &lt;code>compose&lt;/code>?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">chain &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#f99157;">m &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">m&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">flatMap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fn&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">unwrap_or &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">fallback &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#f99157;">fm &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt;
&lt;/span>&lt;span style="color:#cccece;">fm&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">cata&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">fallback&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">safer_cat &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">make_safe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">maybe_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">wrap_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">grep&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">^HOST=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">wrap_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">cut&lt;/span>&lt;span style="color:#5fb3b3;">({&lt;/span>&lt;span style="color:#6699cc;">delimiter&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">=&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#6699cc;">fields&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">}));
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_host &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">safer_cat&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">chain&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">maybe_host&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">chain&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">get_value&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">http://127.0.0.1:3000&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
);
&lt;/span>&lt;span style="color:#6699cc;">get_host&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">.env&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;/pre>
&lt;p>Pueden ver todo el código aquí: &lt;a href="https://gist.github.com/VonHeikemen/0e6d4950bfe91229ee06eee2e3c74515">link&lt;/a>.&lt;/p>
&lt;h2 id="todavia-quieren-saber-mas">¿Todavía quieren saber más?&lt;/h2>
&lt;p>Hay muchas cosas que no mencioné para no tomar mucho de su tiempo. Si quieren indagar un poco más aquí les dejo más material que he preparado.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/partial-application/">Aplicacion parcial&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/the-power-of-map/">Más sobre Functors&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/using-a-maybe/">Usando un Maybe&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/dealing-with-side-effects-and-pure-functions/">Funciones puras y efectos&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion">Conclusión&lt;/h2>
&lt;p>Muchas personas hablan de lo lindo que es la composición y cómo hace tu código más declarativo y limpio, pero nunca te muestran el lado difícil. Espero haber logrado eso, enseñarles un poco del lado difícil y cómo se puede superar. Combinar funciones en realidad es un arte, se requiere de práctica y tiempo para acostumbrarse a ciertas cosas (como que las funciones son cosas).&lt;/p>
&lt;h2 id="fuentes">Fuentes&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=vDe-4o8Uwl8">The Power of Composition (video)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=SfWR3dKnFIo">Oh Composable World! (video)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=7BsfMMYvGaU">Mary had a little lambda (video)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dev.to/joelnet/functional-javascript---functors-monads-and-promises-1pol">Functional JavaScript - Functors, Monads, and Promises&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Un poco del paradigma funcional en tu javascript: Aplicación parcial</title><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/partial-application/</link><guid>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/partial-application/</guid><description>&lt;p>Hoy vamos a resolver un misterio, el misterio de porque algunas personas crean funciones que aceptan una (otra) función como primer parámetro. Ya deben estar pensando que la respuesta es aplicación parcial y tienen razón en cierta parte, pero la aplicación parcial sólo es el medio para un fin, la verdadera razón de esto es para hacer posible una &amp;quot;mejor&amp;quot; composición de funciones. Pero antes de adentrarnos en los detalles técnicos de la aplicación parcial vamos a explorar la manera en la que hacemos las cosas actualmente.&lt;/p>
&lt;h2 id="como-hacemos-las-cosas">Como hacemos las cosas&lt;/h2>
&lt;p>Cuando creamos una función usualmente ordenamos los parámetros basados en un sistema de prioridad/importancia, donde el más importante va primero. Como resultado, cuando trabajamos sobre un dato este es el primero en la lista, le siguen los parámetros de configuración y por último dejamos los parámetros opcionales que podemos omitir.&lt;/p>
&lt;p>Pongamos a prueba esa teoría. Digamos que queremos crear una función que pueda extraer unas propiedades específicas de un objeto plano. Pensemos en lo que necesitamos. ¿El objeto, eso en lo primero que pensaron? Es natural, no queremos omitirlo por accidente cuando ejecutemos la función. Eso deja la lista de propiedades como último parámetro. &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">keys&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= {};
&lt;/span>&lt;span style="color:#c594c5;">for&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">key of keys&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">] = &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">];
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;blockquote>
&lt;p>Nota: No somos lo únicos que pensamos de esta manera, echen un vistazo a &lt;a href="https://lodash.com/docs/#pick">pick de lodash&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Ahora digamos que tenemos un objeto &lt;code>user&lt;/code> y queremos esconder cualquier información &amp;quot;sensible&amp;quot;. Lo haríamos de esta manera.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">user &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#cccece;">id&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">7&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Tom&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Keen&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">email&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">noreply@example.com&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">password&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">hudson&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;
};
&lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#5f6364;">// { name: &amp;quot;Tom&amp;quot;, lastname: &amp;quot;Keen&amp;quot; }
&lt;/span>&lt;/pre>
&lt;p>Funciona bien, ¿Pero qué pasa cuando necesitamos trabajar con un arreglo de usuarios?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">users &lt;/span>&lt;span style="color:#5fb3b3;">= [
{
&lt;/span>&lt;span style="color:#cccece;">id&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">7&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Tom&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Keen&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">email&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">noreply@example.com&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">password&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">hudson&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;
},
{
&lt;/span>&lt;span style="color:#cccece;">id&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">30&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Smokey&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Putnum&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">email&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">noreply@example.com&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">password&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">carnival&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;
},
{
&lt;/span>&lt;span style="color:#cccece;">id&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">69&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Lady&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Luck&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">email&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">noreply@example.com&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">password&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">norestforthewicked&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;
}
];
&lt;/span>&lt;/pre>
&lt;p>Nos vemos forzados a recorrer el arreglo y llamar la función.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">user&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
});
&lt;/span>&lt;span style="color:#5f6364;">/*
[
{&amp;quot;name&amp;quot;: &amp;quot;Tom&amp;quot;, &amp;quot;lastname&amp;quot;: &amp;quot;Keen&amp;quot;},
{&amp;quot;name&amp;quot;: &amp;quot;Smokey&amp;quot;, &amp;quot;lastname&amp;quot;: &amp;quot;Putnum&amp;quot;},
{&amp;quot;name&amp;quot;: &amp;quot;Lady&amp;quot;, &amp;quot;lastname&amp;quot;: &amp;quot;Luck&amp;quot;}
]
*/
&lt;/span>&lt;/pre>
&lt;p>No está tan mal. ¿Saben qué? Esa función parece útil. Vamos ponerla en otro lugar y le daremos un nombre.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">user&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
}
&lt;/span>&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>¿Qué está pasando en realidad? Lo que estamos haciendo es vincular el segundo parámetro de la función con el valor &lt;code>['name', 'lastname']&lt;/code> y obligamos a &lt;code>pick&lt;/code> a esperar por el objeto &lt;code>user&lt;/code> para ser ejecutado.&lt;/p>
&lt;p>Llevemos este ejemplo más allá. Vamos a fingir que &lt;code>Async/Await&lt;/code> no existe y que el arreglo &lt;code>users&lt;/code> viene de una promesa (de una instancia de &lt;code>Promise&lt;/code>) tal vez de una petición http usando &lt;code>fetch&lt;/code>. ¿Qué hacemos?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">users&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">user&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
})
});
&lt;/span>&lt;/pre>
&lt;p>Eso sí se ve mal. Tal vez una función con flechas puedan mejorar la situación.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">users &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">user &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;])));
&lt;/span>&lt;/pre>
&lt;p>¿Está mejor? Una pregunta para otro día. Pero ya nos preparamos para esto, tenemos la función &lt;code>public_info&lt;/code>, vamos a usarla. &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">users &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;/pre>
&lt;p>Es aceptable, me gusta. Y si queremos podemos crear otra función que vincule &lt;code>public_info&lt;/code> con &lt;code>.map&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">user_list&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">users&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>Ahora tenemos.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user_list&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Veamos cómo llegamos a este punto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">keys&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// código...
&lt;/span>&lt;span style="color:#5fb3b3;">}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">user&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">user_list&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">users&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">users&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user_list&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>¿Y si les digo que hay otra manera de crear &lt;code>public_info&lt;/code> y &lt;code>user_list&lt;/code>? ¿Y si se pudiera crear así?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">public_info &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">user_list &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">public_info&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">user_list&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>O poner todo en una línea si eso prefieren.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">fetch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">url&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">pick&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">lastname&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;])));
&lt;/span>&lt;/pre>
&lt;p>Podemos hacerlo pero primero tenemos que cambiar ligeramente la forma en la que pensamos en las funciones.&lt;/p>
&lt;h2 id="pensando-diferente">Pensando diferente&lt;/h2>
&lt;p>En lugar de pensar en prioridades deberíamos empezar a pensar en dependencias y datos. Al crear una función pensemos ¿qué parámetro es el que cambia con más frecuencia? Ese debería ser el último parámetro. &lt;/p>
&lt;p>Hagamos una función que tome los primeros elementos de algo. ¿Qué necesitamos? Necesitamos ese &amp;quot;algo&amp;quot; y también el necesitamos el número de elementos que vamos a tomar. De esos dos ¿cuál cambia con más frecuencia? Es el dato, ese &amp;quot;algo&amp;quot;.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">take&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">count&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">slice&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">count&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>En una situación normal esta es la forma de usarla.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">take&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">, [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">first&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">second&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">rest&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#5f6364;">// [&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;]
&lt;/span>&lt;/pre>
&lt;p>Pero con un poco de magia (la cual será revelada pronto) podemos reusarla de la siguiente manera.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">first_two &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">take&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">first_two&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">first&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">second&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">rest&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>Este patrón se vuelve más conveniente cuando hay funciones (callbacks) involucradas. Vamos a &amp;quot;revertir&amp;quot; los parámetros de &lt;code>Array.filter&lt;/code> y veamos qué podemos hacer.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">func&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">func&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>Hagamos algo sencillo, vamos a excluir de un arreglo todos los valores que puedan ser interpretados como falsos.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">, [&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [ true, &amp;quot;that&amp;quot; ]
&lt;/span>&lt;/pre>
&lt;p>Se ve bien, y puede ser incluso mejor se le añadimos algo de contexto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exclude_falsey &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">exclude_falsey&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>Espero que a estas alturas puedan ver las posibilidades que este patrón puede ofrecer. Existen librerías (como &lt;a href="https://ramdajs.com/docs/">Ramda&lt;/a>) que usan esta técnica para construir funciones complejas usando como bases funciones pequeñas de un sólo propósito.&lt;/p>
&lt;p>Ya basta de hablar, ahora veamos como podemos lograr implementar esto.&lt;/p>
&lt;h2 id="este-es-el-camino">Este es el camino&lt;/h2>
&lt;p>Como todo en javascript hay mil maneras de lograr la misma meta, algunas son más convenientes que otras, y en ocasiones se requiere de magia para implementarlo. Empecemos.&lt;/p>
&lt;h3 id="el-vinculo-magico-de-bind">El vínculo mágico de bind&lt;/h3>
&lt;p>Resulta que no necesitamos hacer nada extraordinario para vincular valores a los parámetros de una función porque cada una ya cuenta con el método &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">bind&lt;/a>. Puede que la sintaxis no parezca tan conveniente como la mostré en los ejemplo pero está bastante cerca. Sólo se debe tener en cuenta que el primer parámetro de &lt;code>Function.bind&lt;/code> es el &amp;quot;contexto&amp;quot;, es decir el valor que tiene la palabra clave &lt;code>this&lt;/code> dentro de una función. Este es su uso básico. &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exclude_falsey &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">filter&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">exclude_falsey&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>&lt;h3 id="la-magia-interior">La magia interior&lt;/h3>
&lt;p>Este requiere de un poco de trabajo e involucra otra palabra clave, &lt;code>arguments&lt;/code>. Lo que haremos será aprovechar el hecho de que &lt;code>arguments&lt;/code> es una estructura parecida a un arreglo que tiene una propiedad &lt;code>.length&lt;/code> con la cual podremos contar el número de parámetros que la función ha recibido, si es menos de los que necesitamos devolveremos nuevamente la función. ¿Suena confuso?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">func&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// Aquí empezamos a contar.
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// si .length es 1 eso significa que tenemos `func`
// también significa que no tenemos `data`
// asi que devolvemos una función que
// recuerda el valor de `func` y espera por `data`
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">func&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">func&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>Ahora es posible hacer esto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exclude_falsey &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">exclude_falsey&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>Y también.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">, [&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>¿No es genial?&lt;/p>
&lt;h3 id="un-enfoque-simple">¿Un enfoque simple?&lt;/h3>
&lt;p>Y por supuesto que siempre tenemos la opción de implementar &lt;code>bind&lt;/code> nosotros mismos. Con la ayuda del operador de propagación (los &lt;code>...&lt;/code>) podemos recoger los argumentos por pasos y simplemente aplicarlos a la función cuando sea momento de llamarla.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">func&lt;/span>&lt;span style="color:#5fb3b3;">, ...&lt;/span>&lt;span style="color:#f99157;">first_args&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">rest&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">func&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#cccece;">first_args&lt;/span>&lt;span style="color:#5fb3b3;">, ...&lt;/span>&lt;span style="color:#cccece;">rest&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>El primer paso es obtener la función y recoger una lista de parámetros, luego devolvemos una función que recolecta otra lista de parámetros y finalmente llamamos la función &lt;code>func&lt;/code> con todo lo que tenemos.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exclude_falsey &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">filter&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">exclude_falsey&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>Lo interesante de esto es que si revierten el orden de &lt;code>first_args&lt;/code> con &lt;code>rest&lt;/code> pueden crear una función que vincula los argumentos en el orden opuesto.&lt;/p>
&lt;h3 id="no-mas-magia">No más magia&lt;/h3>
&lt;p>Con este pueda que tenga sentimientos encontrados pero la verdad es que esta la forma más simple.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">func&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">func&lt;/span>&lt;span style="color:#5fb3b3;">);
}
}
&lt;/span>&lt;/pre>
&lt;p>Lo que es equivalente a esto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">filter &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">func &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#f99157;">data &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">func&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>La idea es tomar un parámetro a la vez en funciones separadas. Basicamente, sigan devolviendo funciones hasta que tengan todos los parámetros que necesitan. Esto es lo que algunos llaman &amp;quot;currying&amp;quot;. ¿Cómo se usa?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exclude_falsey &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">exclude_falsey&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>Ese es un caso. Este es el otro.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">filter &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">) ([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>¿Ven ese par de paréntesis extra? Esa es la segunda función. Necesitan colocar un par por cada parámetro que tenga la función.&lt;/p>
&lt;h3 id="curry-automatico">Curry automático&lt;/h3>
&lt;p>Volviendo al tema de la magia, pueden &amp;quot;automatizar&amp;quot; el proceso de curry usando una función.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">curry&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">arity&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// Adivina cuantos parámetros se necesitan
// Esto no funciona todo el tiempo.
&lt;/span>&lt;span style="color:#cccece;">arity &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fn&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#5f6364;">// Ignora `fn` y `arity`, pon el resto es `rest``
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">rest &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Array&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">prototype&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">slice&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">call&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// ¿Tenemos lo que necesitamos?
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">arity &lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;= &lt;/span>&lt;span style="color:#cccece;">rest&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">fn&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">apply&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">rest&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#5f6364;">// Ejecuta `curry.bind` con `fn`, `arity` y `rest` como parámetros
// retorna una función que espera el resto
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">curry&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">apply&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">curry&lt;/span>&lt;span style="color:#5fb3b3;">, [&lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">arity&lt;/span>&lt;span style="color:#5fb3b3;">, ...&lt;/span>&lt;span style="color:#cccece;">rest&lt;/span>&lt;span style="color:#5fb3b3;">]);
}
&lt;/span>&lt;/pre>
&lt;p>Con esto ya pueden transformar funciones ya existentes o crear nuevas que soporten el &amp;quot;curry&amp;quot; desde el inicio.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">curried_filter &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">curry&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">filter&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">exclude_falsey &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">curried_filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Boolean&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">exclude_falsey&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&amp;#39;, &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">that&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>Ó.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">filter &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">curry&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">func&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">func&lt;/span>&lt;span style="color:#5fb3b3;">);
});
&lt;/span>&lt;/pre>
&lt;p>Eso es todo, amigos. Espero hayan disfrutado la lectura.&lt;/p>
&lt;h2 id="fuentes">Fuentes&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=m3svKOdZijA">Hey Underscore, You're Doing It Wrong! (video)&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://benalman.com/news/2012/09/partial-application-in-javascript/">Partial Application in JavaScript&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Un poco del paradigma funcional en tu javascript: Los poderes de map</title><pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/the-power-of-map/</link><guid>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/the-power-of-map/</guid><description>&lt;p>En esta ocasión vamos a dar un vistazo dentro del mundo de los &lt;code>functors&lt;/code> y descubrir qué los hace tan especiales. Functor es uno de esos términos que aparece cuando la gente a habla del paradigma funcional en la programación pero cuando llega el momento de explicar qué es, lo que ocurre es que mencionan otros términos abstractos o sólo cuantan los detalles necesarios que necesitan saber. Ya que no tengo ningún conocimiento formal de teoría de categorías no voy a fingir qué sé exactamente lo que son, lo que haré será dicerles lo suficiente para que puedan reconocerlos y cómo pueden usarlos.&lt;/p>
&lt;h2 id="que-es-un-functor">¿Qué es un functor?&lt;/h2>
&lt;p>Estoy convencido de qué el término es difícil de entender porque se necesita conocimientos de otro tipo de estructura para poder comprenderlos en su totalidad. Otra cosa que contribuye a la confusión es el hecho de que la teoría no sé traduce de la manera más clara en código. Pero bueno, aún así intentaré responder la pregunta, empezando con lo abstracto. &lt;/p>
&lt;p>Pueden pensar en ellos como la relación que existe entre dos conjuntos. Tengan paciencia, esto empezará a tener sentido en un momento. Imaginen dos arreglos.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">favorite_numbers &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">69&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">73&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">increased_numbers &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">43&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">70&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">74&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;/pre>
&lt;p>Bien, tenemos el conjunto &lt;code>favorite_numbers&lt;/code> y el conjunto &lt;code>increased_numbers&lt;/code>, son dos arreglos diferentes almacenados en dos variables separadas pero todos sabemos que hay una conexión entre ellos, lo que debemos tener en cuenta es que podemos expresar esa relación con código. Imaginen que el arreglo &lt;code>increased_numbers&lt;/code> no existe pero aún necesitamos esos números, para hacer que aparezcan nuevamente sólo necesitamos la ayuda de nuestro viejo amigo &lt;code>map&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">increased_numbers &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">favorite_numbers&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>&lt;code>map&lt;/code> va a recorrer todo el arreglo y por cada número va a incrementarlo y colocarlo en nuevo arreglo, lo que trae a &lt;code>increased_numbers&lt;/code> devuelta. Aunque hemos creado este arreglo nuevamente, este no salió de la nada, nosotros no inventamos los números &lt;code>43&lt;/code>, &lt;code>70&lt;/code> y &lt;code>74&lt;/code>. Lo que hicimos fue describir la relación que hay entre esos números y &lt;code>favorite_numbers&lt;/code>. &lt;/p>
&lt;p>¿Eso es todo? ¿Un functor es un arreglo? La respuesta a eso es un rotundo no. Los arreglos son simplemente una manera muy conveniente de representar un uso común. Esto deja una pregunta en el aire.&lt;/p>
&lt;h2 id="como-los-reconocemos">¿Cómo los reconocemos?&lt;/h2>
&lt;p>A menudo veo que otras personas los describen como cajas. No creo que estén totalmente errados porque utilizar un contenedor es una de las maneras más simples en las que se puede implementar un functor. La analogía de la caja es especialmente curiosa en javascript porque podemos usar corchetes para crear un arreglo. Vean.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Un valor
&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#5f6364;">// Una caja
&lt;/span>&lt;span style="color:#5fb3b3;">[];
&lt;/span>&lt;span style="color:#5f6364;">// Miren, un valor en una caja
&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;/pre>
&lt;p>Volviendo a la pregunta, ¿Cómo los reconocemos? Okey, resulta pasa y acontece que hay reglas.&lt;/p>
&lt;h3 id="las-reglas">Las reglas&lt;/h3>
&lt;p>De nuevo usaré arreglos con números sólo por lo conveniente pero estas reglas deben aplicar a todas aquellas estructuras que deseen ser parte del club functor.&lt;/p>
&lt;h4 id="identidad">Identidad&lt;/h4>
&lt;p>Dada la función &lt;code>identity&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">identity&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">x&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">x&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>&lt;code>value&lt;/code> and &lt;code>value.map(identity)&lt;/code> deben ser equivalentes.&lt;/p>
&lt;p>Por ejemplo.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">]; &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [1,2,3]
&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">].&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">identity&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [1,2,3]
&lt;/span>&lt;/pre>
&lt;p>¿Qué? ¿Qué importancia tiene eso? ¿Qué nos dice?&lt;/p>
&lt;p>Buenas preguntas. Esto nos dice que la función &lt;code>map&lt;/code> debe preservar la forma de la estructura. En nuestro ejemplo si aplicamos &lt;code>map&lt;/code> a un arreglo de tres elementos debemos recibir un nuevo arreglo con tres elementos. Si fuera un arreglo con cien elementos deberíamos recibir un nuevo arreglo con cien elementos. Ya entienden.&lt;/p>
&lt;h4 id="composicion">Composición&lt;/h4>
&lt;p>Dadas dos funciones &lt;code>fx&lt;/code> y &lt;code>gx&lt;/code> lo siguiente debe ser cierto.&lt;/p>
&lt;p>&lt;code>value.map(fx).map(gx)&lt;/code> y &lt;code>value.map(arg =&amp;gt; gx(fx(arg)))&lt;/code> deben ser equivalentes.&lt;/p>
&lt;p>Otro ejemplo.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">* &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">;
}
[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">].&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [4]
&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">].&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">num&lt;/span>&lt;span style="color:#5fb3b3;">))); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [4]
&lt;/span>&lt;/pre>
&lt;p>Si ya saben como funciona &lt;code>Array.map&lt;/code> esto debería ser obvio. Aquí se presenta la oportunidad de optimizar el código para el desempeño o legibilidad. En el caso de los arreglos, múltiples llamadas a &lt;code>map&lt;/code> puede tener un gran impacto en el desempeño a medida que vaya creaciendo el número de elementos en la lista.&lt;/p>
&lt;p>Eso es todo. Esas dos reglas son lo único que deben tener en cuenta para reconocer un functor.&lt;/p>
&lt;h2 id="tiene-que-ser-map">¿Tiene que ser .map?&lt;/h2>
&lt;p>Supongo que ahora desean saber qué otro tipo de cosas siguen estas reglas que mencioné. Resulta que hay otra estructura bastante popular que sigue estas reglas y esa es &lt;code>Promise&lt;/code>. Vean.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Un valor
&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#5f6364;">// Una caja
&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">resolve&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#5f6364;">// Miren, un valor en una caja
&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">resolve&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Identidad
&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">resolve&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">identity&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 1 (eventualmente)
// Composición
&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">resolve&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 4
&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">resolve&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">num&lt;/span>&lt;span style="color:#5fb3b3;">))); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 4
&lt;/span>&lt;/pre>
&lt;p>Si somos honestos aquí, &lt;code>Promise.then&lt;/code> se comporta más como &lt;code>Array.flatMap&lt;/code> y no como &lt;code>.map&lt;/code> pero ignoremos eso.&lt;/p>
&lt;p>Bien, tenemos &lt;code>Array&lt;/code> y tenemos &lt;code>Promise&lt;/code> ambos actúan como contenedores y tienen métodos que siguen las reglas. ¿Pero qué pasaría si no existiera &lt;code>Array.map&lt;/code>? ¿Significa que &lt;code>Array&lt;/code> no es un functor? ¿Perdemos todos los beneficios?&lt;/p>
&lt;p>Vamos a dar un paso atrás. ¿Si &lt;code>Array.map&lt;/code> no existe &lt;code>Array&lt;/code> no es un &lt;code>functor&lt;/code>? No lo sé. ¿Perdemos todos los beneficios? No, aún podemos tratar los arreglos como un functor, lo que perdemos es la conviniencia de la sintaxis &lt;code>.map&lt;/code>. Aún podemos crear nuestro propio &lt;code>map&lt;/code> fuera de la estructura.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">List &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">arr&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= [];
&lt;/span>&lt;span style="color:#c594c5;">for &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">data &lt;/span>&lt;span style="color:#5fb3b3;">of &lt;/span>&lt;span style="color:#cccece;">arr&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">push&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
};
&lt;/span>&lt;/pre>
&lt;p>¿Ven? No está tan mal. Y funciona.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Identidad
&lt;/span>&lt;span style="color:#fac863;">List&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">identity&lt;/span>&lt;span style="color:#5fb3b3;">, [&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">]); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [1]
// Composición
&lt;/span>&lt;span style="color:#fac863;">List&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#fac863;">List&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">, [&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">])); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [4]
&lt;/span>&lt;span style="color:#fac863;">List&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">num&lt;/span>&lt;span style="color:#5fb3b3;">)), [&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">]); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; [4]
&lt;/span>&lt;/pre>
&lt;p>¿Están pensando lo que yo? Probablemente no. Esto es lo que estoy pensando, si podemos crear &lt;code>map&lt;/code> para los arreglos entonces nada evita que hagamos uno para los objetos, después de todo, los objetos también son un conjunto de valores.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">Obj &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">ob&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= {};
&lt;/span>&lt;span style="color:#c594c5;">for &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">] of &lt;/span>&lt;span style="color:#fac863;">Object&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">entries&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">ob&lt;/span>&lt;span style="color:#5fb3b3;">)) {
&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">] = &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
};
&lt;/span>&lt;span style="color:#5f6364;">// ¿Por qué solo map?
// Basado en esto ya pueden ver cómo crear `filter` y `reduce`
&lt;/span>&lt;/pre>
&lt;p>Vamos a probar.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Identidad
&lt;/span>&lt;span style="color:#fac863;">Obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">identity&lt;/span>&lt;span style="color:#5fb3b3;">, {&lt;/span>&lt;span style="color:#6699cc;">some&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">}); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; {some: 1, prop: 2}
// Composición
&lt;/span>&lt;span style="color:#fac863;">Obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#fac863;">Obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">, {&lt;/span>&lt;span style="color:#6699cc;">some&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">})); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; {some: 4, prop: 6}
&lt;/span>&lt;span style="color:#fac863;">Obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">num&lt;/span>&lt;span style="color:#5fb3b3;">)), {&lt;/span>&lt;span style="color:#6699cc;">some&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">}); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; {some: 4, prop: 6}
&lt;/span>&lt;/pre>&lt;h2 id="hazlo-tu-mismo">Hazlo tú mismo&lt;/h2>
&lt;p>Toda esta charla de arreglos y objetos es útil pero ahora pienso que sabemos lo suficiente para crear nuestro propio functor, las reglas parecen ser bastante sencillas. Vamos a hacer algo vagamente útil. ¿Alguna vez han escuchado de los Observables? Bien, vamos a hacer algo parecido. Vamos a crear una versión más simple de &lt;a href="https://mithril.js.org/stream.html">mithril-stream&lt;/a>, será divertido.&lt;/p>
&lt;p>Lo que queremos hacer es manejar un flujo de datos a través del tiempo. La interfaz de nuestra función será esta.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Crear instancia con valor inicial
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">num_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Crear un flujo dependendiente
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">increased &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Obtener el valor actual
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 0
// Colocar un nuevo valor en el flujo
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 42
// La fuente se actualiza
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 42
// El dependiente se actualiza
&lt;/span>&lt;span style="color:#6699cc;">increased&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 43
&lt;/span>&lt;/pre>
&lt;p>Empecemos con la función que obtiene y actualiza el valor.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">state&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#6699cc;">stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// Si tenemos un parametro actualizamos el estado
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt; &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">state &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#5f6364;">// retorna el estado actual
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">stream&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Ahora esto debería funcionar.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Inicializamos
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">num_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Obtenemos el valor
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 42
// Actualizamos
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">73&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Revisamos
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 73
&lt;/span>&lt;/pre>
&lt;p>Ya sabemos que queremos un método &lt;code>map&lt;/code> pero ¿Cuál es el efecto que debe tener? Lo que queremos es que la función (el callback) escuche los cambios de la fuente. Empecemos con eso, lo que haremos será almacenar las funciones proporcionadas a &lt;code>map&lt;/code> en un arreglo y las ejecutaremos justo después de que se produzca el cambio.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> function Stream(state) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> let listeners = [];
&lt;/span>&lt;span style="color:#5fb3b3;">+
&lt;/span>&lt;span style="color:#cccece;"> let stream = function(value) {
if(arguments.length &amp;gt; 0) {
state = value;
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> listeners.forEach(fn =&amp;gt; fn(value));
&lt;/span>&lt;span style="color:#cccece;"> }
return state;
}
return stream;
}
&lt;/span>&lt;/pre>
&lt;p>Ahora creamos el método &lt;code>map&lt;/code>, pero no debe ser un método cualquiera, debemos seguir las reglas.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Identidad: Cuando &lt;code>map&lt;/code> es ejecutado necesita preservar la forma de la estructura. Esto significa que debemos retornar otro &lt;code>stream&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Composición: Ejecutar &lt;code>map&lt;/code> varias veces debe ser equivalente a la composición de funciones proporciondas a esas llamadas.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">state&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">listeners &lt;/span>&lt;span style="color:#5fb3b3;">= [];
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#6699cc;">stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt; &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">state &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#cccece;">listeners&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">forEach&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#fac863;">stream&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// Crea una nueva instancia con el valor transformado.
// Esto ejecutara `fn` cuando se llame a `map`
// esto no siempre será lo mejor si `fn` tiene algún
// efecto fuera de su ámbito. Tengan cuidado.
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">target &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">state&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#5f6364;">// Transforma el valor y actualiza el nuevo flujo
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">listener &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">target&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#5f6364;">// Actualiza los dependientes de la fuente
&lt;/span>&lt;span style="color:#cccece;">listeners&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">push&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">listener&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">target&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">stream&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Probemos las reglas. Comenzamos con identidad.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Los `Stream` son como una cascada
// el primero es el más importante
// este es el que activa los demás
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">num_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Crea el dependendiente
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">identity_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">identity&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Actualiza la fuente
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">42&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Revisa
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 42
&lt;/span>&lt;span style="color:#6699cc;">identity_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 42
&lt;/span>&lt;/pre>
&lt;p>Ahora la composición.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Crea la fuente
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">num_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Crea los dependientes
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">map_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">composed_stream &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">times_two&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">add_one&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">num&lt;/span>&lt;span style="color:#5fb3b3;">)));
&lt;/span>&lt;span style="color:#5f6364;">// Actualiza
&lt;/span>&lt;span style="color:#6699cc;">num_stream&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// Revisa
&lt;/span>&lt;span style="color:#6699cc;">map_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 4
&lt;/span>&lt;span style="color:#6699cc;">composed_stream&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; 4
&lt;/span>&lt;/pre>
&lt;p>Nuestro trabajo está hecho. ¿Pero de verdad sirve? ¿Se puede hacer algo con eso? Bueno, sí, pueden usarlo para manejar eventos. Así.&lt;/p>
&lt;p
class="codepen"
data-height="600"
data-theme-id="dark"
data-default-tab="js,result"
data-user="VonHeikemen"
data-slug-hash="dyoMJRw"
data-preview="true"
style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"
data-pen-title="an fmap example">
&lt;span>
See the Pen &lt;a href="https://codepen.io/VonHeikemen/pen/dyoMJRw">an fmap example&lt;/a> by Heiker (&lt;a href="https://codepen.io/VonHeikemen">@VonHeikemen&lt;/a>) on &lt;a href="https://codepen.io">CodePen&lt;/a>.
&lt;/span>
&lt;/p>
&lt;script async src="https://static.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;h3 id="mas-ejemplos">Más ejemplos&lt;/h3>
&lt;p>Ahora ya deben tener un buen entendimiento de los functors, pero si quieren seguir viendo más pueden revisar estos artículos.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vonheikemen.github.io/devlog/es/web-development/learn-fp/using-a-maybe/">Manejar ausencia de valores&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/">Manejo de efectos secundarios&lt;/a> (inglés)&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion">Conclusión&lt;/h2>
&lt;p>Lo único que queda por responser es &amp;quot;¿Qué beneficios tienen los functors?&amp;quot;&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Este patrón nos permite enfocarnos en un problema a la vez. La función &lt;code>map&lt;/code> se encarga de obtener los datos necesarios y en el &lt;code>callback&lt;/code> nos podemos enfocar en cómo procesarlos.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Reutilización. Este estilo de programación promueve el uso y creación de funciones de generales que sólo se encargan de una tarea, en muchos casos estas pueden ser compartidas incluso entre proyectos.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Extensión a través de la composición. Hay gente que tiene sentimientos encontrados en este caso, especialmente si hablamos de aplicarlo a los arreglos. Pero lo que quiero decir es que los functors promueven el uso de cadenas de funciones para implementar un procedimiento.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="fuentes">Fuentes&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://dev.to/techgirl1908/why-is-map-called-map-2l03">Why is map called map?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/fantasyland/fantasy-land">Fantasy land&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/fantasyland/static-land">Static land&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/thefrontside/funcadelic.js">funcadelic.js&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/">How to deal with dirty side effects in your pure functional JavaScript&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jrsinclair.com/articles/2020/whats-more-fantastic-than-fantasy-land-static-land/">What’s more fantastic than fantasy land? An Introduction to Static land&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@lettier/your-easy-guide-to-monads-applicatives-functors-862048d61610">Your easy guide to Monads, Applicatives, &amp;amp; Functors&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Cómo combinar efectos y funciones puras en javascript</title><pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/dealing-with-side-effects-and-pure-functions/</link><guid>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/dealing-with-side-effects-and-pure-functions/</guid><description>&lt;p>¿Alguna vez han escuchado el término &amp;quot;función pura&amp;quot;? ¿Y &amp;quot;efecto secundario&amp;quot;? Si la respuesta es sí entonces probablemente les han dicho que los efectos secundarios son malos y deben evitarlos a toda costa. Este es el problema, si están usando javascript es muy probable que quieran causar esos efectos (especialmente si les pagan por usar javascript) Entonces la solución no es evitar estos efectos sino controlarlos. Voy a mostrarles algunas maneras en las que pueden combinar los efectos secundarios y las funciones puras.&lt;/p>
&lt;p>Antes de empezar vamos a repasar algunos conceptos, para que todos estén al tanto.&lt;/p>
&lt;h2 id="conceptos">Conceptos&lt;/h2>
&lt;h3 id="funcion-pura">Función pura&lt;/h3>
&lt;p>Para no extenderme mucho diré que una función pura es aquella cuyo resultado es determinado por sus parámetros y no tiene ningún efecto observable fuera de su ámbito. El mejor beneficio que proveen es la predictibilidad, dado un conjunto de valores de entrada siempre devolverán el mismo resultado. Veámos algunos ejemplos.&lt;/p>
&lt;p>Esta es una función pura.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">increment&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">number&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">number &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Esta no.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#fac863;">Math&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">random&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;/pre>
&lt;p>Y estas son debatibles.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">A_CONSTANT &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">increment&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">number&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">number &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#cccece;">A_CONSTANT&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#fac863;">module&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#fac863;">exports &lt;/span>&lt;span style="color:#5fb3b3;">={
&lt;/span>&lt;span style="color:#cccece;">increment
&lt;/span>&lt;span style="color:#5fb3b3;">};
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">a_constant&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">increment&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">number&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">number &lt;/span>&lt;span style="color:#5fb3b3;">+ &lt;/span>&lt;span style="color:#6699cc;">a_constant&lt;/span>&lt;span style="color:#5fb3b3;">();
}
&lt;/span>&lt;/pre>&lt;h3 id="efecto-secundario">Efecto secundario&lt;/h3>
&lt;p>Llamaremos efecto secundario a cualquier cosa que afecte la &amp;quot;pureza&amp;quot; de una función. La lista incluye pero no está limitada a:&lt;/p>
&lt;ul>
&lt;li>Cambiar (mutar) una variable externa en cualquier forma posible.&lt;/li>
&lt;li>Mostrar cosas en la pantalla.&lt;/li>
&lt;li>Modificar un archivo.&lt;/li>
&lt;li>Hacer una petición http.&lt;/li>
&lt;li>Crear un proceso.&lt;/li>
&lt;li>Guardar datos en una base de datos.&lt;/li>
&lt;li>Ejecutar funciones con efectos secundarios.&lt;/li>
&lt;li>Cambiar el DOM.&lt;/li>
&lt;li>Aleatoriedad.&lt;/li>
&lt;/ul>
&lt;p>Entonces, cualquier cosa que afecte el &amp;quot;estado del mundo exterior&amp;quot; es un efecto secundario.&lt;/p>
&lt;h2 id="como-combinamos-esas-cosas">¿Cómo combinamos esas cosas?&lt;/h2>
&lt;p>Apuesto a que todavía están pensando en esa lista de efectos, incluye básicamente todo lo que hace que javascript sea útil y aún así hay personas que dicen debes evitarlos cómo sea. No tengan miedo, yo les tengo algunas sugerencias.&lt;/p>
&lt;h3 id="composicion-de-funciones">Composición de funciones&lt;/h3>
&lt;p>Otra forma de describir lo que voy decir sería esta: separación de responsabilidades. Este es la manera más simple. Si tienen la oportunidad de separar un cálculo/transformación de un efecto entonces trasladen esa transformación a una función y usen el resultado en el bloque que contiene el efecto.&lt;/p>
&lt;p>En ocasiones puede ser tan simple como este caso.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">some_process&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">data &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">get_data_somehow&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">clean_data &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">computation&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">save&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">clean_data&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Ahora bien, &lt;code>some_process&lt;/code> sigue siendo una función impura pero eso está bien, esto es javascript, no necesitamos que todo sea puro, lo que queremos es mantener la cordura. Al separar los efectos de un cálculo puro hemos creados tres funciones independientes que resuelven un problema a la vez. Pueden incluso ir más allá y utilizar una función como &lt;a href="https://ramdajs.com/docs/#pipe">pipe&lt;/a> para eliminar esos valores intermedios y crear una composición más directa.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">some_process &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">get_data_somehow&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">computation&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">save&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Pero ahora hemos creado otro problema, ¿Qué pasa si queremos insertar un efecto en medio de esa cadena? ¿Qué hacemos? Bueno, si una función nos metió en este problema yo digo que usemos otra para salir. Esto servirá.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">tap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return function &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">arg&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">;
}
}
&lt;/span>&lt;/pre>
&lt;p>Esta función nos permitirá colocar un efecto en nuestra cadena sin afectar la composición.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">some_process &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">pipe&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#cccece;">get_data_somehow&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">tap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">computation&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">tap&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">a_side_effect&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">save
&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Algunos dirán que este tipo de cosas hacen que la lógica de la función esté esparcida por todos lados y ahora tienen que buscar más de lo necesario para saber qué hace la función. A mí no me molesta mucho, es asunto de preferencias. Suficiente de eso, hablemos de los argumentos de la función &lt;code>tap&lt;/code>, mirénlo &lt;code>tap(fn)&lt;/code> acepta una función cómo parámetro, vamos a ver cómo podemos usar eso para otras cosas.&lt;/p>
&lt;h3 id="haz-que-otro-se-encargue-del-problema">Haz que otro se encargue del problema&lt;/h3>
&lt;p>Como todos sabemos la vida no siempre es tan simple, habrá ocasiones en las que simplemente no podemos hacer esa bonita cadena de funciones. A veces necesitamos colocar un efecto en medio de un proceso y cuando eso pasa siempre podemos hacer trampa. Javascript nos permite usar las funciones como si fuera un valor cómun (como un número) y esto nos da la oportunidad de hacer algo gracioso como usar una función como parámetro de otra función (lo que llaman callback). De esta forma una función &amp;quot;pura&amp;quot; puede mantener su predictibilidad y al mismo tiempo proveer la flexibilidad de ejecutar un efecto cuando sea conveniente. &lt;/p>
&lt;p>Digamos por ejemplo que tenemos una función que ya es pura que transforma los valores de una colección pero por alguna razón ahora necesitamos escribir en un log el valor original y el nuevo pero justo después de la transformación. Lo que podemos hacer es añadir una función como parámetro y llamarla en el momento justo.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">transform&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">onchange&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Array&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">isArray&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">) ? [] : {};
&lt;/span>&lt;span style="color:#c594c5;">for&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">key &lt;/span>&lt;span style="color:#5fb3b3;">in &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">] = &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">] + &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#6699cc;">onchange&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">], &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">]);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Esto técnicamente cumple los requisitos de una función pura, el resultado (y comportamiento) de la función está determinado por sus parámetros, sólo que da la casualidad que uno de esos parámetros es una función que puede tener un efecto secundario. De nuevo, la meta no es pelear contra la naturaleza de javascript hacer que todo sea 100% puro, lo que queremos es controlar estos efectos, en este caso quien controla si se debe tener un efecto es quien llama a nuestra función y provee los parámetros. Un beneficio extra que tenemos de esto es que podemos reusar la función en pruebas unitarias sin tener que instalar una librería extra, lo único que tenemos que hacer suministrar parámetros y evaluar el resultado.&lt;/p>
&lt;p>Tal vez se estén preguntando por qué pongo el callback como primer parámetro, es cuestión de preferencia. Si ponen el valor que cambia con más frecuencia en la última posición se les hace más fácil aplicar parcialmente los argumentos, con esto me refiero a vincular parámetros a una función sin ejecutarla. Pueden por ejemplo usar &lt;code>transform.bind&lt;/code> para crear una función especializada que ya tenga el valor &lt;code>onchange&lt;/code> y que sólo espere el argumento &lt;code>data&lt;/code>.&lt;/p>
&lt;h3 id="efecto-tardio">Efecto tardío&lt;/h3>
&lt;p>La idea aquí es retrasar lo inevitable. En lugar de ejecutar un efecto en seguida lo que queremos hacer es darle la oportunidad a quien usa nuestra función de decidir cuándo se debe ejecutar el efecto. Podemos hacer de varias maneras.&lt;/p>
&lt;h4 id="devolviendo-funciones">Devolviendo funciones&lt;/h4>
&lt;p>Como mencioné antes, en javascript podemos tratar a las funciones como un valor y una cosa que hacemos con frecuencia es devolver valores de funciones. Estoy hablando de funciones que devuelven funciones, ya vimos lo útil que puede ser y no es tan inusual si lo piensan bien, ¿Cuántas veces han visto algo como esto? &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Stuff&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">thing&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// preparar datos
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">some_method&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#5f6364;">// código...
&lt;/span>&lt;span style="color:#5fb3b3;">},
&lt;/span>&lt;span style="color:#6699cc;">other&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#5f6364;">// código...
&lt;/span>&lt;span style="color:#5fb3b3;">}
}
}
&lt;/span>&lt;/pre>
&lt;p>Esto es una especie de constructor. Antes, en la era del ES5 esta era una de las maneras en las que se podía imitar el comportamiento de una clase. Es una función normal que devuelve un objeto, y como todos sabemos los objetos pueden tener métodos. Lo que queremos hacer es muy parecido, queremos convertir un bloque que contiene un efecto y devolverlo.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">some_process&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">config&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">/*
* Hacemos algo con `config`
*/
&lt;/span>&lt;span style="color:#c594c5;">return function &lt;/span>&lt;span style="color:#6699cc;">_effect&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#5f6364;">/*
* aquí podemos tener cualquier cosa
*/
&lt;/span>&lt;span style="color:#5fb3b3;">}
}
&lt;/span>&lt;/pre>
&lt;p>Así es como le damos la oportunidad a quien llama nuestra función de usar el efecto cuando quieran, y pueden incluso pasarlo a otras funciones o usarla en una cadena (como la que hicimos antes). Este patrón no es muy común, tal vez es porque podemos usar otros métodos para lograr la misma meta.&lt;/p>
&lt;h4 id="usando-estructuras">Usando estructuras&lt;/h4>
&lt;p>Otra forma de retrasar un efecto es envolverlo en una estructura. Lo que queremos hacer es tratar un efecto como un valor cualquiera, tener la habilidad de manipularlo e incluso combinarlo con otros efectos de una manera &amp;quot;segura,&amp;quot; es decir sin ejecutarlos. Probablemente ya han visto este patrón antes, un ejemplo que puedo dar es con lo que llaman &amp;quot;Observables.&amp;quot; Vean este ejemplo que utiliza rxjs.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// extraído de:
// https://www.learnrxjs.io/operators/creation/create.html
/*
Incrementa el valor cada segundo, emite valores de los números pares
*/
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">evenNumbers &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#fac863;">Observable&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">create&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">observer&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">interval &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">setInterval&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value &lt;/span>&lt;span style="color:#5fb3b3;">% &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">observer&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">next&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">++;
}, &lt;/span>&lt;span style="color:#f99157;">1000&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">clearInterval&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">interval&lt;/span>&lt;span style="color:#5fb3b3;">);
});
&lt;/span>&lt;/pre>
&lt;p>El resultado de &lt;code>Observable.create&lt;/code> no sólo retrasa la ejecución de &lt;code>setInterval&lt;/code> sino que también nos da la oportunidad de usar &lt;code>evenNumber.pipe&lt;/code> para crear una cadena de observables que también pueden contener otros efectos. Claro que los Observables y rxjs no son la única manera, nosotros podemos crear nuestro propia estructura para los efectos. Si queremos crear nuestros propios efectos lo único que necesitamos es una función para ejecutarlos y otra para combinarlos.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Effect&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">effect&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">run&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#f99157;">args&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">effect&lt;/span>&lt;span style="color:#5fb3b3;">(...&lt;/span>&lt;span style="color:#cccece;">args&lt;/span>&lt;span style="color:#5fb3b3;">);
},
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Effect&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">effect&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">)));
}
};
}
&lt;/span>&lt;/pre>
&lt;p>Puede que no sea mucho pero esto es suficiente para tener algo útil. Con esto ya pueden empezar a combinar efectos sin causar cambios en su ambiente. Por ejemplo.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">persist &lt;/span>&lt;span style="color:#5fb3b3;">= (&lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(`&lt;/span>&lt;span style="color:#99c794;">guardando &lt;/span>&lt;span style="color:#5fb3b3;">${&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">}&lt;/span>&lt;span style="color:#99c794;"> en la base de datos...&lt;/span>&lt;span style="color:#5fb3b3;">`);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">? &lt;/span>&lt;span style="color:#f99157;">true &lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">;
};
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">show_message &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">result &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">result
&lt;/span>&lt;span style="color:#5fb3b3;">? &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">todo bien&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)
: &lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">no estamos bien&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">save &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Effect&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">persist&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">show_message&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#cccece;">save&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">run&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">algo&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// guardando algo en la base de datos...
// todo bien
&lt;/span>&lt;span style="color:#cccece;">save&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">run&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&amp;#39;);
&lt;/span>&lt;span style="color:#5f6364;">// guardando en la base de datos....
// no estamos bien
&lt;/span>&lt;/pre>
&lt;p>Si alguna vez han usado &lt;code>Array.map&lt;/code> para transformar datos de un arreglo se sentirán como en casa usando &lt;code>Effect&lt;/code>, todo lo que tienen que hacer es suministrar los efectos y al final de la cadena tendrán una función que sabrá qué hacer cuando estén listos para ejecutarla.&lt;/p>
&lt;p>Esta es sólo una muestra de lo que pueden hacer con &lt;code>Effect&lt;/code>, si quieren aprender un poco más busquen por ahí el término &lt;code>functor&lt;/code> y &lt;code>IO monad&lt;/code>, ahí tienen diversión para un buen rato.&lt;/p>
&lt;h2 id="ahora-que">¿Ahora qué?&lt;/h2>
&lt;p>Ahora espero que puedan echarle un vistazo al enlace que está al final, es un articulo en inglés que explica con mejor detalle todo esto que yo describí aquí.&lt;/p>
&lt;p>Espero que ahora tengan el conocimiento y la confianza para empezar a escribir funciones puras en su código y poder combinarlas con los efectos prácticos que pueden hacer con javascript.&lt;/p>
&lt;h2 id="fuente">Fuente&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/">How to deal with dirty side effects in your pure functional JavaScript&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Lenses o mejor dicho getters y setters combinables</title><pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/lenses-a-k-a-composable-getters-and-setters/</link><guid>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/lenses-a-k-a-composable-getters-and-setters/</guid><description>&lt;p>Esta vez vamos a descubrir qué son lenses (lentes en inglés), cómo se ven en javascript y espero que al final de todo esto podamos crear una implementación casi adecuada.&lt;/p>
&lt;p>Pero primero vamos a retroceder un poco y vamos a preguntarnos.&lt;/p>
&lt;h2 id="que-son-getter-y-setter">¿Qué son getter y setter?&lt;/h2>
&lt;p>Son funciones que deben cumplir un propósito, extraer o asignar un valor. Pero claro eso no es lo único que pueden hacer. En la mayoría de los casos (que yo he visto) se usan para observar los cambios a una variable y causar algún efecto o para colocar validaciones que impidan algún comportamiento no deseado.&lt;/p>
&lt;p>En javascript pueden ser explícitos.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Some&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">thing &lt;/span>&lt;span style="color:#5fb3b3;">= &amp;#39;&lt;/span>&lt;span style="color:#99c794;">stuff&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">get_thing&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#5f6364;">// puedes hacer lo que sea aquí
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">;
},
&lt;/span>&lt;span style="color:#6699cc;">set_thing&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// igual aquí
&lt;/span>&lt;span style="color:#cccece;">thing &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
}
}
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">obj &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Some&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">get_thing&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;stuff&amp;#39;
&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">set_thing&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">other stuff&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">get_thing&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;other stuff&amp;#39;
&lt;/span>&lt;/pre>
&lt;p>O pueden ser implícitos.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">some &lt;/span>&lt;span style="color:#5fb3b3;">= {};
&lt;/span>&lt;span style="color:#fac863;">Object&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">defineProperty&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">some&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">thing&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, {
&lt;/span>&lt;span style="color:#6699cc;">get&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">thing&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
},
&lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">no pasarás&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;);
}
});
&lt;/span>&lt;span style="color:#cccece;">some&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">thing &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;thing&amp;#39;
&lt;/span>&lt;span style="color:#cccece;">some&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">thing &lt;/span>&lt;span style="color:#5fb3b3;">= &amp;#39;&lt;/span>&lt;span style="color:#99c794;">what?&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#5f6364;">//
// no pasarás
//
&lt;/span>&lt;span style="color:#cccece;">some&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">thing &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;thing&amp;#39;
&lt;/span>&lt;/pre>
&lt;p>¿Pero qué tiene eso de malo que algunas personas sienten la necesidad de usar alternativas como lenses?&lt;/p>
&lt;p>Comencemos con el segundo ejemplo. Puedo decirles a algunas personas no les gustan las cosas mágicas, el sólo hecho de tener una función que se ha estado ejecutando sin su conocimiento es suficiente para evitarlos.&lt;/p>
&lt;p>El primer ejemplo es más interesante. Vamos a verlo otra vez.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">get_thing&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;stuff&amp;#39;
&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">set_thing&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">other stuff&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">get_thing&lt;/span>&lt;span style="color:#5fb3b3;">(); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;other stuff&amp;#39;
&lt;/span>&lt;/pre>
&lt;p>Se ejecuta &lt;code>get_thing&lt;/code> el resultado es &lt;code>stuff&lt;/code>, hasta ahora todo bien. Pero aquí viene el problema, cuando lo usas otra vez y de la misma manera obtienes &lt;code>other stuff&lt;/code>. Tienes que rastrear la última llamada a &lt;code>set_thing&lt;/code> para saber lo que obtendrás. No tienes la capacidad de predicir el resultado de &lt;code>get_thing&lt;/code>, no puedes estar 100% seguro sin mirar (o saber) otras partes del código.&lt;/p>
&lt;h2 id="hay-una-alternativa-mejor">¿Hay una alternativa mejor?&lt;/h2>
&lt;p>No diría mejor. Intentemos crear estos lenses, después pueden decidir si les gusta o no.&lt;/p>
&lt;p>¿Qué necesitamos? Lenses son un concepto que se encuentra en el paradigma de la programación funcional, entonces lo primero que haremos será crear unas funciones auxiliares. Estas serán nuestra primera versión de getter y setter.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// Getter
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">key&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">obj &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">];
}
&lt;/span>&lt;span style="color:#5f6364;">// Setter
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">key&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">Object&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">assign&lt;/span>&lt;span style="color:#5fb3b3;">({}, &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">, {[&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">]: &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">});
}
&lt;/span>&lt;/pre>
&lt;p>Ahora el &amp;quot;constructor.&amp;quot;&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">getter&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">setter&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{ &lt;/span>&lt;span style="color:#cccece;">getter&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">setter &lt;/span>&lt;span style="color:#5fb3b3;">};
}
&lt;/span>&lt;span style="color:#5f6364;">// Eso es todo.
&lt;/span>&lt;/pre>
&lt;p>Notarán que &lt;code>Lens&lt;/code> no hace absolutamente nada, esto es a propósito. Desde ya pueden darse cuenta que la mayor parte del trabajo está en &lt;code>getter&lt;/code> y &lt;code>setter&lt;/code>. El resultado será tan eficiente como lo sean sus implementaciones de &lt;code>getter&lt;/code> y &lt;code>setter&lt;/code>.&lt;/p>
&lt;p>Ahora, para hacer que un &lt;code>lens&lt;/code> haga algo útil crearemos tres funciones.&lt;/p>
&lt;p>&lt;code>view&lt;/code>: Extrae un valor.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">lens&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">getter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>&lt;code>over&lt;/code>: transforma un valor usando un callback.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">lens&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">setter&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">lens&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">getter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#cccece;">obj
&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>&lt;code>set&lt;/code>: reemplaza un valor&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">always&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">val&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// no es genial? Ya estamos reusando funciones
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">always&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>Es momento de crear unas pruebas.&lt;/p>
&lt;p>Digamos que tenemos un objeto llamado &lt;code>alice&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">alice &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">Alice Jones&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;,
&lt;/span>&lt;span style="color:#cccece;">address&lt;/span>&lt;span style="color:#5fb3b3;">: [&amp;#39;&lt;/span>&lt;span style="color:#99c794;">22 Walnut St&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">San Francisco&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">CA&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;],
&lt;/span>&lt;span style="color:#cccece;">pets&lt;/span>&lt;span style="color:#5fb3b3;">: { &lt;/span>&lt;span style="color:#cccece;">dog&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">joker&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;#39;&lt;/span>&lt;span style="color:#99c794;">batman&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39; }
};
&lt;/span>&lt;/pre>
&lt;p>Empecemos con algo simple, vamos a inspeccionar un valor. Tendríamos que hacer esto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)),
&lt;/span>&lt;span style="color:#cccece;">alice
&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;Alice Jones&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>Veo que no están impresionados y eso está bien. Acabo de escribir un montón de cosas sólo para ver un nombre. Pero este es el asunto, todo eso son funciones aisladas. Siempre tenemos la opción de combinarlas y crear nuevas. Empecemos con &lt;code>Lens(prop, assoc)&lt;/code>, vamos usarlo con mucha frecuencia.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">key&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;/pre>
&lt;p>Y ahora...&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;Alice Jones&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>Pueden incluso ir más allá y crear una función que sólo acepte el objeto que contiene los datos.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">get_name &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">obj &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// o con aplicación parcial
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_name &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">view&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;span style="color:#5f6364;">// o usando una dependencia.
// view = curry(view);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">get_name &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;span style="color:#5f6364;">// y lo mismo aplica para `set` y `over`
&lt;/span>&lt;/pre>
&lt;p>Suficiente. Volvamos a nuestras pruebas. Vamos con &lt;code>over&lt;/code>, vamos a transformar el texto a mayúsculas.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">upper &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">str &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">toUpperCase&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">uppercase_alice &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &lt;/span>&lt;span style="color:#cccece;">upper&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// vieron lo que hice?
&lt;/span>&lt;span style="color:#6699cc;">get_name&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">uppercase_alice&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;ALICE JONES&amp;quot;
// por si acaso
&lt;/span>&lt;span style="color:#6699cc;">get_name&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;Alice Jones&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>Es el turno de &lt;code>set&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">alice_smith &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">name&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &amp;#39;&lt;/span>&lt;span style="color:#99c794;">Alice smith&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">get_name&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">alice_smith&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;Alice smith&amp;quot;
// por si acaso
&lt;/span>&lt;span style="color:#6699cc;">get_name&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;Alice Jones&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>Todo muy bonito pero &lt;code>name&lt;/code> es sólo una propiedad, ¿Qué pasa con los objetos anidados o los arreglos? Bueno, es ahí donde nuestra implementación se vuelve algo incómoda. Justo ahora tendríamos que hacer algo así.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">dog &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#f99157;">obj &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">dog&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)(&lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">pets&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#f99157;">obj &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">dog&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)(&lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">pets&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;)(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">))
);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;joker&amp;quot;
// o traemos una dependencia, `compose`
&lt;/span>&lt;span style="color:#cccece;">dog &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">dog&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;), &lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">pets&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;)),
&lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">dog&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;), &lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;quot;&lt;/span>&lt;span style="color:#99c794;">pets&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;))
);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;joker&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>Los escucho. No se preocupen, no los dejaría escribir cosas así. Es por cosas como esta que algunos van y dicen &amp;quot;usa &lt;a href="https://ramdajs.com/">Ramda&lt;/a> y ya&amp;quot; (y tienen razón) ¿Pero qué hace ramda que lo hace tan especial?&lt;/p>
&lt;h2 id="el-toque-especial">El toque especial&lt;/h2>
&lt;p>Si van a la documentación de ramda y buscan &amp;quot;lens&amp;quot; verán que tienen una función llamada &lt;code>lensProp&lt;/code> que basicamente hace lo mismo que &lt;code>Lprop&lt;/code>. Y si van al código fuente verán esto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">lensProp&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">k&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">prop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">k&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#6699cc;">assoc&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">k&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;/pre>
&lt;p>Miren eso. Ahora bien, los comentarios en el código y la documentación sugieren que trabaja con una sola propiedad. Volvamos a nuestra búsqueda en su documentación. Ahora prestemos atención a esa curiosa función llamada &lt;code>lensPath&lt;/code>. Parece que hace exactamente lo que queremos. Una vez más vemos el código fuente y ¿qué vemos?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">lensPath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">p&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">p&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">p&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;span style="color:#5f6364;">// Bienvenidos al paradigma funcional
&lt;/span>&lt;/pre>
&lt;p>El secreto está en otras funciones que no tienen ningún vinculo específico con &lt;code>lenses&lt;/code>. ¿No es genial?&lt;/p>
&lt;p>¿Qué hay en esa función &lt;code>path&lt;/code>? Vamos a revisar. Voy a mostrarles una versión ligeramente diferente, pero el comportamiento es el mismo. &lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">keys&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// esto es para imitar la dependencia `curry`
// esto es lo que pasa
// retornan una función que recuerda `keys`
// y espera el argumento `obj`
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">this&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">idx &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">while &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">idx &lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt; &lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// no nos agrada null
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">== &lt;/span>&lt;span style="color:#f99157;">null&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#5f6364;">// así obtenemos los objetos anidados
&lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">idx&lt;/span>&lt;span style="color:#5fb3b3;">]];
&lt;/span>&lt;span style="color:#cccece;">idx &lt;/span>&lt;span style="color:#5fb3b3;">+= &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Haré lo mismo con &lt;code>assocPath&lt;/code>. En este caso en ramda usan algunas funciones internas pero en esencia esto es lo que pasa.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">path&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// otra vez esto
// por eso tienen la función `curry`
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">this&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">);
} &lt;/span>&lt;span style="color:#c594c5;">else if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">arguments&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">2&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">bind&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#ec5f67;">this&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#5f6364;">// revisamos si está vacío
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">path&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">index &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">path&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#5f6364;">// Cuidado: recursividad adelante
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">path&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">length &lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt; &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">is_empty &lt;/span>&lt;span style="color:#5fb3b3;">=
typeof &lt;/span>&lt;span style="color:#cccece;">obj &lt;/span>&lt;span style="color:#5fb3b3;">!== &amp;#39;&lt;/span>&lt;span style="color:#99c794;">object&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39; || &lt;/span>&lt;span style="color:#cccece;">obj &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">null &lt;/span>&lt;span style="color:#5fb3b3;">|| !&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">hasOwnProperty&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">index&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// si el objeto actual está &amp;quot;vacío&amp;quot;
// tenemos que crear otro
// de lo contrario usamos el valor en `index`
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">next &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">is_empty
&lt;/span>&lt;span style="color:#5fb3b3;">? typeof &lt;/span>&lt;span style="color:#cccece;">path&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">] === &amp;#39;&lt;/span>&lt;span style="color:#99c794;">number&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;
? []
: {}
: &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">index&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#5f6364;">// empecemos otra vez
// pero ahora con un `path` reducido
// y `next` es el nuevo `obj`
&lt;/span>&lt;span style="color:#cccece;">value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Array&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">prototype&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">slice&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">call&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">next&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#5f6364;">// el caso base
// o copiamos un arreglo o un objeto
&lt;/span>&lt;span style="color:#c594c5;">if &lt;/span>&lt;span style="color:#5fb3b3;">(typeof &lt;/span>&lt;span style="color:#cccece;">index &lt;/span>&lt;span style="color:#5fb3b3;">=== &amp;#39;&lt;/span>&lt;span style="color:#99c794;">number&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39; &amp;amp;&amp;amp; &lt;/span>&lt;span style="color:#fac863;">Array&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">isArray&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">)) {
&lt;/span>&lt;span style="color:#5f6364;">// &amp;#39;copiamos&amp;#39; el arreglo
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">arr &lt;/span>&lt;span style="color:#5fb3b3;">= [].&lt;/span>&lt;span style="color:#6699cc;">concat&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#cccece;">arr&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">index&lt;/span>&lt;span style="color:#5fb3b3;">] = &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">arr&lt;/span>&lt;span style="color:#5fb3b3;">;
} &lt;/span>&lt;span style="color:#c594c5;">else &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#5f6364;">// una copia como las de antes
&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= {};
&lt;/span>&lt;span style="color:#c594c5;">for &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#c594c5;">var &lt;/span>&lt;span style="color:#cccece;">p &lt;/span>&lt;span style="color:#5fb3b3;">in &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">p&lt;/span>&lt;span style="color:#5fb3b3;">] = &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">p&lt;/span>&lt;span style="color:#5fb3b3;">];
}
&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">index&lt;/span>&lt;span style="color:#5fb3b3;">] = &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">;
}
}
&lt;/span>&lt;/pre>
&lt;p>Con nuestro nuevo conocimiento podemos crear &lt;code>Lpath&lt;/code> y mejorar &lt;code>Lprop&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lpath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">keys&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">key&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">]), &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">]));
}
&lt;/span>&lt;/pre>
&lt;p>Ahora podemos hacer otras cosas, como manipular la propiedad &lt;code>pets&lt;/code> de &lt;code>alice&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">dog_lens &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Lpath&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">pets&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">dog&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;joker&amp;#39;
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">new_alice &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">upper&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">new_alice&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;JOKER&amp;#39;
&lt;/span>&lt;span style="color:#cccece;">new_alice &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">Joker&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dog_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">new_alice&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;#39;Joker&amp;#39;
&lt;/span>&lt;/pre>
&lt;p>Todo funciona de maravilla pero hay un pequeño detalle, nuestro constructor &lt;code>Lens&lt;/code> no produce &amp;quot;instancias&amp;quot; combinables. Imaginen que tenemos lenses en varios lugares y queremos combinarlos de la siguiente manera.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">pet_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">imaginary_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Eso no funcionaría porque &lt;code>compose&lt;/code> espera una lista de funciones y lo que tenemos ahora son objetos. Pero podemos cambiar eso (de una forma muy curiosa) con algunos trucos propios de la programación funcional. &lt;/p>
&lt;p>Empecemos con el constructor. En lugar de devolver un objeto vamos retornar una función, una que reciba &amp;quot;por partes&amp;quot; un callback, un objeto y que devuelva un &lt;strong>Functor&lt;/strong> (eso es una cosa que tiene un método &lt;code>map&lt;/code> que sigue &lt;a href="https://github.com/fantasyland/fantasy-land#functor">estas reglas&lt;/a>)&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">getter&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">setter&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#f99157;">obj &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">apply &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">focus &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">setter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">focus&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">functor &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">getter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">functor&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">apply&lt;/span>&lt;span style="color:#5fb3b3;">);
};
}
&lt;/span>&lt;/pre>
&lt;p>¿Y eso de &lt;code>fn =&amp;gt; obj =&amp;gt; &lt;/code>qué? Eso nos va ayudar con el problema que tenemos con &lt;code>compose&lt;/code>. Después de que le proporcionas &lt;code>getter&lt;/code> y &lt;code>setter&lt;/code> te devuelve una función que es compatible con &lt;code>compose&lt;/code>.&lt;/p>
&lt;p>¿Y &lt;code>functor.map&lt;/code>? Eso es para asegurarnos que podamos usar un lens como una unidad (como &lt;code>Lprop('pets')&lt;/code>) y también como parte de una cadena usando &lt;code>compose&lt;/code>.&lt;/p>
&lt;p>En caso de que se pregunten qué diferencia hay con lo que hace ramda, ellos usan su propia implementación de la función &lt;code>map&lt;/code>.&lt;/p>
&lt;p>Ahora modificamos &lt;code>view&lt;/code> y &lt;code>over&lt;/code>. Empezando con &lt;code>view&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">constant &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">constant&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">) });
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">constant&lt;/span>&lt;span style="color:#5fb3b3;">)(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Esa función &lt;code>constant&lt;/code> puede que parezca innecariamente compleja pero tiene su propósito. Las cosas se pueden enredar mucho cuando usas &lt;code>compose&lt;/code>, esa estructura se asegura que el valor que queremos se mantenga intacto.&lt;/p>
&lt;p>¿Y &lt;code>over&lt;/code>? Es casi igual, excepto que en ese caso sí utilizamos la función &lt;code>setter&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">identity &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">setter &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">identity&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">setter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)) });
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">apply &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">identity&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">apply&lt;/span>&lt;span style="color:#5fb3b3;">)(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>Y ahora deberíamos tener una implementación casi adecuada. Esto es lo que tenemos sin contar las dependencias (&lt;code>path&lt;/code> and &lt;code>assocPath&lt;/code>).&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">getter&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">setter&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">fn &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#f99157;">obj &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">apply &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">focus &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">setter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">focus&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">functor &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">getter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">functor&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">apply&lt;/span>&lt;span style="color:#5fb3b3;">);
};
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">constant &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">constant&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">) });
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">constant&lt;/span>&lt;span style="color:#5fb3b3;">)(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">fn&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">identity &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">({ &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">setter &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">identity&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">setter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)) });
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">apply &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">identity&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fn&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">apply&lt;/span>&lt;span style="color:#5fb3b3;">)(&lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">val&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">obj&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">always&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">obj&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">key&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">]), &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">([&lt;/span>&lt;span style="color:#cccece;">key&lt;/span>&lt;span style="color:#5fb3b3;">]));
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Lpath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">keys&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Lens&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">path&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#6699cc;">assocPath&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">keys&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">always&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;/pre>
&lt;p>¿Me creerían si les digo que funciona? No deberían. Hagamos unas pruebas. Volvamos con &lt;code>alice&lt;/code> y vamos añadirle otro objeto, &lt;code>calie&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">alice &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Alice Jones&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">address&lt;/span>&lt;span style="color:#5fb3b3;">: [&amp;quot;&lt;/span>&lt;span style="color:#99c794;">22 Walnut St&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">San Francisco&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">CA&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;],
&lt;/span>&lt;span style="color:#cccece;">pets&lt;/span>&lt;span style="color:#5fb3b3;">: { &lt;/span>&lt;span style="color:#cccece;">dog&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">joker&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">batman&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &lt;/span>&lt;span style="color:#cccece;">imaginary&lt;/span>&lt;span style="color:#5fb3b3;">: { &lt;/span>&lt;span style="color:#cccece;">dragon&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">harley&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; } }
};
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">calie &lt;/span>&lt;span style="color:#5fb3b3;">= {
&lt;/span>&lt;span style="color:#cccece;">name&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">calie Jones&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;,
&lt;/span>&lt;span style="color:#cccece;">address&lt;/span>&lt;span style="color:#5fb3b3;">: [&amp;quot;&lt;/span>&lt;span style="color:#99c794;">22 Walnut St&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">San Francisco&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">CA&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;],
&lt;/span>&lt;span style="color:#cccece;">pets&lt;/span>&lt;span style="color:#5fb3b3;">: { &lt;/span>&lt;span style="color:#cccece;">dog&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">riddler&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &lt;/span>&lt;span style="color:#cccece;">cat&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">ivy&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &lt;/span>&lt;span style="color:#cccece;">imaginary&lt;/span>&lt;span style="color:#5fb3b3;">: { &lt;/span>&lt;span style="color:#cccece;">dragon&lt;/span>&lt;span style="color:#5fb3b3;">: &amp;quot;&lt;/span>&lt;span style="color:#99c794;">hush&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; } },
&lt;/span>&lt;span style="color:#cccece;">friend&lt;/span>&lt;span style="color:#5fb3b3;">: [&lt;/span>&lt;span style="color:#cccece;">alice&lt;/span>&lt;span style="color:#5fb3b3;">]
};
&lt;/span>&lt;/pre>
&lt;p>Y porque teniamos todo planeado desde antes, ya tenemos unos lenses disponibles.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// uno genérico
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">head_lens &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// otros específicos
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">bff_lens &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">friend&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;), &lt;/span>&lt;span style="color:#cccece;">head_lens&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">imaginary_lens &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Lpath&lt;/span>&lt;span style="color:#5fb3b3;">([&amp;#39;&lt;/span>&lt;span style="color:#99c794;">pets&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">imaginary&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;]);
&lt;/span>&lt;/pre>
&lt;p>Supongamos que queremos manipular la propiedad &lt;code>dragon&lt;/code> de cada una, todo lo que tenemos que hacer es combinar.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">dragon_lens &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">imaginary_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">Lprop&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">dragon&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;));
&lt;/span>&lt;span style="color:#5f6364;">// sólo porque sí
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">bff_dragon_lens &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">compose&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">bff_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// demo
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">upper &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">str &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">toUpperCase&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#5f6364;">// view
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">calie&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;hush&amp;quot;
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">bff_dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">calie&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;harley&amp;quot;
// over
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">new_calie &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">upper&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">calie&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">new_calie&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;HUSH&amp;quot;
&lt;/span>&lt;span style="color:#cccece;">new_calie &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">over&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">bff_dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">upper&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">calie&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">bff_dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">new_calie&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;HARLEY&amp;quot;
// set
&lt;/span>&lt;span style="color:#cccece;">new_calie &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">fluffykins&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">calie&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">new_calie&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;fluffykins&amp;quot;
&lt;/span>&lt;span style="color:#cccece;">new_calie &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">set&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">bff_dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &amp;#39;&lt;/span>&lt;span style="color:#99c794;">pumpkin&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#cccece;">calie&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#6699cc;">view&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">bff_dragon_lens&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">new_calie&lt;/span>&lt;span style="color:#5fb3b3;">); &lt;/span>&lt;span style="color:#5f6364;">// =&amp;gt; &amp;quot;pumpkin&amp;quot;
&lt;/span>&lt;/pre>
&lt;p>Así que acabamos de manipular un objeto anidado en varios niveles combinando lenses. Resolvimos un problema combinando funciones. Si no les parece genial no sé qué más decirles. &lt;/p>
&lt;p>Estas cosas son difíciles de vender porque requieren de un estilo particular para poder aprovecharlos al máximo. Y para los que usan javascript, probablemente existe una librería que resuelve el mismo problema pero de una manera más conveniente o por lo menos que se ajuste a su estilo.&lt;/p>
&lt;p>En fin, si aún están interesado en cómo funcionarían estos lenses en un contexto más complejo revisen &lt;a href="https://github.com/kwasniew/hyperapp-realworld-example-app">este repositorio&lt;/a>, es un &lt;a href="https://github.com/gothinkster/realworld">ejemplo de &amp;quot;real world app&amp;quot;&lt;/a> (algo así como un clon de medium.com) usa hyperapp para manejar la interfaz. El autor quiso usar lenses para manejar el estado de la aplicación.&lt;/p>
&lt;h2 id="fuentes">Fuentes&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://ramdajs.com/docs/">ramda - docs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/branneman/f06bd451f74e5bc1725db23be682d4fe">fp-lenses.js&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=IoVaArsh6tM">Lambda World 2018 - Functional Lenses in JavaScript (video)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Un poco del paradigma funcional en tu javascript: Usando un Maybe</title><pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate><link>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/using-a-maybe/</link><guid>https://vonheikemen.github.io/devlog/es/web-development/learn-fp/using-a-maybe/</guid><description>&lt;p>¿Alguna vez han escuchado de las estructuras llamadas &amp;quot;monads&amp;quot; y lo geniales que son? Tal vez sí, pero aún no las entienden completamente. Bueno... aquí no intentaré definirlas y tampoco les diré si son geniales o no, lo que haré es mostrarles un ejemplo de cómo sería si las usaran en sus javascripts (específicamente el monad &lt;code>Maybe&lt;/code>).&lt;/p>
&lt;p>Haremos algo gracioso, resolveremos un problema trivial usando métodos innecesariamente complicados.&lt;/p>
&lt;p>Supongamos que tenemos un diccionario guardado en un archivo .json o en un objeto plano en nuestro script.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">{
&amp;quot;&lt;/span>&lt;span style="color:#99c794;">accident&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#cccece;">: &lt;/span>&lt;span style="color:#5fb3b3;">[&amp;quot;&lt;/span>&lt;span style="color:#99c794;">An unexpected, unfortunate mishap, failure or loss with the potential for harming human life, property or the environment.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">An event that happens suddenly or by chance without an apparent cause.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;],
&amp;quot;&lt;/span>&lt;span style="color:#99c794;">accumulator&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#cccece;">: &lt;/span>&lt;span style="color:#5fb3b3;">[&amp;quot;&lt;/span>&lt;span style="color:#99c794;">A rechargeable device for storing electrical energy in the form of chemical energy, consisting of one or more separate secondary cells.&lt;/span>&lt;span style="color:#5fb3b3;">\\&lt;/span>&lt;span style="color:#99c794;">n(Source: CED)&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;],
&amp;quot;&lt;/span>&lt;span style="color:#99c794;">acid&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#cccece;">: &lt;/span>&lt;span style="color:#5fb3b3;">[&amp;quot;&lt;/span>&lt;span style="color:#99c794;">A compound capable of transferring a hydrogen ion in solution.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Being harsh or corrosive in tone.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Having an acid, sharp or tangy taste.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">A powerful hallucinogenic drug manufactured from lysergic acid.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;, &amp;quot;&lt;/span>&lt;span style="color:#99c794;">Having a pH less than 7, or being sour, or having the strength to neutralize alkalis, or turning a litmus paper red.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;],
&lt;/span>&lt;span style="color:#5f6364;">// ... más palabras y significados
&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#99c794;">Paris&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&lt;/span>&lt;span style="color:#cccece;">: &lt;/span>&lt;span style="color:#5fb3b3;">[&amp;quot;&lt;/span>&lt;span style="color:#99c794;">The capital and largest city of France.&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;]
}
&lt;/span>&lt;/pre>
&lt;p>Queremos crear un formulario que le permita a un usuario buscar uno de estos términos y luego muestre su signicado. Parece simple ¿Qué podría salir mal?&lt;/p>
&lt;p>Y porque todo el mundo adora HTML empezaremos por ahí.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">form &lt;/span>&lt;span style="color:#bb80b3;">id&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">search_form&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">label &lt;/span>&lt;span style="color:#bb80b3;">for&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">search_input&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&lt;/span>&lt;span style="color:#cccece;">Search a word&lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">label&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">input &lt;/span>&lt;span style="color:#bb80b3;">id&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">search_input&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot; &lt;/span>&lt;span style="color:#bb80b3;">type&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">text&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">button &lt;/span>&lt;span style="color:#bb80b3;">type&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">submit&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&lt;/span>&lt;span style="color:#cccece;">Submit&lt;/span>&lt;span style="color:#5fb3b3;">&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">button&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">form&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="color:#eb606b;">div &lt;/span>&lt;span style="color:#bb80b3;">id&lt;/span>&lt;span style="color:#5fb3b3;">=&amp;quot;&lt;/span>&lt;span style="color:#99c794;">result&lt;/span>&lt;span style="color:#5fb3b3;">&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="color:#eb606b;">div&lt;/span>&lt;span style="color:#5fb3b3;">&amp;gt;
&lt;/span>&lt;/pre>
&lt;p>En nuestro primer intento sólo intentaremos obtener uno de esos valores basado en la consulta del usuario.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
// haz magia y tráeme los datos
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">entries &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">data&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">format&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">results&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">results&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">join&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">&amp;lt;br&amp;gt;&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
}
&lt;/span>&lt;span style="color:#fac863;">window&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">search_form&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">addEventListener&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">submit&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">ev&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">ev&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">preventDefault&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">input &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">ev&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">target&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#fac863;">window&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">innerHTML &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">format&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">entries&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">input&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">]);
});
&lt;/span>&lt;/pre>
&lt;p>Naturalmente lo primero que haremos es probar con acid. Ahora contemplen los resultados.&lt;/p>
&lt;blockquote>
&lt;p>A compound capable of transferring a hydrogen ion in solution.
Being harsh or corrosive in tone.
Having an acid, sharp or tangy taste.
A powerful hallucinogenic drug manufactured from lysergic acid.
Having a pH less than 7, or being sour, or having the strength to neutralize alkalis, or turning a litmus paper red.&lt;/p>
&lt;/blockquote>
&lt;p>Ahora buscaremos &amp;quot;paris&amp;quot;, estoy seguro que está ahí. ¿Qué obtuvimos? Nada. No exactamente, tenemos.&lt;/p>
&lt;blockquote>
&lt;p>TypeError: results is undefined&lt;/p>
&lt;/blockquote>
&lt;p>Pero tambíen tenemos un botón impredecible que se congela en ocasiones. ¿Pero qué queremos? ¿Qué queremos en realidad? Seguridad, objetos que no hagan estallar nuestra aplicación, queremos objetos confiables.&lt;/p>
&lt;p>Entonces lo que haremos será implementar una especie de contenedor que nos permita describir el flujo de ejecución sin tener que preocuparnos por el valor que este contenga. ¿Suena bien, no? Déjenme mostrarles lo que quiero decir con un poco de javascript. Intenten esto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">is_even &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">num &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">num &lt;/span>&lt;span style="color:#5fb3b3;">% &lt;/span>&lt;span style="color:#f99157;">2 &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">odd_arr &lt;/span>&lt;span style="color:#5fb3b3;">= [&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">3&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">4&lt;/span>&lt;span style="color:#5fb3b3;">,&lt;/span>&lt;span style="color:#f99157;">5&lt;/span>&lt;span style="color:#5fb3b3;">].&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">is_even&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">toString&lt;/span>&lt;span style="color:#5fb3b3;">());
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">empty_arr &lt;/span>&lt;span style="color:#5fb3b3;">= [].&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">is_even&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">toString&lt;/span>&lt;span style="color:#5fb3b3;">());
&lt;/span>&lt;span style="color:#fac863;">console&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">log&lt;/span>&lt;span style="color:#5fb3b3;">({&lt;/span>&lt;span style="color:#cccece;">odd_arr&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">empty_arr&lt;/span>&lt;span style="color:#5fb3b3;">});
&lt;/span>&lt;/pre>
&lt;p>¿Generó un error el arreglo vacío? (si lo hizo díganme). ¿No es genial? ¿No se siente bien saber que los métodos del arreglo harán lo correcto incluso si no tienen nada con qué trabajar? Eso es lo que queremos.&lt;/p>
&lt;p>Tal vez se estén preguntando ¿No puedo simplemente poner un &lt;code>if&lt;/code> y ya? Bueno... sí, ¿pero eso qué tiene de divertido? Todos saben que hacer una cadena de funciones se ve genial, y somos fánaticos de la &amp;quot;programación funcional,&amp;quot; así que haremos lo que los conocedores de ese paradigma harían: &lt;strong>esconderemos todo dentro de una función&lt;/strong>. &lt;/p>
&lt;p>Entonces lo que haremos será esconder un par de &lt;code>if&lt;/code>, si el valor que debemos evaluar es indefinido devolveremos un contenedor que sabrá qué hacer sin importar lo que pase.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// maybe.js
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">the_thing&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">the_thing &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">null
&lt;/span>&lt;span style="color:#5fb3b3;">|| &lt;/span>&lt;span style="color:#cccece;">the_thing &lt;/span>&lt;span style="color:#5fb3b3;">=== &lt;/span>&lt;span style="color:#f99157;">undefined
&lt;/span>&lt;span style="color:#5fb3b3;">|| &lt;/span>&lt;span style="color:#cccece;">the_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">is_nothing
&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">();
}
&lt;/span>&lt;span style="color:#5f6364;">// No queremos estructuras anidadas.
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">the_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">is_just&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">the_thing&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Just&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">the_thing&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>Pero estos contenedores no serán los típicos &lt;code>Maybe&lt;/code> que se ven en un lenguaje propio del paradigma funcional. Nosotros haremos trampa en el nombre de la conveniencia y los efectos secundarios. Sus métodos estaran inspirados por el tipo de dato &lt;code>Option&lt;/code> que tiene Rust. Aquí es donde está la magia.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// maybe.js
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Just&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">thing&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#6699cc;">and_then&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">or_else&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">tap&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">predicate_fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt;
&lt;/span>&lt;span style="color:#6699cc;">predicate_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">)
? &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">)
: &lt;/span>&lt;span style="color:#6699cc;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">(),
&lt;/span>&lt;span style="color:#cccece;">is_just&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">is_nothing&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">inspect&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">`&lt;/span>&lt;span style="color:#99c794;">Just(&lt;/span>&lt;span style="color:#5fb3b3;">${&lt;/span>&lt;span style="color:#cccece;">thing&lt;/span>&lt;span style="color:#5fb3b3;">}&lt;/span>&lt;span style="color:#99c794;">)&lt;/span>&lt;span style="color:#5fb3b3;">`,
};
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">() {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#cccece;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">and_then&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">or_else&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(),
&lt;/span>&lt;span style="color:#cccece;">tap&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">filter&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#cccece;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">is_just&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">is_nothing&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">inspect&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">`&lt;/span>&lt;span style="color:#99c794;">Nothing&lt;/span>&lt;span style="color:#5fb3b3;">`,
};
}
&lt;/span>&lt;/pre>
&lt;p>¿Qué hacen estos métodos?&lt;/p>
&lt;ul>
&lt;li>&lt;code>map&lt;/code>: Aplica la función &lt;code>fun&lt;/code> a &lt;code>the_thing&lt;/code> y vuelve a colocarlo en un &lt;code>Maybe&lt;/code> para mantener la forma del objeto, esto para que podamos encadenar más funciones.&lt;/li>
&lt;li>&lt;code>and_then&lt;/code>: Este sólo está ahí para los casos de emergencia. Aplica la función &lt;code>fun&lt;/code> y que el destino decida el resto.&lt;/li>
&lt;li>&lt;code>or_else&lt;/code>: Este sería el complemento &lt;code>else&lt;/code> para nuestro &lt;code>map&lt;/code> y &lt;code>and_then&lt;/code>. Es el otro camino. El &amp;quot;¿qué pasa si no hay nada ahí?&amp;quot;&lt;/li>
&lt;li>&lt;code>tap&lt;/code>: Está ahí para cuando necesitemos una función que afecta algo que está fuera de su ámbito (o tal vez es sólo para colocar un &lt;code>console.log&lt;/code>).&lt;/li>
&lt;li>&lt;code>filter&lt;/code>: Si la función que proporcionas devuelve &lt;code>true&lt;/code> o algo parecido entonces &amp;quot;te dejará pasar.&amp;quot; &lt;/li>
&lt;li>&lt;code>unwrap_or&lt;/code>: Este es el que saca el valor del contenedor. Usarán esto cuando se cansen de encadenar funciones y estén listos para volver al mundo imperativo.&lt;/li>
&lt;/ul>
&lt;p>Volvamos a nuestro formulario para aplicar todo esto. Crearemos una función &lt;code>search&lt;/code> que puede o no devolvernos un resultado a la consulta del usuario. Si lo hace encadenamos otras funciones que se ejecutarán en un &amp;quot;contexto seguro.&amp;quot;&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">search &lt;/span>&lt;span style="color:#5fb3b3;">= (&lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">input&lt;/span>&lt;span style="color:#5fb3b3;">) &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">input&lt;/span>&lt;span style="color:#5fb3b3;">]);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">search_word &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">word &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">entries&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#cccece;">word&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">format&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">word not found&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;/pre>
&lt;p>Ahora reemplazamos la antigua función.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> window.search_form.addEventListener(&amp;#39;submit&amp;#39;, function(ev) {
ev.preventDefault();
let input = ev.target[0];
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> window.result.innerHTML = format(entries[input.value]);
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> window.result.innerHTML = search_word(input.value);
&lt;/span>&lt;span style="color:#cccece;"> });
&lt;/span>&lt;/pre>
&lt;p>Probemos. Buscaremos &amp;quot;accident.&amp;quot;&lt;/p>
&lt;blockquote>
&lt;p>An unexpected, unfortunate mishap, failure or loss with the potential for harming human life, property or the environment.
An event that happens suddenly or by chance without an apparent cause.&lt;/p>
&lt;/blockquote>
&lt;p>Ahora Paris. Busquemos &amp;quot;paris.&amp;quot;&lt;/p>
&lt;blockquote>
&lt;p>word not found&lt;/p>
&lt;/blockquote>
&lt;p>No congeló el botón, eso es bueno. Pero yo sé que Paris está ahí. Si revisan verán que está &amp;quot;Paris.&amp;quot; Sólo tendremos que colocar en mayúscula la primera letra para que el usuario no tenga que hacerlo. Primero intentaremos buscar la palabra exacta y luego intentamos del otro modo.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">create_search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">exact&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">input &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">word &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">exact &lt;/span>&lt;span style="color:#5fb3b3;">? &lt;/span>&lt;span style="color:#cccece;">input &lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#6699cc;">capitalize&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">input&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">word&lt;/span>&lt;span style="color:#5fb3b3;">]);
}
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">capitalize&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">str&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">charAt&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">toUpperCase&lt;/span>&lt;span style="color:#5fb3b3;">() + &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">slice&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;/pre>
&lt;p>Modificamos la función &lt;code>search&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> const search = (data, input) =&amp;gt; Maybe(data[input]);
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> const search = create_search(entries, true);
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> const search_name = create_search(entries, false);
&lt;/span>&lt;span style="color:#5fb3b3;">-
-&lt;/span>&lt;span style="color:#ec5f67;"> const search_word = word =&amp;gt; search(entries, word)
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> const search_word = word =&amp;gt; search(word)
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> .or_else(() =&amp;gt; search_name(word))
&lt;/span>&lt;span style="color:#cccece;"> .map(format)
.unwrap_or(&amp;#39;word not found&amp;#39;);
&lt;/span>&lt;/pre>
&lt;p>Bien. Esto es lo que tenemos hasta ahora en &lt;code>main.js&lt;/code> si quieren ver todo el panorama.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">entries &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">data&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">create_search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">data&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">exact&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">input &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">word &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">exact &lt;/span>&lt;span style="color:#5fb3b3;">? &lt;/span>&lt;span style="color:#cccece;">input &lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#6699cc;">capitalize&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">input&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">data&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#cccece;">word&lt;/span>&lt;span style="color:#5fb3b3;">]);
}
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">capitalize&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">str&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">charAt&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#6699cc;">toUpperCase&lt;/span>&lt;span style="color:#5fb3b3;">() + &lt;/span>&lt;span style="color:#cccece;">str&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">slice&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">1&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">format&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">results&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">results&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">join&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">&amp;lt;br&amp;gt;&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
}
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">search &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">create_search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">entries&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">search_name &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">create_search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">entries&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">search_word &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">word &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">word&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">or_else&lt;/span>&lt;span style="color:#5fb3b3;">(() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">search_name&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">word&lt;/span>&lt;span style="color:#5fb3b3;">))
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">format&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">word not found&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;);
&lt;/span>&lt;span style="color:#fac863;">window&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">search_form&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">addEventListener&lt;/span>&lt;span style="color:#5fb3b3;">(&amp;#39;&lt;/span>&lt;span style="color:#99c794;">submit&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;, &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">ev&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">ev&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">preventDefault&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">input &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">ev&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">target&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">];
&lt;/span>&lt;span style="color:#fac863;">window&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">innerHTML &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">search_word&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">input&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">);
});
&lt;/span>&lt;/pre>
&lt;p>¿Pero es todo lo que queremos? No, claro que no, también queremos encontrar el amor, pero ya que javascript no puede hacer eso, nos conformaremos con agregar una funcionalidad de &amp;quot;sugerencia.&amp;quot; Quiero que cuando escriba &amp;quot;accu&amp;quot; y presione el botón, que salga un dialogo que me diga &amp;quot;Did you mean accumulator?&amp;quot; (en inglés porque no me pagan lo suficiente para traducir los mensajes del sistema) &lt;/p>
&lt;p>Para esto necesitaremos ayuda, instalaremos una dependencia, una que encuentre resultados similares: &lt;a href="https://github.com/wouter2203/fuzzy-search#readme">fuzzy-search&lt;/a>. Agreguemos lo siguiente.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">import &lt;/span>&lt;span style="color:#cccece;">FuzzySearch &lt;/span>&lt;span style="color:#c594c5;">from &lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;&lt;/span>&lt;span style="color:#99c794;">https://unpkg.com/fuzzy-search@3.0.1/src/FuzzySearch.js&lt;/span>&lt;span style="color:#5fb3b3;">&amp;#39;;
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">fzf &lt;/span>&lt;span style="color:#5fb3b3;">= new &lt;/span>&lt;span style="color:#cccece;">FuzzySearch&lt;/span>&lt;span style="color:#5fb3b3;">(
&lt;/span>&lt;span style="color:#fac863;">Object&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">keys&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">entries&lt;/span>&lt;span style="color:#5fb3b3;">),
[],
{&lt;/span>&lt;span style="color:#6699cc;">caseSensitive&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">, &lt;/span>&lt;span style="color:#6699cc;">sort&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">}
);
&lt;/span>&lt;/pre>
&lt;p>Pero volvemos a la misma situación, esta no sería una operación segura porque en el momento que intentemos sacar un resultado de un arreglo vacío todo se cae. ¿Entonces qué hacemos? Escondemos todo debajo de una función.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">suggest&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">word&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">matches &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">fzf&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">search&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">word&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">matches&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">]);
}
&lt;/span>&lt;/pre>
&lt;p>FuzzySearch está listo, ahora agregaremos un grandioso dialogo de confirmación.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">confirm_word&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">value&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value &lt;/span>&lt;span style="color:#5fb3b3;">&amp;amp;&amp;amp; &lt;/span>&lt;span style="color:#6699cc;">confirm&lt;/span>&lt;span style="color:#5fb3b3;">(`&lt;/span>&lt;span style="color:#99c794;">Did you mean &lt;/span>&lt;span style="color:#5fb3b3;">${&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">}`)) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">;
}
}
&lt;/span>&lt;/pre>
&lt;p>Combinemos las nuevas funciones con &lt;code>search&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// main.js
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">suggest_word &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">() &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">suggest&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">value&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">confirm_word&lt;/span>&lt;span style="color:#5fb3b3;">)
.&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">search&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;/pre>
&lt;p>Agregamos la nueva funcionalidad a &lt;code>search_word&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const search_word = word =&amp;gt; search(word)
.or_else(() =&amp;gt; search_name(word))
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> .or_else(suggest_word(word))
&lt;/span>&lt;span style="color:#cccece;"> .map(format)
.unwrap_or(&amp;#39;word not found&amp;#39;);
&lt;/span>&lt;/pre>
&lt;p>Funciona. Pero ahora digamos que somos alérgicos a los &lt;code>if&lt;/code>, sin mencionar que es de mala educación devolver &lt;code>undefined&lt;/code> de una función. Podemos ser mejores.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> function confirm_word(value) {
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> if(value &amp;amp;&amp;amp; confirm(`Did you mean ${value}`)) {
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> return value;
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> }
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> return confirm(`Did you mean ${value}`);
&lt;/span>&lt;span style="color:#cccece;"> }
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const suggest_word = value =&amp;gt; () =&amp;gt; suggest(value)
&lt;/span>&lt;span style="color:#5fb3b3;">-&lt;/span>&lt;span style="color:#ec5f67;"> .map(confirm_word)
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> .filter(confirm_word)
&lt;/span>&lt;span style="color:#cccece;"> .map(search);
&lt;/span>&lt;/pre>
&lt;p>Algo me molesta. Cuando busco &amp;quot;accu,&amp;quot; el dialogo aparece, confirmo la sugerencia y el resultado aparece. Pero &amp;quot;accu&amp;quot; sigue ahí en el formulario, es incómodo. Haremos el formulario se actualice con la palabra correcta.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">update_input &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#fac863;">window&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">search_form&lt;/span>&lt;span style="color:#5fb3b3;">[&lt;/span>&lt;span style="color:#f99157;">0&lt;/span>&lt;span style="color:#5fb3b3;">].&lt;/span>&lt;span style="color:#f99157;">value &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;/pre>&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> const suggest_word = value =&amp;gt; () =&amp;gt; suggest(value)
.filter(confirm_word)
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> .tap(update_input)
&lt;/span>&lt;span style="color:#cccece;"> .map(search);
&lt;/span>&lt;/pre>
&lt;p>¿Quieren verlo en acción? Aquí tienen.&lt;/p>
&lt;p
class="codepen"
data-height="600"
data-theme-id="dark"
data-default-tab="js,result"
data-user="VonHeikemen"
data-slug-hash="JjjNvLE"
data-preview="true"
style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"
data-pen-title="Maybe I got your word">
&lt;span>
See the Pen &lt;a href="https://codepen.io/VonHeikemen/pen/JjjNvLE">Maybe I got your word&lt;/a> by Heiker (&lt;a href="https://codepen.io/VonHeikemen">@VonHeikemen&lt;/a>) on &lt;a href="https://codepen.io">CodePen&lt;/a>.
&lt;/span>
&lt;/p>
&lt;script async src="https://static.codepen.io/assets/embed/ei.js">&lt;/script>
&lt;h2 id="bonus-track">Bonus track&lt;/h2>
&lt;blockquote>
&lt;p>&lt;em>Advertencia&lt;/em>: El objetivo de todo esto ya fue logrado, que vieran ese ejemplo en codepen. Lo que sigue es un experimento para ver si podía agregar soporte de operaciones asíncronas en la función &lt;code>Maybe&lt;/code>. Si ya están cansados vayan directo al final y vean el último ejemplo.&lt;/p>
&lt;/blockquote>
&lt;p>Ahora quizá estén pensando: muy bonito y todo pero en el &amp;quot;mundo real&amp;quot; hacemos peticiones a servidores, consultamos bases de datos, hacemos todo tipo de cosas asíncronas, ¿puedo usar eso en este contexto? &lt;/p>
&lt;p>Bien. Entiendo. La implementación actual sólo contempla tareas normales. Tendrían que romper la cadena de &lt;code>Maybe&lt;/code>s en el momento que aparezca una promesa (&lt;code>Promise&lt;/code>)&lt;/p>
&lt;p>Podemos crear un nuevo &lt;code>Just&lt;/code> que esté consciente de que contiene una promesa. Es perfectamente posible, ¿un &lt;code>AsyncJust&lt;/code>? ¿&lt;code>JustAsync&lt;/code>? Suena horrible. &lt;/p>
&lt;p>Por si no lo saben, una promesa en javascript (me refiero a una instancia de la clase &lt;code>Promise&lt;/code>) es un tipo de dato que se utiliza para coordinar eventos futuros. Lo hace usando un método llamado &lt;code>then&lt;/code> el cual acepta una función (lo que llaman callback) y también tiene un método &lt;code>catch&lt;/code> para cuando las cosas salen mal. Pero si controlamos lo que va dentro del &lt;code>then&lt;/code> podemos mantener la misma interface del &lt;code>Maybe&lt;/code>.&lt;/p>
&lt;p>¿Qué tan buenos son siguiendo un montón de callbacks?&lt;/p>
&lt;p>Aquí está. Lo llamaré &lt;code>Future&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#5f6364;">// no me juzguen
&lt;/span>&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#6699cc;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">map_future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">))),
&lt;/span>&lt;span style="color:#6699cc;">and_then&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">map_future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">))),
&lt;/span>&lt;span style="color:#6699cc;">or_else&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">catch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">)),
&lt;/span>&lt;span style="color:#6699cc;">tap&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">))),
&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">catch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#6699cc;">filter&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_thing&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">filter_future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">))),
&lt;/span>&lt;span style="color:#cccece;">is_just&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">is_nothing&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">false&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">is_future&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">true&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#6699cc;">inspect&lt;/span>&lt;span style="color:#5fb3b3;">: () &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">`&lt;/span>&lt;span style="color:#99c794;">&amp;lt;Promise&amp;gt;&lt;/span>&lt;span style="color:#5fb3b3;">`
};
}
&lt;/span>&lt;/pre>
&lt;p>Si apartamos todo el ruido tal vez se pueda entender mejor.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;">
&lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#cccece;">map&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">and_then: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">or_else: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">catch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">tap: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">), &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">))&lt;/span>&lt;span style="color:#cccece;">)&lt;/span>&lt;span style="color:#5fb3b3;">,
&lt;/span>&lt;span style="color:#cccece;">unwrap_or: &lt;/span>&lt;span style="color:#f99157;">arg &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">catch&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">arg&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">filter: &lt;/span>&lt;span style="color:#f99157;">fun &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">fun&lt;/span>&lt;span style="color:#5fb3b3;">),
&lt;/span>&lt;span style="color:#cccece;">}
&lt;/span>&lt;/pre>
&lt;ul>
&lt;li>&lt;code>map&lt;/code>/&lt;code>and_then&lt;/code>: estos son iguales porque no puedes escaparte de una promesa.&lt;/li>
&lt;li>&lt;code>or_else&lt;/code>: toma la función proporcionada y la pasa al método &lt;code>catch&lt;/code>, esto para imitar el comportamiento de un &lt;code>else&lt;/code>.&lt;/li>
&lt;li>&lt;code>tap&lt;/code>: usa el método &lt;code>then&lt;/code> para &amp;quot;echarle un vistazo&amp;quot; al valor dentro de la promesa. Este método es conviniente para colocar esas funciones &amp;quot;impuras&amp;quot; que tienen efecto sobre el mundo exterior.&lt;/li>
&lt;li>&lt;code>unwrap_or&lt;/code>: Esto devuelve la promesa para que puedan usar &lt;code>await&lt;/code>. Si todo sale bien obtendrán el valor original de la promesa, sino devolverá el primer parámetro que fue proporcionado.&lt;/li>
&lt;li>&lt;code>filter&lt;/code>: este es un caso especial de &lt;code>map&lt;/code>, es por eso que existe &lt;code>filter_future&lt;/code>. &lt;/li>
&lt;li>Casi todos estos métodos devuelven un nuevo &lt;code>Future&lt;/code> porque &lt;code>promise.then&lt;/code> siempre devuelve una nueva promesa.&lt;/li>
&lt;/ul>
&lt;p>Pero lo que hace que &lt;code>Future&lt;/code> sea raro es lo que pasa dentro de &lt;code>map&lt;/code>. ¿Recuerdan &lt;code>map_future&lt;/code>?&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">map_future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">fun&lt;/span>&lt;span style="color:#5fb3b3;">) { &lt;/span>&lt;span style="color:#5f6364;">// `fun` es el callback proporcionado
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#5f6364;">/* Evaluemos el valor original de la promesa */
&lt;/span>&lt;span style="color:#c594c5;">let &lt;/span>&lt;span style="color:#cccece;">promise_content &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">;
&lt;/span>&lt;span style="color:#5f6364;">// Necesitamos decidir si podemos confiar
// en el valor original
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_content&lt;/span>&lt;span style="color:#5fb3b3;">).&lt;/span>&lt;span style="color:#cccece;">is_nothing&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">reject&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#c594c5;">return&lt;/span>&lt;span style="color:#5fb3b3;">;
}
&lt;/span>&lt;span style="color:#5f6364;">// Si es un Just obtenemos su contenido
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_content&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">is_just&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#cccece;">promise_content &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">();
}
&lt;/span>&lt;span style="color:#5f6364;">/* Evaluemos el valor que devuelve el callback */
// Usaremos Maybe otra vez
// porque tengo problemas de confianza.
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">Maybe&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#6699cc;">fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">promise_content&lt;/span>&lt;span style="color:#5fb3b3;">));
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">is_just&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// Si llegamos hasta aquí todo está bien.
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">unwrap_or&lt;/span>&lt;span style="color:#5fb3b3;">();
}
&lt;/span>&lt;span style="color:#5f6364;">// en este punto debería revisar si result
// tiene un Future pero de ser así
// lo están usando mal, así que por ahora
// no hago nada.
// Algo anda muy mal.
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">reject&lt;/span>&lt;span style="color:#5fb3b3;">();
}
}
&lt;/span>&lt;/pre>
&lt;p>Ahora &lt;code>filter_future&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#c594c5;">function &lt;/span>&lt;span style="color:#6699cc;">filter_future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">predicate_fun&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#f99157;">val &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#5fb3b3;">{
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#6699cc;">predicate_fun&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">);
&lt;/span>&lt;span style="color:#5f6364;">// ¿Acaso devolviste una promesa?
&lt;/span>&lt;span style="color:#c594c5;">if&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#cccece;">then&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#5f6364;">// Lo hiciste. Es por eso que no te pasan cosas buenas.
// veamos dentro de la promesa.
&lt;/span>&lt;span style="color:#c594c5;">const &lt;/span>&lt;span style="color:#6699cc;">return_result &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#f99157;">the_real_result &lt;/span>&lt;span style="color:#c594c5;">=&amp;gt; &lt;/span>&lt;span style="color:#cccece;">the_real_result
&lt;/span>&lt;span style="color:#5fb3b3;">? &lt;/span>&lt;span style="color:#cccece;">val
&lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">reject&lt;/span>&lt;span style="color:#5fb3b3;">();
&lt;/span>&lt;span style="color:#5f6364;">// mantenemos la cadena viva.
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">then&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">return_result&lt;/span>&lt;span style="color:#5fb3b3;">);
}
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#cccece;">result &lt;/span>&lt;span style="color:#5fb3b3;">? &lt;/span>&lt;span style="color:#cccece;">val &lt;/span>&lt;span style="color:#5fb3b3;">: &lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">reject&lt;/span>&lt;span style="color:#5fb3b3;">();
}
}
&lt;/span>&lt;/pre>
&lt;p>Lo último que me gustaría hacer es crear una función que convierta un valor regular en un &lt;code>Future&lt;/code>.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#fac863;">Future&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">from_val &lt;/span>&lt;span style="color:#5fb3b3;">= &lt;/span>&lt;span style="color:#c594c5;">function&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#f99157;">val&lt;/span>&lt;span style="color:#5fb3b3;">) {
&lt;/span>&lt;span style="color:#c594c5;">return &lt;/span>&lt;span style="color:#6699cc;">Future&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#fac863;">Promise&lt;/span>&lt;span style="color:#5fb3b3;">.&lt;/span>&lt;span style="color:#6699cc;">resolve&lt;/span>&lt;span style="color:#5fb3b3;">(&lt;/span>&lt;span style="color:#cccece;">val&lt;/span>&lt;span style="color:#5fb3b3;">));
}
&lt;/span>&lt;/pre>
&lt;p>Ahora lo que tenemos que hacer para agregar soporte dentro de &lt;code>Maybe&lt;/code> es esto.&lt;/p>
&lt;pre style="background-color:#2b2c2f;">
&lt;span style="color:#cccece;"> function Maybe(the_thing) {
if(the_thing === null
|| the_thing === undefined
|| the_thing.is_nothing
) {
return Nothing();
}
&lt;/span>&lt;span style="color:#5fb3b3;">-
-&lt;/span>&lt;span style="color:#ec5f67;"> if(the_thing.is_just) {
&lt;/span>&lt;span style="color:#5fb3b3;">+&lt;/span>&lt;span style="color:#99c794;"> if(the_thing.is_future || the_thing.is_just) {
&lt;/span>&lt;span style="color:#cccece;"> return the_thing;
}
return Just(the_thing);
}
&lt;/span>&lt;/pre>
&lt;p>Pero la pregunta del millón sigue ahí. ¿Funciona?&lt;/p>
&lt;p>Hice una &amp;quot;&lt;a href="https://github.com/VonHeikemen/maybe-type-in-js">versión para terminal&lt;/a>&amp;quot; de esta aplicación. También modifiqué el ejemplo de codepen: agregué las funciones relacionadas con &lt;code>Future&lt;/code>, el dialogo de confirmación ahora sí es un dialogo (&lt;a href="https://github.hubspot.com/vex/">este&lt;/a>) y la función del evento 'submit' la marqué con &lt;code>async&lt;/code> para poder usar &lt;code>await&lt;/code>.&lt;/p>
&lt;p
class="codepen"
data-height="600"
data-theme-id="dark"
data-default-tab="js,result"
data-user="VonHeikemen"
data-slug-hash="oNNwagG"
data-preview="true"
style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"
data-pen-title="Maybe I will promise you a word">
&lt;span>
See the Pen &lt;a href="https://codepen.io/VonHeikemen/pen/oNNwagG">Maybe I will promise you a word&lt;/a> by Heiker (&lt;a href="https://codepen.io/VonHeikemen">@VonHeikemen&lt;/a>) on &lt;a href="https://codepen.io">CodePen&lt;/a>.
&lt;/span>
&lt;/p>
&lt;h3 id="bonus-bonus-edit">Bonus bonus edit&lt;/h3>
&lt;p>Antes mencioné que haríamos trampa con esta implementación. &lt;a href="https://codepen.io/VonHeikemen/pen/QWWYJwZ">Así sería&lt;/a> con una implementación más apegada a las ideas del paradigma funcional.&lt;/p></description></item></channel></rss>